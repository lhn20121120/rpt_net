
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.RoleToolForm;
import com.cbrc.auth.form.ToolSettingForm;
import com.cbrc.auth.hibernate.Role;
import com.cbrc.auth.hibernate.RoleTool;
import com.cbrc.auth.hibernate.ToolSetting;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for RoleTool data (i.e. 
 * com.cbrc.auth.form.RoleToolForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsRoleToolDelegate {
    private static FitechException log = new FitechException(StrutsRoleToolDelegate.class); 
       
    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：RoleTool
     * 通过角色id取得该角色已经设置的权限信息
     * @param roleId Long 角色id
     * @return List 该角色已经设置的权限信息
     */
    public static List getRoleMenus(Long roleId){       
    	List result = null;       
    	DBConn conn = null;       
    	Session session = null;
       
    	try{           
    		if(roleId!=null){              
    			conn = new DBConn();              
    			session = conn.openSession();
                          
    			Query query = session.createQuery("from RoleTool rt where rt.role.roleId="+roleId);              
    			List list = query.list();
    			
    			if(list!=null && list.size()!=0){                   
    				result = new ArrayList();
                   
    				for(Iterator it = list.iterator(); it.hasNext();){                    
    					RoleToolForm roleToolFormTemp = new RoleToolForm();                       
    					RoleTool roleToolFormPersistence = (RoleTool)it.next();                       
    					TranslatorUtil.copyPersistenceToVo(roleToolFormPersistence, roleToolFormTemp);                       
    					result.add(roleToolFormTemp);                   
    				}               
    			}           
    		}       
    	}catch(Exception e){           
    		result = null;           
    		log.printStackTrace(e);       
    	}finally{         
    		if(conn!=null)            
    			conn.closeSession();
    	}      
    	return result;   
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：ToolSetting RoleTool
     * 通过角色id字串取得可以给角色设置的权限
     * @param roleIds
     * @return List 可以给该角色设置的权限信息
     */
    public static List getRoleMenuPopedom(String roleIds,boolean isSuperManager){
    	List result = null;
    	DBConn conn = null;
    	Session session = null;
    	
    	try{
    		StringBuffer hql = new StringBuffer();
    		if(isSuperManager == true)
    			hql.append("select distinct ts.menuId,ts.menuName from ToolSetting ts");
    		else{
    			if(roleIds == null || roleIds.equals(""))
    				return result;    			
    			hql.append( "select distinct ts.menuId,ts.menuName from ToolSetting ts where ts.menuId in (select rt.toolSetting.menuId from RoleTool rt where rt.role.roleId in (" + roleIds + "))");
    		}
    		hql.append(" order by ts.menuName");
    		
    		conn = new DBConn();
			session = conn.openSession();
						
			Query query = session.createQuery(hql.toString());
			List list = query.list();
			
			if(list != null && list.size() > 0){
				result = new ArrayList();
				
				for(Iterator it = list.iterator(); it.hasNext();){                    
					ToolSettingForm toolSettingFormTemp = new ToolSettingForm();                       
					Object[] object = (Object[])it.next();                       
					toolSettingFormTemp.setMenuId(new Long(object[0].toString()));
					toolSettingFormTemp.setMenuName(object[1].toString());
					result.add(toolSettingFormTemp);                   
				}   
			}
    	}catch(Exception e){
    		result = null;
    		log.printStackTrace(e);    		
    	}finally{
    		if(conn!=null)conn.closeSession();
    	}
    	return result;
    }
    
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：RoleTool
    * 通过用户id取得该角色已经设置的权限数量
    * @param roleId Long 角色id
    * @return int 该角色已经设置的权限数量
    */
  public static int getRoleMenuNum(Long roleId)
  {
      int result = 0;
      DBConn conn = null;
      Session session = null;
      try
      {
          if(roleId!=null)
          {
              conn = new DBConn();
              session = conn.openSession();
          
              Query query = session.createQuery("select count(*) from RoleTool rt where rt.role.roleId="+roleId);
              List list = query.list();
              if(list!=null && list.size()!=0)
              {
                 result = ((Integer)list.get(0)).intValue();
              }
          }
      }
      catch(Exception e)
      {
          result = 0;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.closeSession();
      }
      return result;
  }
  /**
   * 已使用hibernate 卞以刚 2011-12-28
   * 影响对象：RoleTool
   * 删除属于该角色的权限信息
   * @param roleId Long 角色id
   * @return 删除是否成功
   */
  public static boolean deleteFromRoleId(Long roleId)
  {
      boolean result = false;
      DBConn conn = null;
      Session session = null;
      try
      {
          if(roleId!=null)
          {
              conn = new DBConn();
              session = conn.beginTransaction();
              String hql = "from RoleTool rt where rt.role.roleId="+roleId;
              
              session.delete(hql);
              session.flush();
              result = true;
          }
      }
      catch(Exception e)
      {
          result = false;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.endTransaction(result);
      }     
      return result;     
  }
  /**
   * 已使用hibernate 卞以刚 2011-12-28
   * 影响对象：RoleTool Role
   * 为角色添加菜单权限信息
   * @param roleId Long 角色id
   * @param menuId Long 菜单id
   * @return 添加是否成功
   */
  public static boolean insert(RoleToolForm roleToolForm)
  {
      boolean result = false;
      DBConn conn = null;
      Session session = null;
      try
      {
          if(roleToolForm!=null)
          {
              /**角色id*/
              Long roleId = roleToolForm.getRoleId();
              /**菜单id字串（用","号隔开）*/
              String selectedMenuIds = roleToolForm.getSelectedMenuIds();
              
              if(roleId!=null && selectedMenuIds!=null && !selectedMenuIds.equals(""))
              {
                  conn = new DBConn();
                  /**取出每个菜单id*/
                  String[] menuIds = selectedMenuIds.split(",");
                  if(menuIds!=null && menuIds.length>0)
                  {
                      session = conn.beginTransaction();
                      /**构造实体类并插入数据库*/
                      for(int i=0;i<menuIds.length;i++)
                      {
                          RoleTool roleTool = new RoleTool();
                          
                          ToolSetting toolSetting = new ToolSetting();
                          toolSetting.setMenuId(Long.valueOf(menuIds[i]));
                          roleTool.setToolSetting(toolSetting);
                          
                          Role role = new Role();
                          role.setRoleId(roleId);
                          roleTool.setRole(role);
                          
                          session.save(roleTool);
                          session.flush();
                          result  = true;                        
                      }                                      
                  }
              }
              
          }
      }
      catch(Exception e)
      {
          result = false;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.endTransaction(result);
      }     
      return result;     
      
  }
  /**
   * 取得有多少角色添加个该菜单信息
   * 
   */
  public static int getMenuRoleNum(Long menuId)
  {
      int result = 0;
      DBConn conn = null;
      Session session = null;
      try
      {
          if(menuId!=null)
          {
              conn = new DBConn();
              session = conn.openSession();
          
              Query query = session.createQuery("select count(*) from RoleTool rt where rt.toolSetting.menuId="+menuId);
              List list = query.list();
              if(list!=null && list.size()!=0)
              {
                 result = ((Integer)list.get(0)).intValue();
              }
          }
      }
      catch(Exception e)
      {
          result = 0;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.closeSession();
      }
      return result;
      
  }
  /**
   * 已使用hibernate 卞以刚 2011-12-21 
   * 影响对象：RoleTool
   * 取得这些角色id可以访问的url信息
   * @param roleIds 角色id字串（用逗号隔开）
   * @return List 这些角色id可以访问的url信息（不重复）
   */
  public static List getUrlByRoleIds(String roleIds,boolean isSuperManager)
  {
      List result = null;
      DBConn conn = null;
      Session session = null;
      try
      {
          if(roleIds!=null)
          {
              conn = new DBConn();
              session = conn.openSession();
              
	          String hql=null;
	          if(isSuperManager == true)
	        	//如果是超级管理员，查询出所有的菜单
	        	 hql="select distinct ts.url from ToolSetting ts";
	      	  else{
	      		//如果不是超级管理员，则查询出用户所在用户组所拥有的菜单
	      		if(roleIds == null || roleIds.equals("")){
	      			return result;    			
	      		}
	      		hql = "select distinct rt.toolSetting.url from RoleTool rt where rt.role.roleId in("+roleIds+")";
	      	  }
	              
              Query query = session.createQuery(hql);
              List list = query.list();
              if(list!=null && list.size()!=0)
              { 
                 result = new ArrayList();
                 for(int i=0;i<list.size();i++)
                 {
                    if(list.get(i)!=null) result.add(((String)list.get(i)).trim());    
                 }                 
              }
          }
      }
      catch(Exception e)
      {
          result = null;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.closeSession();
      }
      return result;
      
  }
}
