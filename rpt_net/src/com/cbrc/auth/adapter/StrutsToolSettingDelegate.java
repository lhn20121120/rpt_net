
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.ToolSettingForm;
import com.cbrc.auth.hibernate.ToolSetting;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for ToolSetting data (i.e. 
 * com.cbrc.auth.form.ToolSettingForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsToolSettingDelegate {
    private static FitechException log = new FitechException(StrutsDepartmentDelegate.class);
    
    /**
     * 增加功能菜单信息
     * @param toolSettingForm
     * @return boolean
     * @author gujie
     * @throws Exception
     */
    public static boolean create (ToolSettingForm toolSettingForm) throws Exception {
        
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       if(toolSettingForm != null){
           try{
               conn = new DBConn();
               session = conn.beginTransaction(); 
               
               ToolSetting toolSettingPersistence = new ToolSetting();
               TranslatorUtil.copyVoToPersistence(toolSettingPersistence,toolSettingForm);
               
               session.save(toolSettingPersistence);
               session.flush();
               result = true;
           }catch(Exception e){
               log.printStackTrace(e);
               result = false;
           }finally{
               if(conn!=null)
                   conn.endTransaction(result);
           }
       }
       return result;
    }


   
   /**
    * 取所有的菜单信息
    * 
    * @author gujie
    *
    * return List
    * 
    * Create a new com.cbrc.auth.form.ToolSettingForm object and persist (i.e. insert) it.
    *
    * @param   toolSettingForm   The object containing the data for the new com.cbrc.auth.form.ToolSettingForm object
    * @exception   Exception   If the new com.cbrc.auth.form.ToolSettingForm object cannot be created or persisted.
    */
   public static List findAll () throws Exception {
      List result = new ArrayList();
      DBConn conn = null;
      Session session = null;
      try{
    	  conn = new DBConn();
    	  session = conn.openSession();
    	  List list = session.find("from ToolSetting ts");
    	  if(list!=null && list.size()!=0){
    		  result = new ArrayList();
    		  for(int i=0;i<list.size();i++){
    			  ToolSettingForm form = new ToolSettingForm();
    			  ToolSetting ts = (ToolSetting)list.get(i);
    			  TranslatorUtil.copyPersistenceToVo(ts,form);
    			  result.add(form);
    			  
    		  }
    			  
    	  }
      }
      catch(HibernateException he){
    	  result =null;
    	  he.printStackTrace();
    	  
      }
      finally{
    	  if(conn!=null)
    		  conn.closeSession();
      }
        
      
      return result;
   }
   
   /**
    * 取分页后的功能菜单信息
    * 
    * @author gujie 
    * 
    * return List
    * 
    */
   public static List select (int offset,int limit) throws Exception {
	      List result = null;
	      DBConn conn = null;
	      Session session = null;
	      try
	      {
	          conn = new DBConn();
	          session = conn.openSession();
	      
	          Query query = session.createQuery("from ToolSetting");
	          query.setFirstResult(offset);
	          query.setMaxResults(limit);
	          
	          List list = query.list();
	          if(list!=null && list.size()!=0)
	          {
	              result = new ArrayList();
	              for(Iterator it = list.iterator(); it.hasNext();)
	              {
	            	  ToolSettingForm toolSettingForm = new ToolSettingForm();
	            	  ToolSetting rolePersistence = (ToolSetting)it.next();
	                  TranslatorUtil.copyPersistenceToVo(rolePersistence, toolSettingForm);
	                  result.add(toolSettingForm);         
	              }       
	          }
	      }
	      catch(Exception e)
	      {
	          result = null;
	          log.printStackTrace(e);
	      }
	      finally{
	          if(conn!=null)
	             conn.closeSession();
	      }
	      return result;
	   }
   /**
    * 取功能菜单记录数
    * 
    * @author gujie
    * 
    * return 记录数
    */
   public static int getRecordCount() throws Exception
   {
       int result =0;
       DBConn conn =null;
       Session session =null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           
           Query query = session.createQuery("select count(*) from ToolSetting");
           List list = query.list();
     
           if(list!=null && list.size()!=0)
               result = ((Integer)list.get(0)).intValue();
           
       }
       catch(Exception e)
       {
           log.printStackTrace(e);
           result = 0;
       }
       finally{
           if(conn!=null)
               conn.closeSession();
       }
      
       return result;
   }
   /**
    * 删除该记录
    * 
    * @author gujie
    * 
    * return 是否修改信息成功信息
    * 
    */
   public static boolean remove(ToolSettingForm toolSettingForm)throws Exception
   {
	   boolean result = false;
	   DBConn conn = null;
	   Session session = null;
	   if(toolSettingForm!= null){
		   try{
			   conn = new DBConn();
			   session = conn.beginTransaction();
			   ToolSetting toolSetting = (ToolSetting)session.load(ToolSetting.class,toolSettingForm.getMenuId());
			   session.delete(toolSetting);
			   session.flush();
			   result = true;
		   }
		   catch(Exception e){
			   e.printStackTrace();
			   result = false;
		   }
		   finally{
			   if(conn!=null)
				   conn.endTransaction(result);
		   }
	   }
	   return result;
   }
   /**
    * 更新数据库信息
    * 
    * @author gujie 
    * 
    * @parameter ToolSettingForm toolSettingForm
    * 
    * @return  是否更新成功
    */
   public static boolean update(ToolSettingForm toolSettingForm)throws Exception
   {   
	   boolean result = false;
	   DBConn conn = null;
	   Session session = null;
	   try{
		   if(toolSettingForm!=null){
			   conn = new DBConn();
			   session = conn.beginTransaction();
			   ToolSetting toolSetting = (ToolSetting)session.load(ToolSetting.class,toolSettingForm.getMenuId());
			   toolSetting.setMenuName(toolSettingForm.getMenuName().trim());
			   toolSetting.setFunctionName(toolSettingForm.getFunctionName().trim());
			   toolSetting.setUrl(toolSettingForm.getUrl().trim());			     
			   session.update(toolSetting);
			   session.flush();
			   result = true;
		   }
	   }
		   catch(Exception e){
			   log.printStackTrace(e);
               result = false;
		   }
		   finally{
			   if(conn!=null)
				   conn.endTransaction(result);
		   }
	   return result;
   }
   
   

   public static boolean isExist(ToolSettingForm toolSettingForm) throws Exception {
   
   	  boolean result = false;
   	  DBConn conn = null;
   	  Session session = null;
	  
   	  try{   	  	
   		  conn = new DBConn();   	  	
   		  session = conn.openSession();   	  	
   		  Query query = session.createQuery("from ToolSetting ts where ts.menuName='" + toolSettingForm.getMenuName().trim() + "'");	    
   	  	
   		  List list = query.list();   	  	
   		  if(list!=null && list.size()>0)   	  		
   			  result = true; 
   		  
   	  }catch(Exception e){   	  
   		  result = false;   	  	
   		  log.printStackTrace(e);
   	  }finally{   	  	
   		  if(conn!=null)   	  		
   			  conn.closeSession();
   	  }
   	  return result;
   }        
}
