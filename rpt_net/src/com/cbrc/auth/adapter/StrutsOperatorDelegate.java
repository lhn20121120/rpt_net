package com.cbrc.auth.adapter;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.OperatorForm;
import com.cbrc.auth.hibernate.Department;
import com.cbrc.auth.hibernate.Operator;
import com.cbrc.auth.util.Encoder;
import com.cbrc.auth.util.IStrutsUserDelegate;
import com.cbrc.org.entity.SysUser;
import com.cbrc.smis.common.Config;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;
import com.fitech.net.hibernate.OrgNet;

/**
 * This is a delegate class to handle interaction with the backend persistence
 * layer of hibernate. It has a set of methods to handle persistence for
 * Operator data (i.e. com.cbrc.auth.form.OperatorForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsOperatorDelegate {
	private static FitechException log = new FitechException(
			StrutsOperatorDelegate.class);

	/**
	 * 插入一条用户记录
	 * 
	 * @param departmentForm
	 *            包含要插入的部门名称
	 * @exception Exception
	 *                If the new com.cbrc.auth.form.DepartmentForm object cannot
	 *                be created or persisted.
	 */
	public static Long create(OperatorForm operatorForm, Integer temp)
			throws Exception {

		boolean result = false;
		Long user_id = null;
		DBConn conn = null;
		Session session = null;
		if (operatorForm != null) {
			try {
				conn = new DBConn();
				session = conn.beginTransaction();
				Operator operator = new Operator();

				if (operatorForm.getPassword() != null
						&& !operatorForm.getPassword().equals("")) {
					operator.setPassword(Encoder.getMD5_Base64(operatorForm
							.getPassword()));
				}
				operator.setUserName(operatorForm.getUserName());
				operator.setFirstName(operatorForm.getFirstName());
				operator.setLastName(operatorForm.getLastName());
				if (operatorForm.getOrgId() != null) {
					OrgNet orgNet = new OrgNet();
					orgNet.setOrgId(operatorForm.getOrgId());
					operator.setOrg(orgNet);
				}
				session.save(operator);

				/* session.flush(); */
				user_id = operator.getUserId();
				result = true;

			} catch (Exception e) {
				log.printStackTrace(e);
				result = false;
			} finally {
				if (conn != null)
					conn.endTransaction(result);
			}
		}
		return user_id;
	}
	
	/***
	 * 已使用hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * @param operatorForm
	 * @return
	 * @throws Exception
	 */
	public static boolean create(OperatorForm operatorForm,boolean isSynPortal) throws Exception {
		//判断门户当中是否已经有这个用户了
		boolean result = false;
		DBConn conn = null;
		Session session = null;
		if (operatorForm != null) {
			try {
				conn = new DBConn();
				session = conn.beginTransaction();
				Operator operator = new Operator();
				//注释掉密码加密
				TranslatorUtil.copyVoToPersistence(operator, operatorForm);
				//增加用户同时也给门户增加用户
				if(isSynPortal){
					IStrutsUserDelegate user = (IStrutsUserDelegate)Class.forName(Config.PORATLSYNAIMPL).newInstance();
					SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
					SysUser sysuser = new SysUser();
					sysuser.setAddress(operator.getAddress());
					sysuser.setDeparTment(operator.getDepartment().getDepartmentId().toString());
					sysuser.setEmail(operator.getMail());
					sysuser.setIsSuper(operator.getSuperManager()==null? "false":"true");
					sysuser.setOrgId(operator.getOrg().getOrgId());
					sysuser.setPassWord(operator.getPassword());
					sysuser.setPostCode(operator.getPostalCode());
					sysuser.setRealName(operator.getFirstName()+operator.getLastName());
					sysuser.setTelphoneNumber(operator.getTelephoneNumber());
					sysuser.setUpdateDate(format.format(operator.getUpdateTime()));
					sysuser.setUserName(operator.getUserName());
					List list = user.getUserList(operatorForm.getUserName());
					if(list.size()==0)
						result = user.insertUser(sysuser);
					result = user.insertAssociation(operator.getUserName());
				}
				session.save(operator);
				session.flush();
				result = true;
			} catch (Exception e) {
				log.printStackTrace(e);
				result = false;
			} finally {
				if (conn != null)
					conn.endTransaction(result);
			}
		}
		return result;
	}

	public static Long create(Operator operator) throws Exception {

		Long userId = null;
		DBConn conn = null;
		Session session = null;
		if (operator != null) {
			try {
				conn = new DBConn();
				session = conn.beginTransaction();

				operator.setPassword(Encoder.getMD5_Base64(operator
						.getPassword()));

				session.save(operator);

				userId = operator.getUserId();
				// session.flush();

			} catch (Exception e) {
				log.printStackTrace(e);
			} finally {

				if (conn != null)
					conn.endTransaction(true);
			}
		}
		return userId;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-23
	 * 影响对象：Operator
	 * 修改部门信息
	 * 
	 * @author 姚捷
	 * @param departmentForm
	 *            DepartmentForm 包含需要更新的部门id和更新的部门名称
	 * @return boolean 修改是否成功
	 * @exception Exception
	 */
	public static boolean update(OperatorForm operatorForm,boolean isSynPortal) throws Exception {

		boolean result = false;
		DBConn conn = null;
		Session session = null;
		if (operatorForm != null) {
			try {
				if (operatorForm != null) {
					conn = new DBConn();
					session = conn.beginTransaction();
					/**已使用hibernate 卞以刚 2011-12-23
					 * 影响对象：Operator*/
					Operator operator = (Operator) session.load(Operator.class,
							operatorForm.getUserId());
					// TranslatorUtil.copyVoToPersistence(operator,operatorForm);
					if (operatorForm.getPassword() != null
							&& !operatorForm.getPassword().equals("")) {
						operator.setPassword(Encoder.getMD5_Base64(operatorForm
								.getPassword()));
					}
					operator.setUserName(operatorForm.getUserName());
					operator.setFirstName(operatorForm.getFirstName());
					operator.setLastName(operatorForm.getLastName());
					operator.setMail(operatorForm.getMail());
					operator.setIdentificationNumber(operatorForm
							.getIdentificationNumber());
					operator
							.setEmployeeNumber(operatorForm.getEmployeeNumber());
					operator.setTitle(operatorForm.getTitle());
					operator.setEmployeeType(operatorForm.getEmployeeType());
					operator.setBranch(operatorForm.getBranch());
					operator.setAddress(operatorForm.getAddress());
					operator.setPostalAddress(operatorForm.getPostalAddress());
					operator.setPostalCode(operatorForm.getPostalCode());
					operator.setFax(operatorForm.getFax());
					operator.setTelephoneNumber(operatorForm
							.getTelephoneNumber());
					operator.setManager(operatorForm.getManager());
					operator.setSex(operatorForm.getSex());
					operator.setAge(operatorForm.getAge());
					operator.setGroupNumber(operatorForm.getGroupNumber());
					operator.setUpdateTime(new Date());
					if (operatorForm.getOrgId() != null
							&& !operatorForm.getOrgId().equals("")) {
						OrgNet orgNet = new OrgNet();
						orgNet.setOrgId(operatorForm.getOrgId());
						operator.setOrg(orgNet);
					}
					if (operatorForm.getDepartmentId() != null
							&& !operatorForm.getDepartmentId().equals("")) {
						Department dept = new Department();
						dept.setDepartmentId(operatorForm.getDepartmentId());
						operator.setDepartment(dept);
					}
					/**hibernate 卞以刚 2011-12-28*/
					session.update(operator);
					session.flush();
					if(isSynPortal){
						Operator operators = (Operator) session.load(Operator.class,
								operatorForm.getUserId());
						System.out.println("name "+operators.getFirstName()+" "+operators.getLastName());
						SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
						SysUser sysuser = new SysUser();
						IStrutsUserDelegate user = (IStrutsUserDelegate)Class.forName(Config.PORATLSYNAIMPL).newInstance();
						sysuser.setAddress(operators.getAddress());
						sysuser.setDeparTment(operators.getDepartment().getDepartmentId().toString());
						sysuser.setEmail(operators.getMail());
						sysuser.setIsSuper(operators.getSuperManager()==null? "false":"true");
						sysuser.setOrgId(operators.getOrg().getOrgId());
						sysuser.setPassWord(operators.getPassword());
						sysuser.setPostCode(operators.getPostalCode());
						sysuser.setRealName(operators.getFirstName()+operators.getLastName());
						sysuser.setTelphoneNumber(operators.getTelephoneNumber());
						sysuser.setUpdateDate(format.format(operators.getUpdateTime()));
						sysuser.setUserName(operators.getUserName());
						result=user.updateUser(sysuser);
					}
					result = true;
				}
			} catch (Exception e) {
				log.printStackTrace(e);
				result = false;
			} finally {
				if (conn != null)
					conn.endTransaction(result);
			}
		}
		return result;
	}

	/**
	 * 已使用Hibernate 卞以刚 2011-12-28
	 * 影响对象：UserRole MUserToGrp Operator
	 * 删除用户信息
	 * 
	 * @author 姚捷
	 * @param departmentForm
	 *            DepartmentForm 包含要删除的用户的编号
	 * @return boolean 删除是否成功
	 * @exception Exception
	 *                If the com.cbrc.auth.form.DepartmentForm object cannot be
	 *                removed.
	 */
	public static boolean remove(OperatorForm operatorForm,boolean isSynPortal) throws Exception {
		boolean result = false;
		IStrutsUserDelegate user = (IStrutsUserDelegate)Class.forName(Config.PORATLSYNAIMPL).newInstance();
		DBConn conn = null;
		Session session = null;
		if (operatorForm != null) {
			try {
				conn = new DBConn();
				Long userId = operatorForm.getUserId();
				
				/** 删除用户角色对照表 */
				/**已使用hibernate 卞以刚 2011-12-28
				 * 影响对象：UserRole*/
				StrutsUserRoleDelegate.deleteUserSetRole(userId);
				/** 删除用户用户组对照表 */
				/**已使用Hibernate 卞以刚 2011-12-28
				 * 影响对象：MUserToGrp*/
				StrutsMUserToGrpDelegate.deleteUserSetUserGrp(userId);

				session = conn.beginTransaction();

				/** 删除本表信息 */
				/**使用了hibernate 卞以刚 2011-12-28
				 * 影响对象：Operator*/
				Operator operator = (Operator) session.load(Operator.class,
						operatorForm.getUserId());
				if(isSynPortal){
					result = user.deleteUser(operator.getUserName());
				}
				session.delete(operator);
				session.flush();
				result = true;
			} catch (Exception e) {
				log.printStackTrace(e);
				result = false;
			} finally {
				if (conn != null)
					conn.endTransaction(result);
			}
		}

		return result;
	}

	/**
	 * 已使用Hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 分页显示记录
	 * 
	 * @author 姚捷
	 * @param subOrgIds
	 * @param offset
	 *            int 偏移量
	 * @param limit
	 *            int 取最大记录数
	 * @param isSuperManager
	 * @return List 记录集合
	 * @throws Exception
	 */
	public static List selectOP(String subOrgIds, int offset, int limit,
			boolean isSuperManager, String userName,String orgName) throws Exception {
		List result = null;
		DBConn conn = null;
		Session session = null;
		if (userName == null) {
			userName = "'%'";
		} else {
			if(userName.trim().equals("")){
				userName = "'%'";
			}else{
				userName = "'%" + userName.trim() + "%'";
			}
		}
		
		if (orgName == null) {
			orgName = "'%'";
		} else {
			if(orgName.trim().equals("")){
				orgName = "'%'";
			}else{
				orgName = "'%" + orgName.trim() + "%'";
			}
		}
		
		
		try {
			conn = new DBConn();
			session = conn.openSession();

			String hql = "";
			if (isSuperManager == true)
				hql = " from com.cbrc.auth.hibernate.Operator op where (op.userName like "
						+ userName+ " or op.firstName like "+ userName+ " or op.lastName like " + userName
						+") and op.superManager is null and op.org.orgName like " + orgName + "order by op.userName";

			else
				hql = " from com.cbrc.auth.hibernate.Operator op where op.org.orgId in ("+ subOrgIds+ ") "
						+ "and (op.userName like "+ userName+ " or op.firstName like "+ userName+ " or op.lastName like "+ userName
						+ ") and op.superManager is null and op.org.orgName like " + orgName + "order by op.userName";

			Query query = session.createQuery(hql);
			query.setFirstResult(offset);
			query.setMaxResults(limit);

			List list = query.list();
			if (list != null && list.size() != 0) {
				result = new ArrayList();
				for (Iterator it = list.iterator(); it.hasNext();) {
					OperatorForm operatorFormTemp = new OperatorForm();
					Operator operatorPersistence = (Operator) it.next();
					TranslatorUtil.copyPersistenceToVo(operatorPersistence,
							operatorFormTemp);
					result.add(operatorFormTemp);
				}
			}
		} catch (Exception e) {
			result = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null) {
				conn.closeSession();
			}
		}
		return result;
	}

	/**
	 * 分页显示记录
	 * 
	 * @author 姚捷
	 * @param subOrgIds
	 * @param offset
	 *            int 偏移量
	 * @param limit
	 *            int 取最大记录数
	 * @param isSuperManager
	 * @return List 记录集合
	 * @throws Exception
	 */
	public static List select(String subOrgIds, int offset, int limit,
			boolean isSuperManager) throws Exception {
		List result = null;
		DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();

			String hql = "";
			if (isSuperManager == true)
				hql = "from com.cbrc.auth.hibernate.Operator op order by op.userName";
			else
				hql = "from com.cbrc.auth.hibernate.Operator op where op.org.orgId in ("
						+ subOrgIds + ") order by op.userName";

			Query query = session.createQuery(hql);
			query.setFirstResult(offset);
			query.setMaxResults(limit);

			List list = query.list();
			if (list != null && list.size() != 0) {
				result = new ArrayList();
				for (Iterator it = list.iterator(); it.hasNext();) {
					OperatorForm operatorFormTemp = new OperatorForm();
					Operator operatorPersistence = (Operator) it.next();
					TranslatorUtil.copyPersistenceToVo(operatorPersistence,
							operatorFormTemp);
					result.add(operatorFormTemp);
				}
			}
		} catch (Exception e) {
			result = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null) {
				conn.closeSession();
			}
		}
		return result;
	}

	/**
	 * 取出数据库中的记录总数
	 * 
	 * @param subOrgIds
	 *            子机构id字串
	 * @param isSuperManager
	 * @return int 记录数
	 * @throws Exception
	 */
	public static int getRecordCount(String subOrgIds, boolean isSuperManager)
			throws Exception {
		int result = 0;
		DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();

			String hql = "";
			if (isSuperManager == true)
				hql = "select count(*) from com.cbrc.auth.hibernate.Operator";
			else
				hql = "select count(*) from com.cbrc.auth.hibernate.Operator op where op.org.orgId in ("
						+ subOrgIds + ")";

			Query query = session.createQuery(hql);
			List list = query.list();

			if (list != null && list.size() != 0)
				result = ((Integer) list.get(0)).intValue();

		} catch (Exception e) {
			log.printStackTrace(e);
			result = 0;
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return result;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 取出数据库中的记录总数
	 * 
	 * @param subOrgIds
	 *            子机构id字串
	 * @param isSuperManager
	 * @return int 记录数
	 * @throws Exception
	 */
	public static int getRecordCountOP(String subOrgIds,
			boolean isSuperManager, String userName,String orgName) throws Exception {
		int result = 0;
		DBConn conn = null;
		Session session = null;
		if (userName == null) {
			userName = "'%'";
		} else {
			if(userName.trim().equals("")){
				userName = "'%'";
			}else{
				userName = "'%" + userName.trim() + "%'";
			}
		}
		
		if (orgName == null) {
			orgName = "'%'";
		} else {
			if(orgName.trim().equals("")){
				orgName = "'%'";
			}else{
				orgName = "'%" + orgName.trim() + "%'";
			}
		}
		
		try {
			conn = new DBConn();
			session = conn.openSession();

			String hql = "";
			if (isSuperManager == true)
				hql = "select count(*) from com.cbrc.auth.hibernate.Operator op where (op.userName like "
						+ userName + " or op.firstName like "
						+ userName + " or op.lastName like " + userName+") and op.superManager is null"
						+ " and op.org.orgName like " + orgName;

			else
				hql = "select count(*) from com.cbrc.auth.hibernate.Operator op where op.org.orgId in ("
						+ subOrgIds + ") and (op.userName like "
						+ userName + " or op.firstName like " + userName
						+ " or op.lastName like " + userName + ")"+" and op.superManager is null"
						+ " and op.org.orgName like " + orgName;;
			Query query = session.createQuery(hql);
			List list = query.list();

			if (list != null && list.size() != 0)
				result = ((Integer) list.get(0)).intValue();

		} catch (Exception e) {
			log.printStackTrace(e);
			result = 0;
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return result;
	}

	/**
	 * 已使用Hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 取得有多少用户是属于这个部门的
	 * 
	 * @author 姚捷
	 * @param deptId
	 *            Long 部门id
	 * @return 属于该部门的用户数量
	 */
	public static int getUserNumFromDeptId(Long deptId) {
		int result = 0;
		DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();
			String hql = "select count(*) from Operator op where op.department.departmentId="
					+ deptId.toString();
			Query query = session.createQuery(hql);

			List list = query.list();
			if (list != null && list.size() != 0) {
				result = ((Integer) list.get(0)).intValue();
			}
		} catch (Exception e) {
			result = 0;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 检查是否已经有该用户
	 * 
	 * @param userName
	 *            用户名
	 * @return 该用户是否存在
	 */
	public static boolean isUserNameExist(String userName) {
		boolean result = true;
		DBConn conn = null;
		Session session = null;
		try {
			if (userName != null) {
				conn = new DBConn();
				session = conn.openSession();
				String hql = "from Operator op where op.userName='"
						+ userName.toString() + "'";
				Query query = session.createQuery(hql);

				List list = query.list();
				if (list != null && list.size() != 0)
					result = true;
				else
					result = false;
			}
		} catch (Exception e) {
			result = true;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;

	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 取得用户详细信息
	 * 
	 * @param userId
	 *            Long 用户id
	 * @return 用户详细信息
	 */
	public static OperatorForm getUserDetail(Long userId) {
		OperatorForm operatorForm = null;

		DBConn conn = null;
		Session session = null;
		try {
			if (userId != null) {
				conn = new DBConn();
				session = conn.openSession();

				Query query = session
						.createQuery("from Operator op where op.userId="
								+ userId);

				List list = query.list();
				if (list != null && list.size() != 0) {
					operatorForm = new OperatorForm();
					Operator operatorPersistence = (Operator) list.get(0);
					TranslatorUtil.copyPersistenceToVo(operatorPersistence,
							operatorForm);
				}
			}
		} catch (Exception e) {
			operatorForm = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return operatorForm;

	}

	/**
	 * 
	 * 已使用hibernate 卞以刚 2011-12-21
	 * 影响对象：Operator
	 * 用户登录验证
	 * 
	 * @param userId
	 *            Long 用户id
	 * @return 如果验证通过则返回他的form，否则返回null
	 */
	public static OperatorForm userLoginValidate(OperatorForm operatorForm,String name) {
		OperatorForm result = null;

		DBConn conn = null;
		Session session = null;
		try {
			if (operatorForm != null) {
				String userName = operatorForm.getUserName();
				String password = operatorForm.getPassword();
				boolean isPass = false;
				if(name != null){
					isPass = true;
				}
				if (userName != null && !userName.equals("")
						&& password != null && !password.equals("") || isPass) {
					conn = new DBConn();
					session = conn.openSession();
					String hql = "";
					if(name!=null){
						hql = "from Operator op where op.userName='"+ userName + "'";
					}else{
						hql = "from Operator op where op.userName='"
							+ userName + "' and op.password='" 
							+ Encoder.getMD5_Base64(password) + "'"; //12月20日上传源码当天为了便于测试暂时屏蔽加密
						//	+password + "'";
					}
					Query query = session.createQuery(hql);

					List list = query.list();
					if (list != null && list.size() != 0) {
						result = new OperatorForm();
						Operator operatorPersistence = (Operator) list.get(0);
						TranslatorUtil.copyPersistenceToVo(operatorPersistence,
								result);
					}
				}
			}
		} catch (Exception e) {
			operatorForm = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}

	/**
	 * 用户登录验证
	 * 
	 * @param userId
	 *            Long 用户id
	 * @return 如果验证通过则返回他的form，否则返回null
	 */
	public static OperatorForm userNewLoginValidate(OperatorForm operatorForm) {
		OperatorForm result = null;

		DBConn conn = null;
		Session session = null;
		try {
			if (operatorForm != null) {
				String userName = operatorForm.getUserName();
				String password = operatorForm.getPassword();
				if (userName != null && !userName.equals("")
						&& password != null && !password.equals("")) {
					conn = new DBConn();
					session = conn.openSession();

					String hql = "from Operator op where op.userName='"
							+ userName + "' and op.password='" + password + "'";
					Query query = session.createQuery(hql);

					List list = query.list();
					if (list != null && list.size() != 0) {
						result = new OperatorForm();
						Operator operatorPersistence = (Operator) list.get(0);
						TranslatorUtil.copyPersistenceToVo(operatorPersistence,
								result);
					}
				}
			}
		} catch (Exception e) {
			operatorForm = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;

	}

	/**
	 * 用户登录验证
	 * 
	 * @param userId
	 *            Long 用户id
	 * @return 如果验证通过则返回他的form，否则返回null
	 */
	public static OperatorForm select(OperatorForm operatorForm) {
		OperatorForm result = null;

		DBConn conn = null;
		Session session = null;
		try {
			if (operatorForm != null) {
				String userName = operatorForm.getUserName();
				if (userName != null && !userName.equals("")) {
					conn = new DBConn();
					session = conn.openSession();

					String hql = "from Operator op where op.userName='"
							+ userName + "'";
					Query query = session.createQuery(hql);

					List list = query.list();
					if (list != null && list.size() != 0) {
						result = new OperatorForm();
						Operator operatorPersistence = (Operator) list.get(0);
						TranslatorUtil.copyPersistenceToVo(operatorPersistence,
								result);
					}
				}
			}
		} catch (Exception e) {
			operatorForm = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}

	/**
	 * 根据机构ID找到用户信息
	 * 
	 * @param orgId
	 * @return
	 * @throws Exception
	 */
	public static List findUserId(String orgId) throws Exception {

		List result = null;
		DBConn conn = null;
		Session session = null;
		OperatorForm operatorForm = new OperatorForm();

		try {
			conn = new DBConn();
			session = conn.openSession();

			Query query = session
					.createQuery("from Operator o where o.org.orgId='" + orgId
							+ "'");
			List list = query.list();

			if (list != null && list.size() != 0) {
				result = new ArrayList();
				for (Iterator it = list.iterator(); it.hasNext();) {
					com.cbrc.auth.hibernate.Operator operator = (com.cbrc.auth.hibernate.Operator) it
							.next();
					operatorForm.setUserId(operator.getUserId());
					operatorForm.setOrgId(operator.getOrg().getOrgId());
					result.add(operatorForm);
				}
			}
		} catch (Exception e) {
			result = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}

	/**
	 * 根据机构ID查询用户数
	 * 
	 * @param orgId
	 * @return
	 * @throws Exception
	 */
	public static int findUsers(String orgId) throws Exception {

		int count = 0;
		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.openSession();

			Query query = session
					.createQuery("select count(*) from Operator o where o.org.orgId='"
							+ orgId + "'");
			List list = query.list();

			if (list != null && list.size() != 0) {
				count = ((Integer) list.get(0)).intValue();
			}
		} catch (Exception e) {
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return count;
	}

	/**
	 * 根据机构ID找出该机构的所有用户ID
	 * 
	 * @param orgId
	 * @param bool
	 * @return
	 * @throws Exception
	 */
	public static String findUserId(String orgId, boolean bool)
			throws Exception {

		String userIds = null;
		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.openSession();

			Query query = session
					.createQuery("from Operator o where o.org.orgId='" + orgId
							+ "'");
			List list = query.list();

			if (list != null && list.size() != 0) {
				for (Iterator it = list.iterator(); it.hasNext();) {
					Operator operator = (Operator) it.next();
					userIds = userIds == null ? operator.getUserId().toString()
							: userIds + "," + operator.getUserId().toString();
				}
			}
		} catch (Exception e) {
			userIds = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return userIds;
	}

	/**
	 * 根据机构ID查看用户信息
	 * 
	 * @author 姚捷
	 * @return List 记录集合
	 * @exception Exception
	 */
	public static List select(String orgId) throws Exception {
		if (orgId == null)
			return null;
		List result = null;
		DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();

			Query query = session
					.createQuery(" from com.cbrc.auth.hibernate.Operator op where op.org.orgId='"
							+ orgId + "'");
			List list = query.list();
			if (list != null && list.size() != 0) {
				result = new ArrayList();
				for (Iterator it = list.iterator(); it.hasNext();) {
					OperatorForm operatorFormTemp = new OperatorForm();
					Operator operatorPersistence = (Operator) it.next();
					TranslatorUtil.copyPersistenceToVo(operatorPersistence,
							operatorFormTemp);
					result.add(operatorFormTemp);
				}
			}
		} catch (Exception e) {
			result = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null) {
				conn.closeSession();
			}
		}
		return result;
	}
	/**
	 * 已使用Hibernate 卞以刚 2011-12-28
	 * 影响对象：Operator
	 * 取得用户详细信息
	 * 
	 * @param userId
	 *            Long 用户id
	 * @return 用户详细信息
	 */
	public static String getUserName(Long userId) {
		String  userName = null;

		DBConn conn = null;
		Session session = null;
		try {
			if (userId != null) {
				conn = new DBConn();
				session = conn.openSession();

				Query query = session
						.createQuery("select op.userName from Operator op where op.userId="
								+ userId);

				List list = query.list();
				if (list != null && list.size() != 0) {
					 userName = (String) list.get(0);
					
				}
			}
		} catch (Exception e) {
			
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return userName;

	}
}
