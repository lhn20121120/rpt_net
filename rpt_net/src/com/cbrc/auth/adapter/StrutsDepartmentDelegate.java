
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.DepartmentForm;
import com.cbrc.auth.hibernate.Department;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.security.Operator;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for Department data (i.e. 
 * com.cbrc.auth.form.DepartmentForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsDepartmentDelegate {
    private static FitechException log = new FitechException(StrutsDepartmentDelegate.class); 

   /**
    * 已使用Hibernate 卞以刚 2011-12-28
    * 影响对象：Department
    *  插入一条部门记录
    *   
    * @param   departmentForm  包含要插入的部门名称
    * @exception   Exception   If the new com.cbrc.auth.form.DepartmentForm object cannot be created or persisted.
    */
   public static boolean create (DepartmentForm departmentForm, com.cbrc.smis.security.Operator operator) throws Exception {
       
       boolean result = false;
      DBConn conn =null;
      Session session =null;
      if(departmentForm!=null)
      {
          try
          {
              conn = new DBConn();
              session = conn.beginTransaction(); 
              
              Department dept = new Department();
              dept.setDeptName(departmentForm.getDeptName().trim());
              dept.setProductUser(StrutsProductUserDelegate.getCurrentSysUser());
              dept.setOrgId(operator.getOrgId());
              session.save(dept);
              session.flush();
              result = true;
          }
          catch(Exception e)
          {
              log.printStackTrace(e);
              result = false;
          }
          finally{
              if(conn!=null)
                  conn.endTransaction(result);
          }
      }
      return result;
   }

   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Department
    * 修改部门信息
    * @author 姚捷
    * @param   departmentForm  DepartmentForm 包含需要更新的部门id和更新的部门名称
    * @return boolean 修改是否成功
    * @exception   Exception   
    */
   public static boolean update (DepartmentForm departmentForm) throws Exception {
    
       boolean result = false;
       DBConn conn =null;
       Session session =null;
       if(departmentForm!=null)
       {
           try
           {
               conn = new DBConn();
               session = conn.beginTransaction(); 
               
               Department dept = (Department)session.load(Department.class,departmentForm.getDepartmentId());
               dept.setDeptName(departmentForm.getDeptName().trim());
                             
               session.update(dept);
               session.flush();
               result = true;
           }
           catch(Exception e)
           {
               log.printStackTrace(e);
               result = false;
           }
           finally{
               if(conn!=null)
                   conn.endTransaction(result);
           }
       }
      return result;
   }

   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Department
    * 删除部门信息
    * @author 姚捷
    * @param   departmentForm  DepartmentForm 包含要删除的部门的编号
    * @return  boolean 删除是否成功
    * @exception   Exception   If the com.cbrc.auth.form.DepartmentForm object cannot be removed.
    */  
   public static boolean remove (DepartmentForm departmentForm) throws Exception {
     boolean result = false;
     
     DBConn conn =null;
     Session session =null;
     if(departmentForm!=null)
     {
         try
         {
             conn = new DBConn();
             session = conn.beginTransaction(); 
             
             Department dept = (Department)session.load(Department.class,departmentForm.getDepartmentId());
            
             session.delete(dept);
             session.flush();
             result = true;
         }
         catch(Exception e)
         {
             log.printStackTrace(e);
             result = false;
         }
         finally{
             if(conn!=null)
                 conn.endTransaction(result);
         }
     }
         
     return result;
   }

   /**
    * 取得所有当前系统用户下的所有部门信息
    * 
    * @exception   Exception   If the com.cbrc.auth.form.DepartmentForm objects cannot be retrieved.
    */
   public static List findAll (String OrgId) throws Exception {
       List result = null;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
       
           Query query = session.createQuery("from Department dept where dept.orgId='"+OrgId+"'");//dept.productUser.productUserId="+StrutsProductUserDelegate.getCurSysUserID());
           
           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = new ArrayList();
               for(Iterator it = list.iterator(); it.hasNext();)
               {
                   DepartmentForm departmentFormTemp = new DepartmentForm();
                   Department departmentPersistence = (Department)it.next();
                   TranslatorUtil.copyPersistenceToVo(departmentPersistence, departmentFormTemp);
                   result.add(departmentFormTemp);         
               }       
           }
       }
       catch(Exception e)
       {
           result = null;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }

   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Department
    * 分页显示记录
    * @author 姚捷
    * @param  offset int 偏移量
    * @param  limit int 取最大记录数
    * @return  List 记录集合
    * @exception   Exception  
    */
   public static List select (com.cbrc.smis.security.Operator operator,int offset,int limit) throws Exception {
      List result = null;
      DBConn conn = null;
      Session session = null;
      try
      {
          conn = new DBConn();
          session = conn.openSession();
      
          Query query = session.createQuery("from Department dept where dept.orgId='"+operator.getOrgId()+"' order by dept.deptName");// and dept.productUser.productUserId="+StrutsProductUserDelegate.getCurSysUserID());
          query.setFirstResult(offset);
          query.setMaxResults(limit);
          
          List list = query.list();
          if(list!=null && list.size()!=0)
          {
              result = new ArrayList();
              for(Iterator it = list.iterator(); it.hasNext();)
              {
                  DepartmentForm departmentFormTemp = new DepartmentForm();
                  Department departmentPersistence = (Department)it.next();
                  TranslatorUtil.copyPersistenceToVo(departmentPersistence, departmentFormTemp);
                  result.add(departmentFormTemp);         
              }       
          }
      }
      catch(Exception e)
      {
          result = null;
          log.printStackTrace(e);
      }
      finally{
          if(conn!=null)
             conn.closeSession();
      }
      return result;
   }
   /**
    * 已使用Hibernate 卞以刚 2011-12-28
    * 影响对象：Department
    * 取出数据库中的记录总数
    * @author 姚捷
    * @return int 记录总数 
    */
   
   public static int getRecordCount(com.cbrc.smis.security.Operator operator) throws Exception
   {
       int result =0;
       DBConn conn =null;
       Session session =null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           
           Query query = session.createQuery("select count(*) from Department dept where dept.orgId='"+operator.getOrgId()+"'");//  and dept.productUser.productUserId="+StrutsProductUserDelegate.getCurSysUserID());
           List list = query.list();
     
           if(list!=null && list.size()!=0)
               result = ((Integer)list.get(0)).intValue();
           
       }
       catch(Exception e)
       {
           log.printStackTrace(e);
           result = 0;
       }
       finally{
           if(conn!=null)
               conn.closeSession();
       }
      
       return result;
   }
   
   /**
    * 已使用hibernate 卞以刚 2011-12-27
    * 影响对象：Department
    * 判断该部门名称是否已存在
    * @exception   Exception
    */
   public static boolean isExist(DepartmentForm departmentForm,Operator operator) throws Exception {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try{
           conn = new DBConn();
           session = conn.openSession();
       
           if(departmentForm == null) return false;
           
           Query query = session.createQuery("from Department dept where dept.deptName='" 
           		+ departmentForm.getDeptName().trim() + "' and dept.orgId='" + operator.getOrgId() + "'");
           
           List list = query.list();
           if(list!=null && list.size() > 0){
               result = true;
           }
       }
       catch(Exception e){
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }
   
   /**
    * This method will return all objects referenced by ProductUser
    */
   public static List getProductUser(com.cbrc.auth.form.DepartmentForm departmentForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.auth.hibernate.Department departmentPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
departmentPersistence = (com.cbrc.auth.hibernate.Department)session.load(com.cbrc.auth.hibernate.Department.class, departmentPersistence.getDepartmentId());
tx.commit();
session.close();
retVals.add(departmentPersistence.getProductUser());
      ArrayList PRODUCT_USER_ID_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.auth.form.ProductUserForm PRODUCT_USER_ID_Temp = new com.cbrc.auth.form.ProductUserForm();
         com.cbrc.auth.hibernate.ProductUser PRODUCT_USER_ID_PO = (com.cbrc.auth.hibernate.ProductUser)it.next();
         TranslatorUtil.copyPersistenceToVo(PRODUCT_USER_ID_PO, PRODUCT_USER_ID_Temp);
         PRODUCT_USER_ID_vos.add(PRODUCT_USER_ID_Temp);
      }
      retVals = PRODUCT_USER_ID_vos;
      return retVals;
    }
}
