
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.MUserGrpForm;
import com.cbrc.auth.form.MUserToGrpForm;
import com.cbrc.auth.hibernate.MUserGrp;
import com.cbrc.auth.hibernate.MUserToGrp;
import com.cbrc.auth.hibernate.Operator;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MUserToGrp data (i.e. 
 * com.cbrc.auth.form.MUserToGrpForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMUserToGrpDelegate {
    private static FitechException log = new FitechException(StrutsMUserToGrpDelegate.class);
  
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：MUserToGrp
    * 取得有多少用户是属于这个用户组的
    * @author 姚捷
    * @param userGrpId Long 用户组id
    * @return 属于该用户组的用户数量
    */
   public static int getUserNumFromUserGrpId(Long userGrpId)
   {
       int result = 0;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           String hql = "select count(*) from MUserToGrp ug where ug.MUserGrp.userGrpId="+userGrpId;
           Query query = session.createQuery(hql);

           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = ((Integer)list.get(0)).intValue();
           }
       }
       catch(Exception e)
       {
           result = 0;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-21 
    * 影响对象：MUserToGrp
    * 取出该用户已经设置的用户组
    * @param userId Long 用户id
    * @return List 该用户已经设置的用户组信息
    */
   public static List getUserSetUserGrp(Long userId)
   {
       List result = null;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           String hql = "from MUserToGrp ug where ug.operator.userId="+userId;
           Query query = session.createQuery(hql);

           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = new ArrayList();
               for (Iterator it = list.iterator(); it.hasNext(); ) {
                   MUserToGrpForm mUserToGrpFormTemp = new MUserToGrpForm();
                   MUserToGrp mUserToGrpPersistence = (MUserToGrp)it.next();
                   TranslatorUtil.copyPersistenceToVo(mUserToGrpPersistence, mUserToGrpFormTemp);
                   result.add(mUserToGrpFormTemp);
                }
           }
       }
       catch(Exception e)
       {
           result = null;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;     
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：MUserToGrp
    * 该用户以前是否设置过用户组
    * @param userId Long 用户id 
    * @return 设置过返回true 否则返回false
    */
   public static boolean isUserGrpSetting(Long userId)
   {
       boolean result = true;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           String hql = "from MUserToGrp ug where ug.operator.userId="+userId;
           Query query = session.createQuery(hql);

           List list = query.list();
           if(list!=null && list.size()!=0)
               result = true;
           else
              result =false;
       }
       catch(Exception e)
       {
           result = true;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;     
       
   }
   /**
    * 已使用Hibernate 卞以刚 2011-12-28
    * 影响对象：MUserToGrp
    * 删除该用户以前设置过的用户组记录
    * @param userId Long 用户id
    * @return 
    */
   public static boolean deleteUserSetUserGrp(Long userId)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.beginTransaction();
           String hql = "from MUserToGrp ug where ug.operator.userId="+userId;
           
           session.delete(hql);
         
           result = true;
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }
       return result;     
       
   }
   
   /**
    * 删除该用户以前设置过的用户组记录
    * @param userId Long 用户id
    * @return 
    */
   public static boolean deleteUserGrp(Long userGrpId)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.beginTransaction();
           String hql = "from MUserToGrp ug where ug.MUserGrp.userGrpId="+userGrpId;
           
           session.delete(hql);
         
           result = true;
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }
       return result;     
       
   }
   
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Operator MUserGrp MUserToGrp
    * 插入新的用户设置的用户组
    * @param form
    * @return
    */
   public static boolean insert(MUserToGrpForm userToGrpform)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           if(userToGrpform!=null)
           {
               /**用户id*/
               Long userId = userToGrpform.getUserId();
               /**用户组id字串（用","号隔开）*/
               String selectedUserGrpIds = userToGrpform.getSelectedUserGrpIds();
                                           
               if(userId!=null && selectedUserGrpIds!=null && !selectedUserGrpIds.equals(""))
               {
                   conn = new DBConn();
                   /**取出每个菜单id*/
                   String[] userGrpIds = selectedUserGrpIds.split(",");
                   
                   // System.out.println("userGrpIds===="+userGrpIds[0]);
                   
                   if(userGrpIds!=null && userGrpIds.length>0)
                   {
                       session = conn.beginTransaction();
                       /**构造实体类并插入数据库*/
                       for(int i=0;i<userGrpIds.length;i++)
                       {
                           MUserToGrp userToGrp = new MUserToGrp();
                           
                           Operator operator = new Operator();
                           operator.setUserId(userId);
                           userToGrp.setOperator(operator);
                           
                           MUserGrp userGrp = new MUserGrp();
                           userGrp.setUserGrpId(Long.valueOf(userGrpIds[i]));
                           userToGrp.setMUserGrp(userGrp);
                           
                           session.save(userToGrp);
                           session.flush();           
                       } 
                       result  = true; 
                   }
               }
               
           }
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }     
       return result;     
       
   }
   /**
    * 显示用户组下有多少个用户
    * @param mUserGrpFormTemp
    * @return
    */
   public static String selectUserInfo(MUserGrpForm mUserGrpFormTemp){
   	if(mUserGrpFormTemp==null)return null;
   	String result = "";
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           
           Query query = session.createQuery("from MUserToGrp ug where ug.MUserGrp.userGrpId="+mUserGrpFormTemp.getUserGrpId());
           
           List list = query.list();
           
           if(list!=null && list.size()!=0)
           {
               for(Iterator it = list.iterator(); it.hasNext();)
               {
               	MUserToGrp mUserGrpPersistence = (MUserToGrp)it.next();
                   String userInfo=(mUserGrpPersistence.getOperator().getUserName()==null ? "" : mUserGrpPersistence.getOperator().getUserName());
                   userInfo+=(mUserGrpPersistence.getOperator().getFirstName()==null ? "" : " : "+mUserGrpPersistence.getOperator().getFirstName());
                   userInfo+=(mUserGrpPersistence.getOperator().getLastName()==null ? "" : mUserGrpPersistence.getOperator().getLastName())+"\n";
                   result+=userInfo;       
               }       
           }
       }
       catch(Exception e)
       {
           result = null;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }
}
