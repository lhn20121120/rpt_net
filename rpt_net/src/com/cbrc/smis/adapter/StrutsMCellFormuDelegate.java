package com.cbrc.smis.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;

import com.cbrc.smis.common.Config;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.form.MCellFormuForm;
import com.cbrc.smis.form.MCellToFormuForm;
import com.cbrc.smis.hibernate.MCellFormu;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence
 * layer of hibernate. It has a set of methods to handle persistence for
 * MCellFormu data (i.e. com.cbrc.smis.form.MCellFormuForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMCellFormuDelegate
{
    private static FitechException log = new FitechException(StrutsMCellFormuDelegate.class);

    /**
     * 根据表达式、子报表ID和版本号,判断当前关系表达式是否已经存在
     * 
     * @author rds
     * @serialData 2005-12-20 0:34
     * 
     * @param cellFormu String 关系表达式
     * @param childRepId String 子报表ID
     * @param versionId String 版本号
     * @return boolean 表达式已存在，返回true;否则，返回false
     */
    public static boolean isCellFormuExists(String cellFormu, String childRepId, String versionId)
    {
        boolean result = false;

        if (cellFormu == null || childRepId == null || versionId == null)
            return result;

        DBConn conn = null;

        try
        {
            String hql = "from MCellFormu mcf where mcf.cellFormu='" + cellFormu
                    + "' and mcf.cellFormuId in (select mctf.cellFormuId from MCellToFormu mctf "
                    + " where mctf.childRepId='" + childRepId + "' and mctf.versionId='" + versionId + "')";

            conn = new DBConn();
            List list = conn.openSession().find(hql);
            if (list != null && list.size() > 0)
            {
                result = true;
            }
        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
        }
        finally
        {
            if (conn != null)
                conn.closeSession();
        }

        return result;
    }

    /**
     * 已使用hibernate 卞以刚 2011-12-22 删除表内表间的关系表达式<br>
     * 根据表达式的ID串值，将其批量删除
     * 
     * @param cellFormuIds 表达式的ID串值
     * @return boolean 删除操作成功，返回true;否则，返回false
     */
    public static boolean delete(String cellFormuIds)
    {
        boolean result = false;

        if (cellFormuIds == null)
            return result;
        if (cellFormuIds.equals(""))
            return result;

        if (cellFormuIds.substring(cellFormuIds.length() - 1).equals(Config.SPLIT_SYMBOL_COMMA))
        {
            cellFormuIds = cellFormuIds.substring(cellFormuIds.length() - 1);
        }
        if (cellFormuIds.equals(""))
            return result;

        String arr[] = cellFormuIds.split(Config.SPLIT_SYMBOL_COMMA);

        DBConn conn = null;
        Session session = null;

        try
        {
            conn = new DBConn();
            session = conn.beginTransaction();

            String sql = "from MCellToFormu mctf where mctf.cellFormuId in (" + cellFormuIds + ")";
            // System.out.println(sql);
            int delResCellToFormu = session.delete(sql);
            sql = "from MCellFormu mcf where mcf.cellFormuId in (" + cellFormuIds + ")";
            int delResCellFormu = session.delete(sql);

            session.flush();
            /*
             * // System.out.println("delResCellFormu:" + delResCellFormu); //
             * System.out.println("delResCellToFormu:" + delResCellToFormu);
             */
            if (delResCellFormu == delResCellToFormu)
                result = true;
        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
        }
        finally
        {
            if (conn != null)
                conn.endTransaction(result);
        }

        return result;
    }

    /**
     * 已使用hibernate 卞以刚 2011-12-22 获取报表的所有表内表间关系表达式信息列表
     *
     * @param childRepId String 子报表ID
     * @param versionId String 版本号
     * @List 如无关系表达式，返回null
     */
    public static List findAllSpe(String childRepId, String versionId, boolean isJG)
    {
        List resList = null;

        if (childRepId == null || versionId == null)
            return resList;

        DBConn conn = null;

        try
        {
            String hql = "";

            if (isJG)
            {
                hql = "from MCellFormu mcf where mcf.cellFormuId in ("
                        + "select mctf.cellFormuId from MCellToFormu mctf where mctf.childRepId='" + childRepId
                        + "' and mctf.versionId='" + versionId
                        + "' and mctf.cellFormuId in (select mcfs.cellFormuId from MCellToFormuStandard mcfs))"
                        + " order by mcf.formuType,mcf.cellFormu";
            }
            else
            {
                hql = "from MCellFormu mcf where mcf.cellFormuId in ("
                        + "select mctf.cellFormuId from MCellToFormu mctf where mctf.childRepId='" + childRepId
                        + "' and mctf.versionId='" + versionId
                        + "' and mctf.cellFormuId not in (select mcfs.cellFormuId from MCellToFormuStandard mcfs))"
                        + " order by mcf.formuType,mcf.cellFormu";
            }

            conn = new DBConn();
            List list = conn.openSession().find(hql);
            if (list != null && list.size() > 0)
            {
                resList = new ArrayList();
                MCellFormu mCellFormu = null;
                for (int i = 0; i < list.size(); i++)
                {
                    mCellFormu = (MCellFormu) list.get(i);
                    MCellFormuForm mCellFormuForm = new MCellFormuForm();
                    TranslatorUtil.copyPersistenceToVo(mCellFormu, mCellFormuForm);
                    resList.add(mCellFormuForm);
                }
            }

        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
            resList = null;
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
            resList = null;
        }
        finally
        {
            if (conn != null)
                conn.closeSession();
        }

        return resList;
    }

    /**
     * 已使用hibernate 卞以刚 2011-12-22 获取报表的所有表内表间关系表达式信息列表
     *
     * @param childRepId String 子报表ID
     * @param versionId String 版本号
     * @List 如无关系表达式，返回null
     */
    public static List findAll(String childRepId, String versionId)
    {
        List resList = null;

        if (childRepId == null || versionId == null)
            return resList;

        DBConn conn = null;

        try
        {
            String hql = "from MCellFormu mcf where mcf.cellFormuId in ("
                    + "select mctf.cellFormuId from MCellToFormu mctf where mctf.childRepId='" + childRepId
                    + "' and mctf.versionId='" + versionId + "')" + " order by mcf.formuType,mcf.cellFormu";

            conn = new DBConn();
            List list = conn.openSession().find(hql);
            if (list != null && list.size() > 0)
            {
                resList = new ArrayList();
                MCellFormu mCellFormu = null;
                for (int i = 0; i < list.size(); i++)
                {
                    mCellFormu = (MCellFormu) list.get(i);
                    MCellFormuForm mCellFormuForm = new MCellFormuForm();
                    TranslatorUtil.copyPersistenceToVo(mCellFormu, mCellFormuForm);
                    resList.add(mCellFormuForm);
                }
            }

        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
            resList = null;
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
            resList = null;
        }
        finally
        {
            if (conn != null)
                conn.closeSession();
        }

        return resList;
    }

    /**
     * 批量写入表内表间关系表达式
     * 
     * @param cells List
     * @return boolean 导入成功，返回true;否则，返回false
     */
    public static boolean savePatch(List cells)
    {
        boolean result = true;

        if (cells == null && cells.size() <= 0)
            return false;

        DBConn conn = null;
        Session session = null;

        try
        {
            conn = new DBConn();
            session = conn.beginTransaction();

            MCellFormuForm form = null;

            for (int i = 0; i < cells.size(); i++)
            {
                form = (MCellFormuForm) cells.get(i);

                /*
                 * // System.out.println("" + form.getChildRepId()); //
                 * System.out.println("" + form.getVersionId());
                 */
                if (insert(session, form) == false)
                { // 将关系表达式写入数据库
                    result = false;
                    break;
                }

                /** 将管道符后的批量单元格表达式入库 **/
                if (form.getSameCells() != null && form.getSameCells().size() > 0)
                {
                    // //
                    // System.out.println("[StrutsMCellFormu]SameCells is not null!");
                    for (int j = 0; i < form.getSameCells().size(); i++)
                    {
                        // // System.out.println("SameCell:" +
                        // (String)form.getSameCells().get(j));
                        if (form.getSameCells().get(j) != null)
                        {
                            form.setCellFormu((String) form.getSameCells().get(j));
                            if (insert(session, form) == false)
                            {
                                result = false;
                                break;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
            result = false;
        }
        finally
        {
            if (conn != null)
            {
                conn.endTransaction(result);
            }
        }

        return result;
    }

    /**
     * 新增操作
     * 
     * @param session Session 会话连接
     * @return boolean 新增成功，返回true;否则，返回false
     */
    private static boolean insert(Session session, MCellFormuForm form)
    {
        boolean result = true;

        if (session == null || form == null)
            return result;

        try
        {
            MCellFormu mCellForum = new MCellFormu();
            TranslatorUtil.copyVoToPersistence(mCellForum, form);

            session.save(mCellForum);
            session.flush();

            MCellToFormuForm mCellToFormuForm = new MCellToFormuForm();
            mCellToFormuForm.setCellFormuId(mCellForum.getCellFormuId());
            mCellToFormuForm.setChildRepId(form.getChildRepId());
            mCellToFormuForm.setVersionId(form.getVersionId());

            if (StrutsMCellToFormuDelegate.insert(session, mCellToFormuForm) == false)
            {
                result = false;
            }
            else
            {
                if (form.getRelationTables() != null && form.getRelationTables().size() > 0)
                {
                    for (int i = 0; i < form.getRelationTables().size(); i++)
                    {
                        mCellToFormuForm = new MCellToFormuForm();
                        mCellToFormuForm.setCellFormuId(mCellForum.getCellFormuId());
                        if (form.getRelationTables().get(i) != null)
                        {
                            String tmp = (String) form.getRelationTables().get(i);
                            String arr[] = tmp.split(Config.SPLIT_SYMBOL_COMMA);
                            mCellToFormuForm.setChildRepId(arr[0]);
                            mCellToFormuForm.setVersionId(arr[1]);
                            if (StrutsMCellToFormuDelegate.insert(session, mCellToFormuForm) == false)
                            {
                                result = false;
                                break;
                            }
                        }
                    }
                }
            }
        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
            result = false;
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
            result = false;
        }

        return result;
    }

    /**
     * Create a new com.cbrc.smis.form.MCellFormuForm object and persist (i.e.
     * insert) it.
     *
     * @param mCellFormuForm The object containing the data for the new
     *            com.cbrc.smis.form.MCellFormuForm object
     * @exception Exception If the new com.cbrc.smis.form.MCellFormuForm object
     *                cannot be created or persisted.
     */
    public static com.cbrc.smis.form.MCellFormuForm create(com.cbrc.smis.form.MCellFormuForm mCellFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = new com.cbrc.smis.hibernate.MCellFormu();
        TranslatorUtil.copyVoToPersistence(mCellFormuPersistence, mCellFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        // TODO error?: mCellFormuPersistence =
        // (com.cbrc.smis.hibernate.MCellFormu)session.save(mCellFormuPersistence);
        session.save(mCellFormuPersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellFormuPersistence, mCellFormuForm);
        return mCellFormuForm;
    }

    /**
     * Update (i.e. persist) an existing com.cbrc.smis.form.MCellFormuForm
     * object.
     *
     * @param mCellFormuForm The com.cbrc.smis.form.MCellFormuForm object
     *            containing the data to be updated
     * @exception Exception If the com.cbrc.smis.form.MCellFormuForm object
     *                cannot be updated/persisted.
     */
    public static com.cbrc.smis.form.MCellFormuForm update(com.cbrc.smis.form.MCellFormuForm mCellFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = new com.cbrc.smis.hibernate.MCellFormu();
        TranslatorUtil.copyVoToPersistence(mCellFormuPersistence, mCellFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        session.update(mCellFormuPersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellFormuPersistence, mCellFormuForm);
        return mCellFormuForm;
    }

    /**
     * Retrieve an existing com.cbrc.smis.form.MCellFormuForm object for
     * editing.
     *
     * @param mCellFormuForm The com.cbrc.smis.form.MCellFormuForm object
     *            containing the data used to retrieve the object (i.e. the
     *            primary key info).
     * @exception Exception If the com.cbrc.smis.form.MCellFormuForm object
     *                cannot be retrieved.
     */
    public static com.cbrc.smis.form.MCellFormuForm edit(com.cbrc.smis.form.MCellFormuForm mCellFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = new com.cbrc.smis.hibernate.MCellFormu();
        TranslatorUtil.copyVoToPersistence(mCellFormuPersistence, mCellFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        mCellFormuPersistence = (com.cbrc.smis.hibernate.MCellFormu) session.load(
                com.cbrc.smis.hibernate.MCellFormu.class, mCellFormuPersistence.getCellFormuId());
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellFormuPersistence, mCellFormuForm);
        return mCellFormuForm;
    }

    /**
     * Remove (delete) an existing com.cbrc.smis.form.MCellFormuForm object.
     *
     * @param mCellFormuForm The com.cbrc.smis.form.MCellFormuForm object
     *            containing the data to be deleted.
     * @exception Exception If the com.cbrc.smis.form.MCellFormuForm object
     *                cannot be removed.
     */
    public static void remove(com.cbrc.smis.form.MCellFormuForm mCellFormuForm) throws Exception
    {
        com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = new com.cbrc.smis.hibernate.MCellFormu();
        TranslatorUtil.copyVoToPersistence(mCellFormuPersistence, mCellFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        // TODO: is this really needed?
        mCellFormuPersistence = (com.cbrc.smis.hibernate.MCellFormu) session.load(
                com.cbrc.smis.hibernate.MCellFormu.class, mCellFormuPersistence.getCellFormuId());
        session.delete(mCellFormuPersistence);
        tx.commit();
        session.close();
    }

    /**
     * Retrieve all existing com.cbrc.smis.form.MCellFormuForm objects.
     *
     * @exception Exception If the com.cbrc.smis.form.MCellFormuForm objects
     *                cannot be retrieved.
     */
    public static List findAll() throws Exception
    {
        List retVals = new ArrayList();
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        retVals.addAll(session.find("from com.cbrc.smis.hibernate.MCellFormu"));
        tx.commit();
        session.close();
        ArrayList mCellFormu_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();)
        {
            com.cbrc.smis.form.MCellFormuForm mCellFormuFormTemp = new com.cbrc.smis.form.MCellFormuForm();
            com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = (com.cbrc.smis.hibernate.MCellFormu) it.next();
            TranslatorUtil.copyPersistenceToVo(mCellFormuPersistence, mCellFormuFormTemp);
            mCellFormu_vos.add(mCellFormuFormTemp);
        }
        retVals = mCellFormu_vos;
        return retVals;
    }

    /**
     * Retrieve a set of existing com.cbrc.smis.form.MCellFormuForm objects for
     * editing.
     *
     * @param mCellFormuForm The com.cbrc.smis.form.MCellFormuForm object
     *            containing the data used to retrieve the objects (i.e. the
     *            criteria for the retrieval).
     * @exception Exception If the com.cbrc.smis.form.MCellFormuForm objects
     *                cannot be retrieved.
     */
    public static List select(com.cbrc.smis.form.MCellFormuForm mCellFormuForm) throws Exception
    {
        List retVals = new ArrayList();
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        retVals.addAll(session.find("from com.cbrc.smis.hibernate.MCellFormu as obj1 where obj1.cellFormu='"
                + mCellFormuForm.getCellFormu() + "'"));
        retVals.addAll(session.find("from com.cbrc.smis.hibernate.MCellFormu as obj1 where obj1.formuType='"
                + mCellFormuForm.getFormuType() + "'"));
        tx.commit();
        session.close();
        ArrayList mCellFormu_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();)
        {
            com.cbrc.smis.form.MCellFormuForm mCellFormuFormTemp = new com.cbrc.smis.form.MCellFormuForm();
            com.cbrc.smis.hibernate.MCellFormu mCellFormuPersistence = (com.cbrc.smis.hibernate.MCellFormu) it.next();
            TranslatorUtil.copyPersistenceToVo(mCellFormuPersistence, mCellFormuFormTemp);
            mCellFormu_vos.add(mCellFormuFormTemp);
        }
        retVals = mCellFormu_vos;
        return retVals;
    }

}
