package com.cbrc.smis.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.form.MCellToFormuForm;
import com.cbrc.smis.hibernate.MCellToFormu;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence
 * layer of hibernate. It has a set of methods to handle persistence for
 * MCellToFormu data (i.e. com.cbrc.smis.form.MCellToFormuForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMCellToFormuDelegate
{
    private static FitechException log = new FitechException(StrutsMCellToFormuDelegate.class);

    /**
     * 新增单元格公式对照记录
     * 
     * @author rds
     * @serialData 2005-12-09
     * 
     * @param session Session
     * @param form MCellToFormuForm
     * @return boolean 新增记录成功，返回true;否则，返回false
     */
    public static boolean insert(Session session, MCellToFormuForm form)
    {
        boolean result = false;

        if (session == null || form == null)
            return result;

        try
        {
            MCellToFormu persistence = new MCellToFormu();

            TranslatorUtil.copyVoToPersistence(persistence, form);

            session.save(persistence);

            result = true;
        }
        catch (HibernateException he)
        {
            log.printStackTrace(he);
        }
        catch (Exception e)
        {
            log.printStackTrace(e);
        }

        return result;
    }

    /**
     * Create a new com.cbrc.smis.form.MCellToFormuForm object and persist (i.e.
     * insert) it.
     *
     * @param mCellToFormuForm The object containing the data for the new
     *            com.cbrc.smis.form.MCellToFormuForm object
     * @exception Exception If the new com.cbrc.smis.form.MCellToFormuForm
     *                object cannot be created or persisted.
     */
    public static com.cbrc.smis.form.MCellToFormuForm create(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = new com.cbrc.smis.hibernate.MCellToFormu();
        TranslatorUtil.copyVoToPersistence(mCellToFormuPersistence, mCellToFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        // TODO error?: mCellToFormuPersistence =
        // (com.cbrc.smis.hibernate.MCellToFormu)session.save(mCellToFormuPersistence);
        session.save(mCellToFormuPersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuForm);
        return mCellToFormuForm;
    }

    /**
     * Update (i.e. persist) an existing com.cbrc.smis.form.MCellToFormuForm
     * object.
     *
     * @param mCellToFormuForm The com.cbrc.smis.form.MCellToFormuForm object
     *            containing the data to be updated
     * @exception Exception If the com.cbrc.smis.form.MCellToFormuForm object
     *                cannot be updated/persisted.
     */
    public static com.cbrc.smis.form.MCellToFormuForm update(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = new com.cbrc.smis.hibernate.MCellToFormu();
        TranslatorUtil.copyVoToPersistence(mCellToFormuPersistence, mCellToFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        session.update(mCellToFormuPersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuForm);
        return mCellToFormuForm;
    }

    /**
     * Retrieve an existing com.cbrc.smis.form.MCellToFormuForm object for
     * editing.
     *
     * @param mCellToFormuForm The com.cbrc.smis.form.MCellToFormuForm object
     *            containing the data used to retrieve the object (i.e. the
     *            primary key info).
     * @exception Exception If the com.cbrc.smis.form.MCellToFormuForm object
     *                cannot be retrieved.
     */
    public static com.cbrc.smis.form.MCellToFormuForm edit(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm)
            throws Exception
    {
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = new com.cbrc.smis.hibernate.MCellToFormu();
        TranslatorUtil.copyVoToPersistence(mCellToFormuPersistence, mCellToFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuForm);
        return mCellToFormuForm;
    }

    /**
     * Remove (delete) an existing com.cbrc.smis.form.MCellToFormuForm object.
     *
     * @param mCellToFormuForm The com.cbrc.smis.form.MCellToFormuForm object
     *            containing the data to be deleted.
     * @exception Exception If the com.cbrc.smis.form.MCellToFormuForm object
     *                cannot be removed.
     */
    public static void remove(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm) throws Exception
    {
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = new com.cbrc.smis.hibernate.MCellToFormu();
        TranslatorUtil.copyVoToPersistence(mCellToFormuPersistence, mCellToFormuForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        // TODO: is this really needed?
        session.delete(mCellToFormuPersistence);
        tx.commit();
        session.close();
    }

    /**
     * Retrieve all existing com.cbrc.smis.form.MCellToFormuForm objects.
     *
     * @exception Exception If the com.cbrc.smis.form.MCellToFormuForm objects
     *                cannot be retrieved.
     */
    public static List findAll() throws Exception
    {
        List retVals = new ArrayList();
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        retVals.addAll(session.find("from com.cbrc.smis.hibernate.MCellToFormu"));
        tx.commit();
        session.close();
        ArrayList mCellToFormu_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();)
        {
            com.cbrc.smis.form.MCellToFormuForm mCellToFormuFormTemp = new com.cbrc.smis.form.MCellToFormuForm();
            com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = (com.cbrc.smis.hibernate.MCellToFormu) it
                    .next();
            TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuFormTemp);
            mCellToFormu_vos.add(mCellToFormuFormTemp);
        }
        retVals = mCellToFormu_vos;
        return retVals;
    }

    /**
     * 查询表内表间关系
     * 
     * @author 姚捷
     * 
     * @return List 查询记录
     * @param childRepId String 子报表id
     * @param versionId String 版本号
     * @param offset int 偏移量
     * @param limit int 最大取记录数
     * @return List 查询结果
     * @exception Exception If the com.cbrc.smis.form.MCellToFormuForm objects
     *                cannot be retrieved.
     */
    public static List select(String childRepId, String versionId, int offset, int limit, boolean isJG)
            throws Exception
    {
        List result = null;
        DBConn conn = null;
        Session session = null;
        if (childRepId != null && !childRepId.equals("") && versionId != null && !versionId.equals(""))
        {
            String hql = "";
            if (isJG)
            {
                hql = "from MCellToFormu mcf where mcf.childRepId='"
                        + childRepId
                        + "' and mcf.versionId='"
                        + versionId
                        + "'  and mcf.cellFormuId in (select mcfs.cellFormuId from MCellToFormuStandard mcfs) order by mcf.cellFormuId";
            }
            else
            {
                hql = "from MCellToFormu mcf where mcf.childRepId='"
                        + childRepId
                        + "' and mcf.versionId='"
                        + versionId
                        + "' and mcf.cellFormuId not in (select mcfs.cellFormuId from MCellToFormuStandard mcfs) order by mcf.cellFormuId";
            }
            // String hql = "from MCellToFormu mcf where mcf.childRepId='" +
            // childRepId + "' and mcf.versionId='"
            // + versionId + "'";
            try
            {
                conn = new DBConn();
                session = conn.openSession();

                Query query = session.createQuery(hql);
                query.setFirstResult(offset);
                query.setMaxResults(limit);
                List list = query.list();

                if (list != null && list.size() != 0)
                {
                    result = new ArrayList();
                    for (Iterator it = list.iterator(); it.hasNext();)
                    {
                        MCellToFormuForm mCellToFormuFormTemp = new MCellToFormuForm();
                        MCellToFormu mCellToFormuPersistence = (MCellToFormu) it.next();
                        TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuFormTemp);
                        result.add(mCellToFormuFormTemp);
                    }
                }
            }
            catch (Exception e)
            {
                result = null;
                log.printStackTrace(e);
            }
            finally
            {
                if (conn != null)
                    conn.closeSession();
            }
        }
        return result;
    }

    public static List findAll(String childRepId, String versionId)
    {
        List result = null;
        DBConn conn = null;
        Session session = null;
        if (childRepId != null && !childRepId.equals("") && versionId != null && !versionId.equals(""))
        {
            String hql = "from MCellToFormu mcf where mcf.childRepId='" + childRepId + "' and mcf.versionId='"
                    + versionId + "'";
            try
            {
                conn = new DBConn();
                session = conn.openSession();

                Query query = session.createQuery(hql);
                List list = query.list();

                if (list != null && list.size() != 0)
                {
                    result = new ArrayList();
                    for (Iterator it = list.iterator(); it.hasNext();)
                    {
                        MCellToFormuForm mCellToFormuFormTemp = new MCellToFormuForm();
                        MCellToFormu mCellToFormuPersistence = (MCellToFormu) it.next();
                        TranslatorUtil.copyPersistenceToVo(mCellToFormuPersistence, mCellToFormuFormTemp);
                        result.add(mCellToFormuFormTemp);
                    }
                }
            }
            catch (Exception e)
            {
                result = null;
                log.printStackTrace(e);
            }
            finally
            {
                if (conn != null)
                    conn.closeSession();
            }
        }
        return result;
    }

    /**
     * 根据查询条件取的符合该条件的表内表间关系的记录数
     * 
     * @param childRepId String 子报表id
     * @param versionId String 版本号id
     * @return 记录数
     * @throws Exception
     */
    public static int getRecordCount(String childRepId, String versionId, boolean isJG) throws Exception
    {

        int result = 0;
        DBConn conn = null;
        Session session = null;
        if (childRepId != null && !childRepId.equals("") && versionId != null && !versionId.equals(""))
        {
            String hql = "";
            if (isJG)
            {
                hql = "select count(*) from MCellToFormu mcf where mcf.childRepId='" + childRepId
                        + "' and mcf.versionId='" + versionId
                        + "' and mcf.cellFormuId in (select mcfs.cellFormuId from MCellToFormuStandard mcfs)";
            }
            else
            {
                hql = "select count(*) from MCellToFormu mcf where mcf.childRepId='" + childRepId
                        + "' and mcf.versionId='" + versionId
                        + "' and mcf.cellFormuId not in (select mcfs.cellFormuId from MCellToFormuStandard mcfs)";
            }

            try
            {
                conn = new DBConn();
                session = conn.openSession();

                List list = session.createQuery(hql).list();

                if (list != null && list.size() != 0)
                {
                    result = ((Integer) list.get(0)).intValue();
                }
            }
            catch (Exception e)
            {
                result = 0;
                log.printStackTrace(e);
            }
            finally
            {
                if (conn != null)
                    conn.closeSession();
            }
        }
        return result;

    }

    /**
     * This method will return all objects referenced by MCell
     */
    public static List getMCell(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm) throws Exception
    {
        List retVals = new ArrayList();
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = null;
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        tx.commit();
        session.close();
        /* retVals.add(mCellToFormuPersistence.getMCell()); */
        ArrayList CELL_ID_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();)
        {
            com.cbrc.smis.form.MCellForm CELL_ID_Temp = new com.cbrc.smis.form.MCellForm();
            com.cbrc.smis.hibernate.MCell CELL_ID_PO = (com.cbrc.smis.hibernate.MCell) it.next();
            TranslatorUtil.copyPersistenceToVo(CELL_ID_PO, CELL_ID_Temp);
            CELL_ID_vos.add(CELL_ID_Temp);
        }
        retVals = CELL_ID_vos;
        return retVals;
    }

    /**
     * This method will return all objects referenced by MCellFormu
     */
    public static List getMCellFormu(com.cbrc.smis.form.MCellToFormuForm mCellToFormuForm) throws Exception
    {
        List retVals = new ArrayList();
        com.cbrc.smis.hibernate.MCellToFormu mCellToFormuPersistence = null;
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        tx.commit();
        session.close();
        /* retVals.add(mCellToFormuPersistence.getMCellFormu()); */
        ArrayList CELL_FORMU_ID_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();)
        {
            com.cbrc.smis.form.MCellFormuForm CELL_FORMU_ID_Temp = new com.cbrc.smis.form.MCellFormuForm();
            com.cbrc.smis.hibernate.MCellFormu CELL_FORMU_ID_PO = (com.cbrc.smis.hibernate.MCellFormu) it.next();
            TranslatorUtil.copyPersistenceToVo(CELL_FORMU_ID_PO, CELL_FORMU_ID_Temp);
            CELL_FORMU_ID_vos.add(CELL_FORMU_ID_Temp);
        }
        retVals = CELL_FORMU_ID_vos;
        return retVals;
    }
}
