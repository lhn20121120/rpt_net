package com.cbrc.smis.adapter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import org.apache.commons.beanutils.BeanUtils;

import com.cbrc.smis.common.Config;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.entity.MChildReportQueryTerm;
import com.cbrc.smis.form.MChildReportForm;
import com.cbrc.smis.hibernate.MChildReport;
import com.cbrc.smis.hibernate.MChildReportPK;
import com.cbrc.smis.security.Operator;
import com.cbrc.smis.util.FitechEXCELReport;
import com.cbrc.smis.util.FitechException;
import com.cbrc.smis.util.FitechUtil;
import com.fitech.gznx.form.AFTemplateForm;
import com.fitech.gznx.po.AfTemplate;
import com.fitech.net.form.ETLReportForm;
import com.fitech.net.hibernate.OrgDeptMapping;
import com.fitech.net.hibernate.ReprotExcelMapping;
import com.informix.msg.isam;

/**
 * This is a delegate class to handle interaction with the backend persistence
 * layer of hibernate. It has a set of methods to handle persistence for
 * MChildReport data (i.e. com.cbrc.smis.form.MChildReportForm objects).
 * 
 * @author <strong>Generated by Middlegen. </strong>
 */
public class StrutsMChildReportDelegate {
	private static FitechException log = new FitechException(StrutsMChildReportDelegate.class);

	/**
	 * 报送范围标记设置
	 */
	public static int REP_RANGE_FLAG = 1;

	/**
	 * 报送频度标记设置
	 */
	public static int ACTU_REP_FLAG = 2;

	/**
	 * 模板发布标记
	 */
	public static int PUBLIC_FLAG = 3;
	
	/***
	 * 已使用hibernate 卞以刚 2011-12-22
	 * @param childrepid
	 * @param versionId
	 * @return
	 */
	public static String getname(String childrepid,String versionId)
	{   
		String repname=null;
		if(childrepid==null)return null;
		if(versionId==null)return null;
		DBConn conn=null;
		MChildReportForm mChildReportForm=null;
		try{
			String hql="from MChildReport mcr where mcr.comp_id.childRepId='"+childrepid+"' and mcr.comp_id.versionId='"+versionId+"'";	
			conn=new DBConn();
			List list=conn.openSession().find(hql);
			if(list!= null && list.size()>0)
			{
				MChildReport mChildReport = (MChildReport) list.get(0);
				mChildReportForm = new MChildReportForm();
				TranslatorUtil.copyPersistenceToVo(mChildReport,
						mChildReportForm);
				 repname=mChildReportForm.getReportName();
				 		// System.out.println("repname is "+repname);
			}
		}catch(Exception e)
		{
			log.printStackTrace(e);
			
		}finally{
			if(conn!=null)
				conn.closeSession();			
		}
		return repname;
	}
	
	/***
	 * 王学武 2013-11-5
	 * 删除指定的报表模板
	 * @param childrepid
	 * @param versionId
	 * @return
	 */
	public static boolean delTemplate(String childrepid,String versionId,String isDelTemplateGroup)
	{   
		boolean result = false;
		if(childrepid==null || versionId==null)
			return result;
		DBConn db = null;
		Connection conn = null;
		Statement st = null;
		try {
			db = new DBConn();
			conn = db.beginTransaction().connection(); 
			conn.setAutoCommit(false);
			st = conn.createStatement();
			//--删除指定模板数据
			String sql = "delete from m_main_rep where REP_ID in (select REP_ID from m_child_report  where CHILD_REP_ID='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from m_child_report  where CHILD_REP_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from m_actu_rep where CHILD_REP_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from m_rep_range where CHILD_REP_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from  AF_TEMPLATE where TEMPLATE_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from  AF_CELLINFO where TEMPLATE_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from AF_TEMPLATE_CURR_RELATION where TEMPLATE_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from m_cell  where CHILD_REP_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from qd_cellinfo where TEMPLATE_ID='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_org_relation WHERE template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_freq_relation where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_coll_rep where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_outer_rep where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from AF_TEMPLATE_SHAPE where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_coll_rule where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_template_vali_sche where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			if(isDelTemplateGroup!=null && "true".equals(isDelTemplateGroup)){
				//--删除模板对应的用户组权限
				sql = "delete from M_PUR_BANKLEVEL where CHILD_REP_ID='"+childrepid+"'";
				st.addBatch(sql);
				
				sql = "delete from M_PUR_ORG where CHILD_REP_ID='"+childrepid+"'";
				st.addBatch(sql);
			}
			
			//--删除指定业务数据
			sql = "delete FROM DATA_VALIDATE_INFO WHERE REP_IN_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from report_again_set where REP_IN_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_datavalidateinfo where rep_id in(select rep_id from af_report where template_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_data_trace WHERE REP_IN_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete FROM report_in_info  WHERE REP_IN_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_pbocreportdata where rep_id in(select rep_id from af_report where template_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_otherreportdata where rep_id in(select rep_id from af_report where template_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_force_rep WHERE REP_IN_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_report_force_rep WHERE REP_ID IN(SELECT REP_IN_ID from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from af_report_again where rep_id in(select rep_id from af_report where template_id='"+childrepid+"' and version_id='"+versionId+"')";
			st.addBatch(sql);
			
			sql = "delete from report_in  WHERE child_rep_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			sql = "delete from af_report where template_id='"+childrepid+"' and version_id='"+versionId+"'";
			st.addBatch(sql);
			
			int[] res = st.executeBatch();
			result=true;
			
			try {
				sql = "drop table AF_QD_"+childrepid;
				st.execute(sql);
			} catch (Exception e) {
				// TODO: handle exception
	//			e.printStackTrace();
				log.println("不存在AF_QD_"+childrepid+"表");
			}
			if(result)
				conn.commit();
		} catch (Exception e) {
			result = false;
			try {
				if(conn!=null){
					conn.rollback();
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			log.printStackTrace(e);
		} finally {
			try {
				if(st!=null)
					st.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				if(conn!=null)
					conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (db != null) db.closeSession();
		}
		return result;
	}
	
	public static List getrepname(String sql1){
		List reslist=new ArrayList();
		DBConn conn=null;
		MChildReportForm mChildReportForm = null;
		if(sql1==null)return null;
		try{
			String hql="from MChildReport mcr where mcr.comp_id.childRepId in(" + sql1+ ")";
			conn=new DBConn();
			List list=conn.openSession().find(hql);
			for(int i=0;i<list.size();i++)
			{
				MChildReport mChildReport = (MChildReport) list.get(i);
				mChildReportForm = new MChildReportForm();
				TranslatorUtil.copyPersistenceToVo(mChildReport,
						mChildReportForm);
				reslist.add(mChildReportForm);
			}
		}catch(Exception e)
		{
			reslist=null;
			log.printStackTrace(e);
			
		}finally{
			if(conn!=null)
				conn.closeSession();			
		}
		return reslist;
	}
	/**
	 * @author jhb
	 * @param rangeid
	 * @param time
	 * @return list
	 */
	public static MChildReportForm getversionId(String sql,java.sql.Date time){
		DBConn conn=null;
		Date time1=null;
	    int year=time.getYear();
	    int month=time.getMonth();
		MChildReportForm mChildReportForm = null;
		if(sql==null ||time==null)return null;
		try{			
		    if(month==0){
		    	year=year-1;		    	 
		    	month=11;
		        time1=new Date(year,month,1);
		    }
		    else{		    
		    	time1=new Date(year,month-1,1);			       
		    }
			String hql="from MChildReport mcr where mcr.comp_id.childRepId ='" + sql+ "' and mcr.startDate <='" + time1.toLocaleString() +"'"+ "and '"+ time1.toLocaleString() +"'<= mcr.endDate";
			conn=new DBConn();
			List list=conn.openSession().find(hql);
		if(list!= null && list.size()>0)
			{
			MChildReport mChildReport = (MChildReport) list.get(0);
			mChildReportForm = new MChildReportForm();
			TranslatorUtil.copyPersistenceToVo(mChildReport,
					mChildReportForm);				
			}			
		}catch(Exception e){			
			log.printStackTrace(e);
			
		}finally{
			if(conn!=null)
				conn.closeSession();			
		}	
		if(mChildReportForm!=null)		
			return mChildReportForm;
		else
			return null;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-21
	 * 影响对象：MChildReport
	 * 获取子报表详细信息
	 * 
	 * @author rds
	 * @serialData 2005-12-19
	 * 
	 * @param childRepId
	 *            String 子报表ID
	 * @param versionId
	 *            String 版本号
	 * @return MChildReportForm
	 */
	public  MChildReportForm getMChildReport(String childRepId,
			String versionId) {
		MChildReportForm mChildReportForm = null;

		if (childRepId == null || versionId == null)
			return null;

		DBConn conn = null;

		try {
			String hql = "from MChildReport mcr where mcr.comp_id.childRepId='"
					+ childRepId + "' and " + "mcr.comp_id.versionId='"
					+ versionId + "'";

			conn = new DBConn();
			List list = conn.openSession().find(hql);
			if (list != null && list.size() > 0) {
				MChildReport mChildReport = (MChildReport) list.get(0);
				mChildReportForm = new MChildReportForm();
				TranslatorUtil.copyPersistenceToVo(mChildReport,
						mChildReportForm);
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} catch (Exception e) {
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return mChildReportForm;
	}

	/**
	 * 新增子报表信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param session
	 *            Session 连接会话
	 * @param mChildReportForm
	 *            MChildReportForm
	 * @return MChildReport
	 */
	public static MChildReport insert(Session session,
			MChildReportForm mChildReportForm) {
		MChildReport mChildRep = null;

		try {
			mChildRep = new MChildReport();

			mChildReportForm.setIsPublic(Config.NOT_PUBLIC);
			TranslatorUtil.copyVoToPersistence(mChildRep, mChildReportForm);

			session.save(mChildRep);
			session.flush();
			TranslatorUtil.copyPersistenceToVo(mChildRep, mChildReportForm);
		} catch (HibernateException he) {
			log.printStackTrace(he);
			mChildRep = null;
		} catch (Exception e) {
			log.printStackTrace(e);
			mChildRep = null;
		}

		return mChildRep;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据报表编号和报表的版本号判断此报表是否存在
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param childRepId
	 *            String 报表编号
	 * @param versionId
	 *            String 报表版本号
	 * @return void 报表存在，返回true;否则，返回false
	 */
	public static boolean isChildReportExists(String childRepId,
			String versionId) {
		boolean isExists = false;

		if (childRepId == null || versionId == null)
			return isExists;

		DBConn conn = null;
		Session session = null;

		try {
			String hql = "select count(*) from MChildReport mcr where mcr.comp_id.childRepId='"
					+ childRepId
					+ "'"
					+ " and mcr.comp_id.versionId='"
					+ versionId + "'";

			conn = new DBConn();
			session = conn.openSession();

			List list = session.find(hql);
			if (list != null && list.size() > 0) {
				int count = list.get(0) == null ? 0 : ((Integer) list.get(0))
						.intValue();
				if (count > 0)
					isExists = true;
			}

		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return isExists;
	}
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据报表编号和报表的版本号判断此报表是否存在
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param childRepId
	 *            String 报表编号
	 * @param versionId
	 *            String 报表版本号
	 * @return void 报表存在，返回true;否则，返回false
	 */
	public static boolean isTemplateVersionExists(String childRepId,
			String versionId) {
		boolean isExists = false;

		if (childRepId == null || versionId == null)
			return isExists;

		DBConn conn = null;
		Session session = null;

		try {
			String hql = "select count(*) from AfTemplate af where af.id.templateId='"
					+ childRepId
					+ "'"
					+ " and af.id.versionId='"
					+ versionId + "'";

			conn = new DBConn();
			session = conn.openSession();

			List list = session.find(hql);
			if (list != null && list.size() > 0) {
				int count = list.get(0) == null ? 0 : ((Integer) list.get(0))
						.intValue();
				if (count > 0)
					isExists = true;
			}

		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return isExists;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据报表编号和报表的版本号判断此报表是否存在
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param childRepId
	 *            String 报表编号
	 * @param versionId
	 *            String 报表版本号
	 * @return void 报表存在，返回true;否则，返回false
	 */
	public static AfTemplate findMaxVersionReport(String childRepId,String versionId) {
		if (childRepId == null)
			return null;

		DBConn conn = null;
		Session session = null;

		try {
			String hql = "select a from AfTemplate a where a.id.templateId='"+childRepId+"' and a.id.versionId!='"+versionId+"'" +
					" order by a.id.versionId desc";

			conn = new DBConn();
			session = conn.openSession();

			List list = session.find(hql);
			if (list != null && list.size() > 0) {
				return (AfTemplate)list.get(0);
			}

		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return null;
	}
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据报表编号和报表的版本号判断此报表是否存在
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param childRepId
	 *            String 报表编号
	 * @param versionId
	 *            String 报表版本号
	 * @return void 报表存在，返回true;否则，返回false
	 */
	public static MChildReport findMaxMchildReport(String childRepId,String versionId) {
		if (childRepId == null)
			return null;

		DBConn conn = null;
		Session session = null;

		try {
			String hql = "select m from MChildReport m where m.comp_id.childRepId='"+childRepId+"' and m.comp_id.versionId!='"+versionId+"'" +
					" order by m.comp_id.versionId desc";

			conn = new DBConn();
			session = conn.openSession();

			List list = session.find(hql);
			if (list != null && list.size() > 0) {
				return (MChildReport)list.get(0);
			}

		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return null;
	}
	
	
	/**
	 * 模板发布操作
	 * 
	 * @param mChildReportForm MChildReportForm
	 * @return MChildReport 更新失败，返回null
	 */
	public static boolean update(MChildReportForm mChildReportForm)throws Exception {
		//MChildReport updateMChildRepId = null;
		boolean result = false;

		if (mChildReportForm == null) return result;

		if (mChildReportForm.getChildRepId() == null || mChildReportForm.getVersionId() == null)
			return result;

		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.beginTransaction();

			/*String hql = "from MChildReport mcr where mcr.endDate=(select max(cr.endDate) from "
					+ "MChildReport cr where cr.comp_id.childRepId='"
					+ mChildReportForm.getChildRepId()
					+ "' and cr.comp_id.versionId!='"
					+ mChildReportForm.getVersionId()
					+ "' and "
					+ " cr.endDate>=date('"
					+ mChildReportForm.getStartDate()
					+ "')"
					+ " and cr.comp_id.childRepId='"
					+ mChildReportForm.getChildRepId()
					+ "' and cr.comp_id.versionId!='"
					+ mChildReportForm.getVersionId()
					+ "'"
					+ " and mcr.isPublic=" + Config.IS_PUBLIC + ")";
			List list = session.find(hql);
			String prevDate = getPreviousDay(mChildReportForm.getStartDate());
			if (list != null && list.size() > 0) {
				MChildReport mChildReport = (MChildReport) list.get(0);
				// System.out.println("prevDate:" + prevDate);
				mChildReport.setEndDate(prevDate);
				session.save(mChildReport);
				session.flush();
				updateMChildRepId = mChildReport;
				// System.out.println("ChildRepId:"
						+ mChildReport.getComp_id().getChildRepId());
				// System.out.println("VersionId:"
						+ mChildReport.getComp_id().getVersionId());
			}*/

			MChildReportPK pk = new MChildReportPK();
			pk.setVersionId(mChildReportForm.getVersionId());
			pk.setChildRepId(mChildReportForm.getChildRepId());

			MChildReport mChildReportPersistence = (MChildReport) session.get(MChildReport.class, pk);
			
			if(mChildReportPersistence!=null){
				mChildReportPersistence.setStartDate(mChildReportForm.getStartDate());
				mChildReportPersistence.setEndDate(mChildReportForm.getEndDate());
				mChildReportPersistence.setIsPublic(Config.PUBLICED);
				session.update(mChildReportPersistence);
	
				//if (updateMChildRepId == null) updateMChildRepId = new MChildReport();
							
//				result = Procedure.updateEndDate(session,
//						mChildReportForm.getChildRepId(),
//						mChildReportForm.getVersionId(),
//						mChildReportForm.getStartDate());
				result=true;
			}
		} catch (HibernateException he) {
			result = false;
			log.printStackTrace(he);
		} catch (Exception e) {
			result = false;
			log.printStackTrace(e);
		} finally {
			if (conn != null) conn.endTransaction(result);
		}

		return result;
	}
	
	
	/**
	 * 模板发布操作
	 * 
	 * @param mChildReportForm MChildReportForm
	 * @return MChildReport 更新失败，返回null
	 */
	public static boolean update(Object obj)throws Exception {
		//MChildReport updateMChildRepId = null;
		boolean result = false;

		if (obj == null) return result;

		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.beginTransaction();
			session.update(obj);
			result=true;
		} catch (Exception e) {
			result = false;
			log.printStackTrace(e);
		} finally {
			if (conn != null) conn.endTransaction(result);
		}

		return result;
	}
	

	/**
	 * Update (i.e. persist) an existing com.cbrc.smis.form.MChildReportForm
	 * object.
	 * 
	 * @param mChildReportForm
	 *            The com.cbrc.smis.form.MChildReportForm object containing the
	 *            data to be updated
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm object cannot
	 *                be updated/persisted.
	 */
	public static com.cbrc.smis.form.MChildReportForm create(
			com.cbrc.smis.form.MChildReportForm mChildReportForm)
			throws Exception {
		com.cbrc.smis.hibernate.MChildReport mChildReportPersistence = new com.cbrc.smis.hibernate.MChildReport();
		TranslatorUtil.copyVoToPersistence(mChildReportPersistence,
				mChildReportForm);
		javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		// TODO: Make adapter get SessionFactory jndi name by ant task argument?
		net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
				.lookup("java:AirlineHibernateFactory");
		net.sf.hibernate.Session session = factory.openSession();
		net.sf.hibernate.Transaction tx = session.beginTransaction();
		session.update(mChildReportPersistence);
		tx.commit();
		session.close();
		TranslatorUtil.copyPersistenceToVo(mChildReportPersistence,
				mChildReportForm);
		return mChildReportForm;
	}

	/**
	 * Retrieve an existing com.cbrc.smis.form.MChildReportForm object for
	 * editing.
	 * 
	 * @param mChildReportForm
	 *            The com.cbrc.smis.form.MChildReportForm object containing the
	 *            data used to retrieve the object (i.e. the primary key info).
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm object cannot
	 *                be retrieved.
	 */
	public static com.cbrc.smis.form.MChildReportForm edit(
			com.cbrc.smis.form.MChildReportForm mChildReportForm)
			throws Exception {
		com.cbrc.smis.hibernate.MChildReport mChildReportPersistence = new com.cbrc.smis.hibernate.MChildReport();
		TranslatorUtil.copyVoToPersistence(mChildReportPersistence,
				mChildReportForm);
		javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		// TODO: Make adapter get SessionFactory jndi name by ant task argument?
		net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
				.lookup("java:AirlineHibernateFactory");
		net.sf.hibernate.Session session = factory.openSession();
		net.sf.hibernate.Transaction tx = session.beginTransaction();
		tx.commit();
		session.close();
		TranslatorUtil.copyPersistenceToVo(mChildReportPersistence,
				mChildReportForm);
		return mChildReportForm;
	}

	/**
	 * Remove (delete) an existing com.cbrc.smis.form.MChildReportForm object.
	 * 
	 * @param mChildReportForm
	 *            The com.cbrc.smis.form.MChildReportForm object containing the
	 *            data to be deleted.
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm object cannot
	 *                be removed.
	 */
	public static void remove(
			com.cbrc.smis.form.MChildReportForm mChildReportForm)
			throws Exception {
		com.cbrc.smis.hibernate.MChildReport mChildReportPersistence = new com.cbrc.smis.hibernate.MChildReport();
		TranslatorUtil.copyVoToPersistence(mChildReportPersistence,
				mChildReportForm);
		javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		// TODO: Make adapter get SessionFactory jndi name by ant task argument?
		net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
				.lookup("java:AirlineHibernateFactory");
		net.sf.hibernate.Session session = factory.openSession();
		net.sf.hibernate.Transaction tx = session.beginTransaction();
		// TODO: is this really needed?
		session.delete(mChildReportPersistence);
		tx.commit();
		session.close();
	}

	/**
	 * 查询所有子报表信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List findAll() throws Exception {
		List retVals = null;
		Map map = new HashMap();
		DBConn conn = null;
		Session session = null;
		
		try {
			//增加列表按报表编号排序
			String hql = "from MChildReport mcr order by mcr.comp_id.childRepId ";

			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					if(!map.containsKey(form.getChildRepId())){
						retVals.add(form);
						map.put(form.getChildRepId(),form);
					}					
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**
	 * 查询所有人行子报表信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List findAllPBOC() throws Exception {
		List retVals = null;
		Map map = new HashMap();
		DBConn conn = null;
		Session session = null;
		
		try {
			//增加列表按报表编号排序
			String hql = "select af.templateName,af.id.versionId,af.id.templateId from AfTemplate af where af.templateType='2' and af.usingFlag=1";
			
			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				AfTemplate afReport = new AfTemplate();
				retVals = new ArrayList();
				while (it.hasNext()) {
					Object[] strs = (Object[]) it.next();
					AFTemplateForm form = new AFTemplateForm();
//					TranslatorUtil.copyPersistenceToVo(afReport, form);
//					BeanUtils.copyProperties(form, afReport);
					form.setTemplateName(strs[0].toString());
					form.setVersionId(strs[1].toString());
					form.setTemplateId(strs[2].toString());
//					if(!map.containsKey(form.getTemplateId())){
						retVals.add(form);
//						map.put(form.getTemplateId(),form);
//					}					
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		
		return retVals;
	}
	/**
	 * 查询所有子报表信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List findAllReport() throws Exception {
		List retVals = null;
		Map map = new HashMap();
		DBConn conn = null;
		Session session = null;
		
		try {
			String hql = "from ReprotExcelMapping mcr ";

			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				ReprotExcelMapping reprotExcelMapping = new ReprotExcelMapping();
				retVals = new ArrayList();
				while (it.hasNext()) {
					reprotExcelMapping = (ReprotExcelMapping) it.next();
					MChildReportForm form = new MChildReportForm();
					form.setChildRepId(reprotExcelMapping.getKey().getReportId());
					form.setVersionId(reprotExcelMapping.getKey().getVersionId());
					form.setReportName(reprotExcelMapping.getReportName());
					retVals.add(form);
 				
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**
	 * 查询ETL机构对应部门信息
	 * 
	 * @author wh
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static ETLReportForm selectMappOrgId(String orgId) throws Exception {
		ETLReportForm odmf = null;
		DBConn conn = null;
		Session session = null;
		
		try {
			String hql = "from OrgDeptMapping mcr where mcr.key.orgId='"+orgId.trim()+"'";

			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			OrgDeptMapping orgDeptMapping = new OrgDeptMapping();
			if (list != null && list.size() > 0) {
				orgDeptMapping = (OrgDeptMapping) list.get(0);
				odmf = new ETLReportForm();
				odmf.setDeptId(orgDeptMapping.getKey().getDeptId());
				odmf.setOrgId(orgDeptMapping.getKey().getOrgId());
				odmf.setOrgName(orgDeptMapping.getOrgName());

			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return odmf;
	}
	
	/**
	 * 查询ETL机构对应报表信息
	 * 
	 * @author wh
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static ETLReportForm selectMappExcelId(String reportId,String version ,ETLReportForm form) throws Exception {

		DBConn conn = null;
		Session session = null;
		
		try {
			String hql = "from ReprotExcelMapping rem where rem.key.reportId='"+reportId.trim()+"'  and rem.key.versionId='"+version.trim()+"'";

			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			ReprotExcelMapping reprotExcelMapping = new ReprotExcelMapping();
			if (list != null && list.size() > 0) {
				reprotExcelMapping = (ReprotExcelMapping) list.get(0);
				com.cbrc.smis.adapter.TranslatorUtil.copyPersistenceToVo(reprotExcelMapping,form);
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return form;
	}
	/**
	 * 获得当前已发布的正在使用的报表模板列表
	 * 
	 * @author rds
	 * @date 2005-12-28
	 * 
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 */
	public static List select(Operator operator, int offset, int limit) {
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where mcr.isPublic="
							+ Config.PUBLICED
							+ " and (case when mcr.endDate is null then date('1900-01-01') when mcr.endDate='' then date('1900-01-01') else date(end_date) end)>=date('"
							+ FitechUtil.getToday(FitechUtil.NORMALDATE)
							+ "')"
							+ " and mcr.comp_id.childRepId in (select mpv.comp_id.childRepId from MPurView mpv where "
							+ " mpv.comp_id.userGrpId in ("
							+ operator.getUserGrpIds() + "))"
							+ " order by mcr.comp_id.childRepId");

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			retVals = null;
			log.printStackTrace(he);
		} catch (Exception e) {
			retVals = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	/**
	 * 获得当前已发布的正在使用的报表模板列表
	 * 
	 * @author rds
	 * @date 2005-12-28
	 * 
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 */
	public static List select(Operator operator, int offset, int limit,MChildReportForm mChildReportForm) {
		List retVals = null;
		DBConn conn = null;

		try {
			String reportName = null;
			String version = null;
			if(mChildReportForm != null){
				reportName = mChildReportForm.getReportName();
				version = mChildReportForm.getVersionId();
			}
			String term = "";
			if(reportName != null && !reportName.trim().equals(""))
				term += " and mcr.reportName like '%" + reportName.trim() + "%'";
			if(version != null && !version.trim().equals(""))
				term += " and mcr.comp_id.versionId = '" + version.trim() + "'";
			
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where mcr.isPublic="
							+ Config.PUBLICED + term
							+ " and (case when mcr.endDate is null then date('1900-01-01') when mcr.endDate='' then date('1900-01-01') else date(end_date) end)>=date('"
							+ FitechUtil.getToday(FitechUtil.NORMALDATE)
							+ "')"
							+ " and mcr.comp_id.childRepId in (select mpv.comp_id.childRepId from MPurView mpv where "
							+ " mpv.comp_id.userGrpId in ("
							+ operator.getUserGrpIds() + "))"
							+ " order by mcr.comp_id.childRepId");

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			retVals = null;
			log.printStackTrace(he);
		} catch (Exception e) {
			retVals = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据条件查询报表
	 * 
	 * @author 姚捷
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List select(MChildReportForm mChildReportForm, int offset,
			int limit) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where 1=1 and mcr.isPublic="
							+ Config.NOT_PUBLIC);
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				
				String reportName = mChildReportForm.getReportName(); 
				String version = mChildReportForm.getVersionId();
				
				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%"+reportName+"%'"); 
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='"+version+"'");
			}
			where.append(" order by mcr.comp_id.childRepId");
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**
	 * 根据条件查询报表
	 * 
	 * @author 姚捷
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List selectReport(MChildReportForm mChildReportForm, int offset,
			int limit) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where  mcr.isPublic="
							+ Config.IS_PUBLIC);
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				
				String reportName = mChildReportForm.getReportName(); 

				String version = mChildReportForm.getVersionId();
				
				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%"+reportName+"%'"); 
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='"+version+"'");
			}
			where.append(" order by mcr.comp_id.childRepId");
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**
	 * 获得已发布正在使用的报表模板的记录
	 * 
	 * @author rds
	 * @date 2005-12-28
	 * 
	 * @param operator
	 *            Operetor
	 * @return int 记录总数
	 */
	public static int getRecordCount(Operator operator) {
		int recordCount = 0;

		if (operator == null)
			return recordCount;

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where"
							+ " mcr.isPublic="
							+ Config.PUBLICED
							+ " and (case when mcr.endDate is null then date('1900-01-01') when mcr.endDate='' then date('1900-01-01') else date(end_date) end)>=date('"
							+ FitechUtil.getToday(FitechUtil.NORMALDATE)
							+ "')"
							+ " and mcr.comp_id.childRepId in (select mpv.comp_id.childRepId from MPurView mpv where "
							+ " mpv.comp_id.userGrpId in ("
							+ operator.getUserGrpIds() + "))");

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null && retVals.size() > 0) {
				recordCount = ((Integer) retVals.get(0)).intValue();
			}
		} catch (HibernateException he) {
			recordCount = 0;
			log.printStackTrace(he);
		} catch (Exception e) {
			recordCount = 0;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}
	
	/**
	 * 获得已发布正在使用的报表模板的记录
	 * 
	 * @author rds
	 * @date 2005-12-28
	 * 
	 * @param operator
	 *            Operetor
	 * @return int 记录总数
	 */
	public static int getRecordCount(Operator operator,MChildReportForm mChildReportForm) {
		int recordCount = 0;

		if (operator == null)
			return recordCount;

		List retVals = null;
		DBConn conn = null;

		try {
			String reportName = null;
			String version = null;
			if(mChildReportForm != null){
				reportName = mChildReportForm.getReportName();
				version = mChildReportForm.getVersionId();
			}
			String term = "";
			if(reportName != null && !reportName.trim().equals(""))
				term += " and mcr.reportName like '%" + reportName.trim() + "%'";
			if(version != null && !version.trim().equals(""))
				term += " and mcr.comp_id.versionId = '" + version.trim() + "'";
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where"
							+ " mcr.isPublic="
							+ Config.PUBLICED + term
							+ " and (case when mcr.endDate is null then date('1900-01-01') when mcr.endDate='' then date('1900-01-01') else date(end_date) end)>=date('"
							+ FitechUtil.getToday(FitechUtil.NORMALDATE)
							+ "')"
							+ " and mcr.comp_id.childRepId in (select mpv.comp_id.childRepId from MPurView mpv where "
							+ " mpv.comp_id.userGrpId in ("
							+ operator.getUserGrpIds() + "))");

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null && retVals.size() > 0) {
				recordCount = ((Integer) retVals.get(0)).intValue();
			}
		} catch (HibernateException he) {
			recordCount = 0;
			log.printStackTrace(he);
		} catch (Exception e) {
			recordCount = 0;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据查询条件,取出该附和该条件的记录条数
	 * 
	 * @author 姚捷
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static int getRecordCount(MChildReportForm mChildReportForm)
			throws Exception {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where 1=1 and mcr.isPublic="
							+ Config.NOT_PUBLIC);
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();
				String version = mChildReportForm.getVersionId();

				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%" + reportName + "%'");
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='" + version + "'");
			}
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}
	/**
	 * 根据查询条件,取出该符合该条件的记录条数 目前只到法人报表
	 * 
	 * @author wh 
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static int getReportRecordCount(MChildReportForm mChildReportForm)
			throws Exception {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where 1=1 and  mcr.isPublic="
							+ Config.IS_PUBLIC);
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();
				String version =mChildReportForm.getVersionId();

				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%" + reportName + "%'");
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='" + version + "'");
			}
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}


	/**
	 * This method will return all objects referenced by MCurUnit
	 */
	public static List getMCurUnit(
			com.cbrc.smis.form.MChildReportForm mChildReportForm)
			throws Exception {
		List retVals = new ArrayList();
		com.cbrc.smis.hibernate.MChildReport mChildReportPersistence = null;
		javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		// TODO: Make adapter get SessionFactory jndi name by ant task argument?
		net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
				.lookup("java:AirlineHibernateFactory");
		net.sf.hibernate.Session session = factory.openSession();
		net.sf.hibernate.Transaction tx = session.beginTransaction();
		tx.commit();
		session.close();
		retVals.add(mChildReportPersistence.getMCurUnit());
		ArrayList CUR_UNIT_vos = new ArrayList();
		for (Iterator it = retVals.iterator(); it.hasNext();) {
			com.cbrc.smis.form.MCurUnitForm CUR_UNIT_Temp = new com.cbrc.smis.form.MCurUnitForm();
			com.cbrc.smis.hibernate.MCurUnit CUR_UNIT_PO = (com.cbrc.smis.hibernate.MCurUnit) it
					.next();
			TranslatorUtil.copyPersistenceToVo(CUR_UNIT_PO, CUR_UNIT_Temp);
			CUR_UNIT_vos.add(CUR_UNIT_Temp);
		}
		retVals = CUR_UNIT_vos;
		return retVals;
	}

	/**
	 * This method will return all objects referenced by MMainRep
	 */
	public static List getMMainRep(
			com.cbrc.smis.form.MChildReportForm mChildReportForm)
			throws Exception {
		List retVals = new ArrayList();
		com.cbrc.smis.hibernate.MChildReport mChildReportPersistence = null;
		javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		// TODO: Make adapter get SessionFactory jndi name by ant task argument?
		net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
				.lookup("java:AirlineHibernateFactory");
		net.sf.hibernate.Session session = factory.openSession();
		net.sf.hibernate.Transaction tx = session.beginTransaction();
		tx.commit();
		session.close();
		retVals.add(mChildReportPersistence.getMMainRep());
		ArrayList REP_ID_vos = new ArrayList();
		for (Iterator it = retVals.iterator(); it.hasNext();) {
			com.cbrc.smis.form.MMainRepForm REP_ID_Temp = new com.cbrc.smis.form.MMainRepForm();
			com.cbrc.smis.hibernate.MMainRep REP_ID_PO = (com.cbrc.smis.hibernate.MMainRep) it
					.next();
			TranslatorUtil.copyPersistenceToVo(REP_ID_PO, REP_ID_Temp);
			REP_ID_vos.add(REP_ID_Temp);
		}
		retVals = REP_ID_vos;
		return retVals;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 更新子报表中的标志（报表报送范围设定标志，报送频度设定标志，发布标志）
	 * 
	 * @author 姚捷
	 * 
	 * @param childRepId
	 *            String 子报表id
	 * @param versionId
	 *            String 版本号
	 * @param flag
	 * @return boolean 成功返回true;否则，返回false
	 */
	public static boolean setFlag(String childRepId, String versionId,
			int flag, Integer value) {
		boolean result = false;

		if (childRepId == null && versionId == null)
			return result;

		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.beginTransaction();
			MChildReportPK pk = new MChildReportPK(childRepId, versionId);

			MChildReport mchildReport = (MChildReport) session.load(
					MChildReport.class, pk);
			switch (flag) {
			case 1: {
				mchildReport.setRepRangeFlag(value);
				break;
			}
			case 2: {
				mchildReport.setActuRepFlag(value);
				break;
			}
			case 3: {
				mchildReport.setIsPublic(value);
				break;
			}
			default:
				return false;
			}
			session.update(mchildReport);
			result = true;
		} catch (Exception he) {
			log.printStackTrace(he);
			result = false;
		} finally {
			if (conn != null)
				conn.endTransaction(result);
		}

		return result;

	}
	
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 更新子报表中的标志（报表报送范围设定标志，报送频度设定标志，发布标志）
	 * 
	 * @author 姚捷
	 * 
	 * @param childRepId
	 *            String 子报表id
	 * @param versionId
	 *            String 版本号
	 * @param flag
	 * @return boolean 成功返回true;否则，返回false
	 */
	public static boolean delTaskRelationTemplate(String childRepId,String freqId) {
		boolean result = false;

		if (childRepId == null || freqId==null || "".equals(freqId))
			return result;

		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.beginTransaction();
			String[] freqIds = freqId.split(",");
			if(freqIds!=null){
				for (int i = 0; i < freqIds.length; i++) {
					String sql = "delete from work_task_node_object where template_id='"+childRepId+"' and  node_id in ( " +
							" select w.node_id from work_task_node_object w inner join work_task_node_info wi on w.node_id=wi.node_id " +
							" inner join work_task_info wt on wi.task_id=wt.task_id where wt.freq_id='"+convertFreqId(Integer.parseInt(freqIds[i]))+"' and w.template_id='"+childRepId+"')";
					session.connection().createStatement().executeUpdate(sql);
					sql = "delete from work_task_node_object_moni where template_id='"+childRepId+"' and node_id in ( " +
							" select w.node_id from work_task_node_object_moni w inner join work_task_node_info wi on w.node_id=wi.node_id " +
							" inner join work_task_info wt on wi.task_id=wt.task_id where wt.freq_id='"+convertFreqId(Integer.parseInt(freqIds[i]))+"' and w.template_id='"+childRepId+"')";
					session.connection().createStatement().executeUpdate(sql);
					//删除不存在模板的监控节点
					sql = "delete from work_task_node_moni m where not exists (select 1 from work_task_node_object_moni o where m.task_moni_id=o.task_moni_id and  m.node_id=o.node_id and m.org_id=o.org_id and o.node_io_flag=1 )";
					session.connection().createStatement().executeUpdate(sql);
					//删除不存在监控节点的监控任务
					sql = "delete from work_task_moni mi where not exists (select 1 from work_task_node_object_moni o where o.task_moni_id=mi.task_moni_id)";
					session.connection().createStatement().executeUpdate(sql);
				}
			}
			result = true;
		} catch (Exception he) {
			log.printStackTrace(he);
			result = false;
		} finally {
			if (conn != null)
				conn.endTransaction(result);
		}

		return result;

	}

	public static String convertFreqId(Integer freqId){
		String taskFreqId = "";
		switch(freqId){
			case 1:
				taskFreqId = "month";
				break;
			case 2:
				taskFreqId = "season";
				break;
			case 3:
				taskFreqId = "halfyear";
				break;
			case 4:
				taskFreqId = "year";
				break;
			case 9:
				taskFreqId = "yearbegincarry";
				break;
		}
		return taskFreqId;
	}
	
	/**
	 * 该方法用子报表ID与版本号从数据库中得到也子报表对象
	 * 
	 * @author cb
	 * 
	 * @param childRepId
	 *            子报表ID
	 * @param versionId
	 *            版本号
	 * @return MChildReport
	 */
	public static MChildReport getMChileReport(String childRepId,
			String versionId) {

		Query query = null;

		DBConn dBConn = null;

		Session session = null;

		List l = null;

		String hsql = "from MChildReport mcr where mc.comp_id.childRepId=:childRepId and ";

		hsql = hsql + "mc.comp_id.versionId=:versionId";

		MChildReport mChildReport = null;

		try {

			dBConn = new DBConn();

			session = dBConn.openSession();

			MChildReportPK comp_id = new MChildReportPK();

			comp_id.setChildRepId(childRepId);

			comp_id.setVersionId(versionId);

			mChildReport = (MChildReport) session.get(MChildReport.class,
					comp_id);

		} catch (Exception e) {

			mChildReport = null;

			/* log.printStackTrace(e); */
		} finally {

			dBConn.closeSession();
		}

		return mChildReport;
	}

	/**
	 * 根据子报表id和版本号，判断该报表是什么类型的报表（点对点式 or 清单式）
	 * 
	 * @author 姚捷
	 * @param childReportId
	 *            String 自报表id
	 * @param versionId
	 *            String 版本号
	 * @return 1 Config.REPORT_STYLE_DD 点对点式 2 Config.REPORT_STYLE_QD 清单式
	 */
	public static int getReportStyle(String childReportId, String versionId) {
		int reportStyle = 0;

		List retVals = null;
		DBConn conn = null;

		if (childReportId != null && !childReportId.equals("")
				&& versionId != null && !versionId.equals("")) {
			try {
				StringBuffer hql = new StringBuffer(
						"from MChildReport mcr where 1=1");
				hql.append(" and mcr.comp_id.childRepId = '" + childReportId
						+ "'");
				hql.append(" and mcr.comp_id.versionId ='" + versionId + "'");

				conn = new DBConn();

				Session session = conn.openSession();
				Query query = session.createQuery(hql.toString());

				retVals = query.list();

				if (retVals != null && retVals.size() != 0) {
					reportStyle = ((MChildReport) retVals.get(0))
							.getReportStyle().intValue();
				}
			} catch (HibernateException he) {
				log.printStackTrace(he);
			} finally {
				if (conn != null)
					conn.closeSession();
			}
		}

		return reportStyle;
	}

	/**
	 * 已使用hibernate  卞以刚 2011-12-22
	 * 根据条件查询模板
	 * 
	 * @author 姚捷
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件(模板名称)
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List getTemplates(MChildReportForm mChildReportForm,
			int offset, int limit) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select  mcr.comp_id.childRepId,mcr.comp_id.versionId,"
							+ "mcr.reportName,mcr.MMainRep.MRepType.repTypeName,mcr.isPublic,mcr.MCurUnit.curUnitName, "
							+ "mcr.MMainRep.repCnName from MChildReport mcr,AfTemplate t where t.id.templateId=mcr.comp_id.childRepId and t.id.versionId=mcr.comp_id.versionId");
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();
				if (reportName != null && !reportName.equals(""))
					where.append(" and mcr.reportName like'%" + reportName.trim()
							+ "%'");
			}
			hql.append(where.toString() + " order by mcr.comp_id.childRepId");
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				retVals = new ArrayList();
				while (it.hasNext()) {
					Object[] item = (Object[]) it.next();
					MChildReportForm form = new MChildReportForm();
					String mainName = item[6] != null ? (String)item[6] : "";
					String subName = item[2] != null ? (String)item[2] : "";
					String reportName = (mainName.equals(subName) ? mainName : mainName + "-" + subName);
					form.setChildRepId(item[0] != null ? (String) item[0] : "");
					form.setVersionId(item[1] != null ? (String) item[1] : "");
					form.setReportName(reportName);
					form.setRepTypeName(item[3] != null ? (String) item[3] : "");
					form.setIsPublic(item[4] != null ? (Integer) item[4] : null);
					form.setCurUnitName(item[5] != null ? (String) item[5] : "");
					
					MChildReportForm tempForm =new StrutsMChildReportDelegate().getMChildReport(form.getChildRepId(),form.getVersionId());
					form.setTemplateType(tempForm.getTemplateType());
					
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}


	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据查询条件,取出该附和该条件的模板数量
	 * 
	 * @author 姚捷
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static int getTemplateCount(MChildReportForm mChildReportForm)
			throws Exception {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
				"select count(*) from MChildReport mcr,AfTemplate t where t.id.templateId=mcr.comp_id.childRepId and t.id.versionId=mcr.comp_id.versionId ");
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();

				if (reportName != null && !reportName.equals(""))
					where.append(" and mcr.reportName like'%" + reportName.trim()
							+ "%'");
			}
			hql.append(where.toString());
				// System.out.println(hql.toString());
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null && retVals.size() != 0) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 通过子报表id取得该报表各个版本的数量
	 * 
	 * @author 姚捷
	 * @param childReportId
	 *            Integer 子报表id
	 * @return 该子报表的版本数量
	 */
	public static int getReporstByChildRepIdCount(MChildReportForm mChildReportForm) {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;
		

		try {
			String hql = "";
			if (mChildReportForm == null || mChildReportForm.getChildRepId() == null || mChildReportForm.getVersionId()==null)
				return recordCount;
			hql = "select count(*) from MChildReport mcr where 1=1";
			hql += " and mcr.comp_id.childRepId ='" + mChildReportForm.getChildRepId().trim()+"' and mcr.comp_id.versionId='"+mChildReportForm.getVersionId().trim()+"'";	

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null && retVals.size() != 0) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return recordCount;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 通过子报表id取得该报表各个版本的信息
	 * 
	 * @author 姚捷
	 * @param childReportId
	 *            String 子报表id
	 * @param offset
	 *            int 偏移量
	 * @param limit
	 *            int 要取的记录数量
	 * @return 查询出的记录
	 */
	public static List getReporstByChildRepId(MChildReportForm mChildReportForm , int offset,
			int limit) {

		List result = null;
		DBConn conn = null;

		try {
			if (mChildReportForm == null || mChildReportForm.getChildRepId() == null || mChildReportForm.getVersionId()==null)
				return result;
			String hql = "from MChildReport mcr where 1=1 and mcr.comp_id.childRepId ='"
				 + mChildReportForm.getChildRepId().trim()+"' and mcr.comp_id.versionId='"+mChildReportForm.getVersionId().trim()+"'";	


			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				result = new ArrayList();
				while (it.hasNext()) {
					MChildReport mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					result.add(form);
				}
			}
		} catch (Exception he) {
			result = null;
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return result;

	}

	/**
	 * 通过子报表id取得该报表的名称（取一个）
	 * 
	 * @author 姚捷
	 * @param childReportId
	 *            String 子报表id
	 * @return 报表名
	 */
	public static String getRepNameByChildRepId(String childReportId) {

		String result = "";
		DBConn conn = null;

		try {
			if (childReportId == null)
				return result;
			String hql = "from MChildReport mcr where mcr.comp_id.childRepId ='"
					+ childReportId + "'";

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());

			List list = query.list();

			if (list != null && list.size() > 0) {
				result = ((MChildReport) list.get(0)).getReportName();
			}
		} catch (Exception he) {
			result = null;
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return result;
	}

	/**
	 * 取得所有报表（不分版本号）
	 * 
	 * @author 姚捷
	 * @return List 所有报表
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List getAllReports() throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select distinct mcr.comp_id.childRepId,mcr.reportName from MChildReport mcr order by mcr.comp_id.childRepId");
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				retVals = new ArrayList();
				while (it.hasNext()) {
					Object[] item = (Object[]) it.next();
					MChildReportForm form = new MChildReportForm();
					form.setChildRepId(item[0] != null ? (String) item[0] : "");					
					form.setReportName(item[1] != null ? (String) item[1] : "");
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
    
    /**
     * 查询所有的报表供com.fitech.net.action.ViewCollectTypeAction调用
     * 原方法 getAllreports()不能满足该方法需要的版本号字段
     * @author  gongming
     * @date    2007-09-12
     * @return
     * @throws Exception
     */
    public static List getAllReport() {
        List retVals = null;
        DBConn conn = null;
        try {
            String hql = "select t.comp_id.childRepId,t.comp_id.versionId,";
                    hql += " t.reportName from MChildReport t order by t.comp_id.childRepId";
            conn = new DBConn();
            Session session = conn.openSession();
            Query query = session.createQuery(hql);
            List list = query.list();
            if (list != null && list.size() > 0) {
                Iterator it = list.iterator();
                retVals = new ArrayList();
                while (it.hasNext()) {
                    Object[] report = (Object[])it.next();
                    MChildReportForm form = new MChildReportForm();
                    form.setChildRepId(report[0].toString());                    
                    form.setReportName(report[2].toString());
                    form.setVersionId(report[1].toString());
                    retVals.add(form);
                }
            }
        } catch(Exception e) {
            log.printStackTrace(e);
        } finally {
            if (conn != null)
                conn.closeSession();
        }
        return retVals;
    }

	
	public static List getReportByIds(String childRepIds) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			if(childRepIds == null || childRepIds.equals("")) return retVals;
			
			StringBuffer hql = new StringBuffer(
					"select distinct mcr.comp_id.childRepId,mcr.reportName from MChildReport mcr where mcr.comp_id.childRepId in (" + childRepIds + ") order by mcr.comp_id.childRepId");
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				retVals = new ArrayList();
				while (it.hasNext()) {
					Object[] item = (Object[]) it.next();
					MChildReportForm form = new MChildReportForm();
					form.setChildRepId(item[0] != null ? (String) item[0] : "");					
					form.setReportName(item[1] != null ? (String) item[1] : "");
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	/**
	 * 获得当前日期的前天时间
	 * 
	 * @param date
	 *            String
	 * @return String 错误返回null
	 */
	public static String getPreviousDay(String date) {
		if (date == null)
			return null;

		String prevDate = "";

		try {
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			Date _date = format.parse(date);
			long time = _date.getTime() - 24 * 60 * 60 * 1000;
			_date = new Date(time);
			prevDate = format.format(_date);
		} catch (Exception e) {
			prevDate = null;
		}

		return prevDate;
	}

	/**
	 * 获得当前日期的前天时间
	 * 
	 * @param date
	 *            String
	 * @return String 错误返回null
	 */
	public static Date getPreviousDate(String date) {
		if (date == null)
			return null;

		Date prevDate = null;

		try {
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			Date _date = format.parse(date);
			long time = _date.getTime() - 24 * 60 * 60 * 1000;
			prevDate = _date;
		} catch (Exception e) {
			prevDate = null;
		}

		return prevDate;
	}

	/**
	 * @author chenbing
	 * 
	 * 该方法用于根据输入的查询条件来分页查询模板记录
	 * 
	 * @param mrqt
	 *            type:MChildReportQueryTerm 封装了查询条件的实体
	 * @param begin
	 *            type:int 分页操作显示的起点
	 * @param limit
	 *            type:int 分页操作时显示一页的长度
	 * @return type:List 返回查询到的模板列表
	 */
	public static List queryMChildReports(MChildReportQueryTerm mrqt,int begin, int limit) throws Exception {
		List results = null; // 初始化结果集

		DBConn dBConn = null;

		Session session = null;

		Query query = null;

		String hsql = " from MChildReport mr ";

		int length = hsql.length();

		try {

			dBConn = new DBConn();

			session = dBConn.openSession();

			if ((mrqt.getReportName() != null)
					&& (!mrqt.getReportName().equals(""))) // 如果查询条件中的报表名称不是空字符串则加上报表名称

				// hsql = hsql + " where mr.reportName='" + mrqt.getReportName()
                //----------------------------------------------------------------
                // gongming 2008-07-25
                hsql = hsql + " where mr.reportName like'%" + mrqt.getReportName()
						+ "%'";

			if ((mrqt.getReportVersion() != null)
					&& (!mrqt.getReportVersion().equals(""))) { // 如果查询条件中的版本号不是空字符串则加上报表名称

				if (hsql.length() > length) // 判断前面是否已有查询条件,如果有则要加and
					// 如果没有则不要加and

					//hsql = hsql + " and mr.comp_id.versionId='"
				    //----------------------------------------------------------------
                    // gongming 2008-07-25
                    hsql = hsql + " and mr.comp_id.versionId like'%"
							+ mrqt.getReportVersion() + "%'";

				else
				    //hsql = hsql + "where mr.comp_id.versionId='"
				    //----------------------------------------------------------------
                    // gongming 2008-07-25
                    hsql = hsql + "where mr.comp_id.versionId like'%"
							+ mrqt.getReportVersion() + "%'";

			}

			if ((mrqt.getOrderType() != null)
					&& (!mrqt.getOrderType().equals(""))) {

				hsql = hsql + " order by mr.";

				if (mrqt.getOrderType().equals("versionId")) // 判断是不是按版本号来排序，如果是就要加".comp_id",否则就不加

					hsql = hsql + "comp_id.";

				hsql = hsql + mrqt.getOrderType();

			}

			query = session.createQuery(hsql);

			query.setFirstResult(begin);

			query.setMaxResults(limit);

			results = query.list();

			if (results.size() == 0)

				results = null;

		} catch (Exception e) {
			results = null; // 出现异常就将其执为空
			e.printStackTrace();
		}finally {
			if (session != null) dBConn.closeSession();
		}

		return results;
	}

	/**
	 * @author chenbing 根据输入的查询条件来得到模板数量
	 * 
	 * @param mrqt
	 *            type:MChildReportQueryTerm 封装了查询条件的实体
	 * 
	 * @return type:int 查询的数量
	 * @throws Exception
	 */
	public static int getMChildReportCount(MChildReportQueryTerm mrqt)
			throws Exception {

		DBConn dBConn = null;

		Session session = null;

		int result = 0;

		Query query = null;

		String hsql = "select count(*) from MChildReport mr ";

		int length = hsql.length();

		try {

			dBConn = new DBConn();

			session = dBConn.openSession();

			if (!mrqt.getReportName().equals("")) // 如果查询条件中的报表名称不是空字符串则加上报表名称

//				hsql = hsql + " where mr.reportName='" + mrqt.getReportName()
                // ----------------------------------------------------------
                // gongming 2008-07-25
                hsql = hsql + " where mr.reportName like'%" + mrqt.getReportName()
						+ "%'";

			if (!mrqt.getReportVersion().equals("")) { // 如果查询条件中的版本号不是空字符串则加上报表名称

				if (hsql.length() > length) // 判断前面是否已有查询条件,如果有则要加and,如果没有则不要加and

					//hsql = hsql + " and  mr.comp_id.versionId='"
				    //----------------------------------------------------------
                    // gongming 2008-07-25
                    hsql = hsql + " and  mr.comp_id.versionId like'%"
							+ mrqt.getReportVersion() + "%'";

				else
					//hsql = hsql + "where mr.comp_id.versionId='"
                     //----------------------------------------------------------
                    // gongming 2008-07-25
                    hsql = hsql + "where mr.comp_id.versionId like'%"
							+ mrqt.getReportVersion() + "%'";

			}

			query = session.createQuery(hsql);

			List l = query.list();

			result = ((Integer) l.get(0)).intValue();

		} catch (Exception e) {

			result = 0; // 出现异常就将其执为0

			e.printStackTrace();
		}

		finally {

			if (session != null)

				dBConn.closeSession();
		}

		return result;
	}
	
	/**
	 * 根据子报表ID和版本号获得报表的名称
	 * 
	 * @author rds 
	 * @date 2006-03-23
	 * 
	 * @param session Session 数据库的会话连接
	 * @param childRepId String 子报表ID
	 * @param versionId String 版本号
	 * @return String 报表的名称
	 */
	public static String getReportName(Session session,String childRepId,String versionId){
		String reportName="";
		
		if(session==null || childRepId==null || versionId==null) return reportName;
		
		try{
			MChildReportPK pk=new MChildReportPK(childRepId,versionId);
			MChildReport mChildReport=(MChildReport)session.load(MChildReport.class,pk);
			if(mChildReport!=null){
				String repCnName=mChildReport.getMMainRep().getRepCnName();
				reportName=mChildReport.getReportName();
				reportName=(repCnName.equals(reportName)?"":repCnName + "-") + 
					mChildReport.getReportName();
			}
		}catch(Exception e){
			reportName="";
			log.printStackTrace(e);
		}
		
		return reportName;
	}
	
	public static List select2(MChildReportForm mChildReportForm, int offset,int limit) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where 1=1 and mcr.isPublic="
							+ Config.PUBLICED);
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				
				String reportName = mChildReportForm.getReportName(); 
				String version = mChildReportForm.getVersionId();
				
				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%"+reportName+"%'"); 
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='"+version+"'");
			}
			where.append(" order by mcr.comp_id.childRepId");
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	public static int getRecordCount2(MChildReportForm mChildReportForm)throws Exception {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;
		
		try {
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where 1=1 and mcr.isPublic="
							+ Config.PUBLICED);
			StringBuffer where = new StringBuffer("");
		
			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();
				String version = mChildReportForm.getVersionId();
		
				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%" + reportName + "%'");
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='" + version + "'");
			}
			hql.append(where.toString());
		
			conn = new DBConn();
		
			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		
		return recordCount;
	
	}
	
	
	
	/**
	 * 根据登陆的机构的机构id,查询出该机构可以下载的模版的数量
	 * 
	 * @author masclnj
	 */
	public static int getTemplatesDownCount(MChildReportForm mChildReportForm,String orgId)
	{
		int count=0;
		
		DBConn conn=null;
		Session session=null;			
		
		try {			
			conn=new DBConn();
			session=conn.openSession();
			
			StringBuffer hql=new StringBuffer("select count(*) from MRepRange mrr where mrr.comp_id.orgId='"+orgId+"'");
			if(mChildReportForm!=null)
			{
			if((mChildReportForm.getReportStyle()==null || mChildReportForm.getReportStyle().toString().equals("0")) 
					 && (mChildReportForm.getCurUnit()==null || mChildReportForm.getCurUnit().toString().equals("0")))
				{				
					String[] strs=FitechUtil.getNowTime().toLocaleString().split(" ");
					
					hql.append(" and '"+strs[0]+"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate");
				}				
				else
				{
					String cur=mChildReportForm.getCurUnit().toString();
					hql.append(" and '"+mChildReportForm.getReportStyle()+"-"+(cur.length()==2?cur:"0"+cur)+"-02"+"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate");				
					
				}					
			}
			
			
			List list=session.find(hql.toString());
			if(list!=null && list.size()>0)
			{
				count=Integer.parseInt(String.valueOf(list.get(0)));				
			}
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			if(conn!=null)
			{
				conn.closeSession();
			}
		}
		return count;		
	}



	/**
	 * 根据登陆的机构的机构id,查询出该机构可以下载的模版
	 * 
	 * @author masclnj
	 */
	public static List getTemplatesDown(MChildReportForm mChildReportForm,String orgId,int offset, int limit) throws Exception
	{
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(					
				 "select distinct mrr.MChildReport from MRepRange mrr where"
				+" mrr.comp_id.orgId='"+orgId+"'"
				 );
			
			if(mChildReportForm!=null)
			{
				
				if((mChildReportForm.getReportStyle()==null || mChildReportForm.getReportStyle().toString().equals("0")) 
					 && (mChildReportForm.getCurUnit()==null || mChildReportForm.getCurUnit().toString().equals("0")))
				{
					String[] strs=FitechUtil.getNowTime().toLocaleString().split(" ");
					
					hql.append(" and '"+strs[0]+"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate");
				}				
				else
				{
					String cur=mChildReportForm.getCurUnit().toString();
					hql.append(" and '"+mChildReportForm.getReportStyle()+"-"+(cur.length()==2?cur:"0"+cur)+"-02"+"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate");				
					
				}					
			}		
			
			
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				retVals = new ArrayList();
				while (it.hasNext()) {
					
					mChildReportForm = new MChildReportForm();
					MChildReport report=(MChildReport)it.next();
					mChildReportForm.setReportName(getMainName(report.getReportName())+"  "+report.getReportName());
					
					mChildReportForm.setVersionId(report.getComp_id().getVersionId());
					mChildReportForm.setChildRepId(report.getComp_id().getChildRepId());
					
					retVals.add(mChildReportForm);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	
	
	
	/**
	 * 通过子表名获得主表名
	 */
	public static String getMainName(String childName)
	{
		String name="";
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(					
				 "from MChildReport mcr where"
				+" mcr.reportName='"+childName.trim()+"'"
				 );				
			
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());			
			List list = query.list();

			if (list != null && list.size() > 0) {
				MChildReport mcr=(MChildReport)list.get(0);
				
				if(mcr!=null)
				{
					name=mcr.getMMainRep().getRepCnName();					
					if(name.equals(childName))
					{
						name="";
					}					
				}
				
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return name;
	}
	
	


	/**
	 * 根据登陆的机构的机构id,查询出该机构可以下载的模版
	 * 
	 * @author masclnj
	 */
	public static List getTemplateDown(String orgId)
	{
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(					
				 "select  distinct mrr.MChildReport from MRepRange mrr where"
				+" mrr.comp_id.orgId='"+orgId+"'"
				 );			
			
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());			
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				retVals = new ArrayList();
				while (it.hasNext()) {				
					
					MChildReport report=(MChildReport)it.next();					
					
					retVals.add(report);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return retVals;
	}	
	
	
	/***
	 * 已使用hibernate 卞以刚 2011-12-21
	 * @param mainReportName
	 * @param subReportName
	 * @param versionId
	 * @return
	 */
	public  MChildReport getMChildReportByReportName(String mainReportName,String subReportName,String versionId){
		
		MChildReport mChildReport = null;
		DBConn conn = null;
		
		try {
			String hql = "from MChildReport mcr where mcr.comp_id.versionId='" + versionId + "' and mcr.reportName = '" + subReportName.trim() + "' and mcr.MMainRep.repCnName = '" + mainReportName.trim() +"'";
				
			conn = new DBConn();
		
			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			List list  = query.list();
			if(list != null && list.size() >0){
				mChildReport = (MChildReport)list.get(0);
			}
			
			if(mChildReport==null){
				
				hql = "from MChildReport mcr where mcr.comp_id.versionId='" + versionId 
						+ "' and mcr.reportName = '" + mainReportName.trim() 
						+ "-" + subReportName.trim() + "'";
				
				query = session.createQuery(hql.toString());
				list  = query.list();
				if(list != null && list.size() >0){
					mChildReport = (MChildReport)list.get(0);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return mChildReport;
	}
	/**  
	 * 已使用hibernate 卞以刚 2011-12-21
	 * 根据报表名称和版本号,找到mchildreport对象  */
public static MChildReport getFZMChildReportByReportName(String reportName,String versionId){
		
		MChildReport mChildReport = null;
		DBConn conn = null;
		 
		try {
			String hql = "from MChildReport mcr where mcr.comp_id.versionId='" + versionId + "' and mcr.reportName = '" + reportName.trim()+"'";
				
			conn = new DBConn();
		
			Session session = conn.openSession(); 
			Query query = session.createQuery(hql.toString());
			List list  = query.list();
			if(list != null && list.size() >0){
				mChildReport = (MChildReport)list.get(0);
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return mChildReport;
	}
/**
 * 已使用hibernate 卞以刚 2011-12-21
 * 查看M_child_report 的reportName 是否和Excel的title+subTitle 匹配
 * @param title
 * @param subtitle
 * @return  返回匹配数量
 */
public  int IsMatchingReportName(String title,String subTitle,String versionId){
	
	int resultCount = -1;
	DBConn conn = null;
	 String hql = "";
	try {
		if(subTitle.equals("")){
			 hql = "select count(*) from MChildReport mcr where mcr.comp_id.versionId='" + versionId + 
			"' and mcr.reportName = '" + title.trim()+"'";;
		}else{
			 hql = "select count(*) from MChildReport mcr where mcr.comp_id.versionId='" + versionId + 
			"' and mcr.reportName = '" + title.trim() + "-" + subTitle.trim()+"'";
		}

		conn=new DBConn ();
        List list=conn.openSession().find(hql.toString());
        if(list!=null && list.size()> 0)
        	resultCount=((Integer)list.get(0)).intValue();
	} catch (HibernateException he) {
		log.printStackTrace(he);
	} finally {
		if (conn != null)
			conn.closeSession();
	}
	return resultCount;
}
/**
 * 查看M_main_rep 的reportName 是否和Excel的title 匹配
 * @param title
 * @param subtitle
 * @return  返回匹配数量
 */
//public static int IsMatchingMainRepReportName(String title,String versionId){
//	
//	int resultCount = -1;
//	DBConn conn = null;
//	 String hql = "";
//	try {
//		if(subTitle.equals("")){
//			 hql = "select count(*) from MChildReport mcr where mcr.comp_id.versionId='" + versionId + 
//			"' and mcr.reportName = '" + title.trim()+"'";;
//		}else{
//			 hql = "select count(*) from MChildReport mcr where mcr.comp_id.versionId='" + versionId + 
//			"' and mcr.reportName = '" + title.trim() + "-" + subTitle.trim()+"'";
//		}
//		conn = new DBConn();
//	
//		Session session = conn.openSession(); 
//		Query query = session.createQuery(hql.toString());
//		
//		conn=new DBConn ();
//        List list=conn.openSession().find(hql.toString());
//        if(list!=null && list.size()> 0)
//        	resultCount=((Integer)list.get(0)).intValue();
//	} catch (HibernateException he) {
//		log.printStackTrace(he);
//	} finally {
//		if (conn != null)
//			conn.closeSession();
//	}
//	return resultCount;
//}
	/**
	 * 根据查询条件,取出数据关系维护的模板记录条数
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static int getMChildReportCount(MChildReportForm mChildReportForm)
			throws Exception {
		int recordCount = 0;
		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"select count(*) from MChildReport mcr where 1=1 and mcr.templateType is null");
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				String reportName = mChildReportForm.getReportName();
				String version = mChildReportForm.getVersionId();

				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%" + reportName + "%'");
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='" + version + "'");
			}
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			retVals = query.list();
			if (retVals != null) {
				recordCount = Integer.parseInt(retVals.get(0).toString());
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return recordCount;

	}
	/**
	 * 根据查询条件,取出数据关系维护的模板
	 * 
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List selectMChildReport(MChildReportForm mChildReportForm, int offset,
			int limit) throws Exception {

		List retVals = null;
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer(
					"from MChildReport mcr where 1=1 and mcr.templateType is null");
			StringBuffer where = new StringBuffer("");

			if (mChildReportForm != null) {
				
				String reportName = mChildReportForm.getReportName(); 
				String version = mChildReportForm.getVersionId();
				
				if(reportName!=null && !reportName.equals("")) where.append(" and mcr.reportName like '%"+reportName+"%'"); 
				if(version!=null && !version.equals("")) where.append(" and mcr.comp_id.versionId='"+version+"'");
			}
			where.append(" order by mcr.comp_id.childRepId");
			hql.append(where.toString());

			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);
			List list = query.list();

			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					retVals.add(form);
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	/**
	 * 通过子表名获得子报表ID
	 */
	public static String getChildRepId(String repName)
	{
		String childRepId="";
		DBConn conn = null;

		if(repName == null) return childRepId;
		try {
			StringBuffer hql = new StringBuffer(					
				 "from MChildReport mcr where"
				+" mcr.reportName='"+repName.trim()+"'"
				 );				
			
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());			
			List list = query.list();

			if (list != null && list.size() > 0) {
				MChildReport mcr=(MChildReport)list.get(0);
				
				if(mcr!=null){
					if(mcr.getMMainRep().getRepCnName().equals(repName.trim())){
						childRepId = mcr.getComp_id().getChildRepId();
					}			
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);			
			childRepId = repName.substring(0,3) + "00";
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return childRepId;
	}
	
	/**
	 *更新发布状态
	 * @param childId
	 * @param versionId
	 * @return
	 * @throws Exception
	 */
	 
	public static boolean updateIsPublic (String childId,String versionId) throws Exception {    
	    boolean result = false;
	    DBConn conn =null;
	    Session session =null;
	    if(childId!=null && versionId!=null)
	    {
	        try
	        {
	            conn = new DBConn();
	            session = conn.beginTransaction(); 
	            MChildReport mcr = getChildReport(childId,versionId);
	           
	           if( mcr.getIsPublic().intValue()==1){
	            	mcr.setIsPublic(new Integer(0));	            	
	            } else {
	            	mcr.setIsPublic(new Integer(1));	            	 
	            }
	           
	          // mcr.setIsPublic(new Integer(0));
	            session.update(mcr);

	            session.flush();
	            result = true;
	        }
	        catch(Exception e)
	        {
	            log.printStackTrace(e);
	            result = false;
	        }
	        finally{
	            if(conn!=null)
	                conn.endTransaction(result);
	        }
	       
	    }
	    return   result;
	}

	public static MChildReport getChildReport(String childId,String versionId)throws Exception {

		DBConn conn = null;
		MChildReport mcr=null;
		try {
			StringBuffer hql = new StringBuffer(
				"from MChildReport mcr where mcr.comp_id.childRepId='"
					+childId+"' and mcr.comp_id.versionId='"+versionId+"'");

			conn = new DBConn();
			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			
			List list = query.list();
			if (list != null && list.size() != 0) {
				 mcr=(MChildReport)list.get(0);			
			}

		} catch (HibernateException he) {
			log.printStackTrace(he);
			mcr=null;
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return mcr;

	}
	
	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 根据报表名称判断数据库中是否存已经存在该报表名称
	 * @author Yao	
	 * @param reptName 报表名称
	 * @return boolean 是否存在
	 *
	 */
	public static boolean isReportNameExists(String reptName) {
		boolean isExists = false;

		if (reptName == null)
			return isExists;

		DBConn conn = null;
		Session session = null;

		try {
			String hql = "select count(*) from MChildReport mcr where mcr.reportName='"+ reptName.trim()+ "'";

			conn = new DBConn();
			session = conn.openSession();

			List list = session.find(hql);
			if (list != null && list.size() > 0) {
				int count = list.get(0) == null ? 0 : ((Integer) list.get(0))
						.intValue();
				if (count > 0)
					isExists = true;
			}

		} catch (Exception he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return isExists;
	}
	/**
	 *<p>描述:根据报表title和子标题获得版本号</p>
	 *<p>参数:</p>
	 *<p>日期：2007-9-19</p>
	 *<p>作者：曹发根</p>
	 */
	public static String getVersionIdByTitle(String title,String subTitle){
		String re="";
		DBConn conn = null;

		try {
			StringBuffer hql = new StringBuffer("from MChildReport mcr where"+" mcr.reportName='"+title+"' and mcr.isPublic=1" );				
		
			conn = new DBConn();

			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());			
			List list = query.list();

			if (list != null && list.size() ==1) {
				MChildReport mcr=(MChildReport)list.get(0);
				re = mcr.getComp_id().getVersionId();
			}else{
				query=session.createQuery("from MChildReport mcr where"+" mcr.reportName='"+title+"-"+subTitle+""+"' and mcr.isPublic=1" );
				list = query.list();
				if (list != null && list.size() ==1) {
					MChildReport mcr=(MChildReport)list.get(0);
					re = mcr.getComp_id().getVersionId();
				}else{
					query=session.createQuery("from MChildReport mcr where"+" mcr.reportName='"+subTitle+"' and mcr.isPublic=1" );
					list = query.list();
					if (list != null && list.size() ==1) {
						MChildReport mcr=(MChildReport)list.get(0);
						re = mcr.getComp_id().getVersionId();
					}
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);			
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return re;
		
	}
	/**
	 * 查询所有子报表信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @return List
	 * @exception Exception
	 *                If the com.cbrc.smis.form.MChildReportForm objects cannot
	 *                be retrieved.
	 */
	public static List findAllFR(String versionId) throws Exception {
		List retVals = null;
		Map map = new HashMap();
		DBConn conn = null;
		Session session = null;
		
		try {
			String hql = "from MChildReport mcr where mcr.comp_id.versionId='"+versionId+"' ";

			conn = new DBConn();
			session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();
				MChildReport mChildReport = new MChildReport();
				retVals = new ArrayList();
				while (it.hasNext()) {
					mChildReport = (MChildReport) it.next();
					MChildReportForm form = new MChildReportForm();
					TranslatorUtil.copyPersistenceToVo(mChildReport, form);
					if(!map.containsKey(form.getChildRepId())){
						retVals.add(form);
						map.put(form.getChildRepId(),form);
					}					
				}
			}
		} catch (HibernateException he) {
			log.printStackTrace(he);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	
	/**
 	 * 取得一个机构,一张报表的的所有单元格信息
 	 * @param version
 	 * @return
 	 */
 	public static List selectReportValues(ETLReportForm etlForm)
 	{
 		ETLReportForm form = null;
       List resuList=null;
 		com.fitech.net.common.ETLDBManager db=null;
		ResultSet rs = null;
 		try
 		{
 			db=new com.fitech.net.common.ETLDBManager();
 			String sql = "select cb.result, cb.expr_x,cb.expr_y from cbrc_exc_inte cb "
 					+ "where cb.deptcd='"+etlForm.getDeptId().trim()+"'  and cb.deptye="+etlForm.getYear()+"  and cb.deptmn="+
 					etlForm.getMonth()+"  and cb.exceid='"+etlForm.getExcelId().trim()+"'";

			rs =db.executeQuery(sql);			
			resuList = new ArrayList();
			while (rs.next())
			{
				form=new ETLReportForm();
				form.setReportId(etlForm.getReportId());
				form.setCurrId(etlForm.getCurrId());
				form.setDataRangeId(etlForm.getDataRangeId());
				form.setDeptId(etlForm.getDeptId());
				form.setExcelId(etlForm.getExcelId());
				form.setMonth(etlForm.getMonth());
				form.setOrgId(etlForm.getOrgId());
				form.setRepName(etlForm.getRepName());
				form.setReportId(etlForm.getReportId());
				form.setReportName(etlForm.getReportName());
				form.setVersionId(etlForm.getVersionId());
				form.setYear(etlForm.getYear());
				int row = Integer.parseInt(rs.getString("expr_y"));
			    int dataMove=FitechEXCELReport.getOffsetRows(etlForm.getReportId(), etlForm.getVersionId());
			    int rowId=row-dataMove;
			    
			    String contents = new java.text.DecimalFormat("##0.00").format(Double.parseDouble(rs.getString("result"))).toString();
				form.setResult(contents);	
				form.setCellName(rs.getString("expr_x")+rowId);
				resuList.add(form);
			}
		}catch(Exception e){
			resuList = null;
			System.out.println(etlForm.getReportId()+"     "+etlForm.getDeptId()+"'  and cb.deptye="+etlForm.getYear()+"  and cb.deptmn="+
				etlForm.getMonth()+"  and cb.exceid='"+etlForm.getExcelId()+"'");

			e.printStackTrace();
			
		}finally{
			
			db.close();
		}
 		return resuList;
 	}
 	public static boolean insertDB(List etlFormList)
 	{

 		Connection con = null;

        if(etlFormList == null || etlFormList.size()<1 ) return false;
        boolean insert = false;
        
        try
        {  
        	con = new com.cbrc.smis.proc.jdbc.FitechConnection().getConnect();
        	ETLReportForm  etlForm = (ETLReportForm)etlFormList.get(1);
                //2007-11-30
                //判断有无重复提取的ETL
                String _repInId = findRepInIdIsEtl(con,etlForm);
                if(_repInId != null)
                {
                    if(!removeEtl(con,_repInId))
                        return false;
                }
                        //向表ReportIn插入一条记录
                        if(insertRepIn(con,etlForm))
                        {
//                            //解析上报的单元格数据
//                            ExcelUtil excelUtil = new ExcelUtil();
//                            cellList = excelUtil.getDataFromExcel(file,cellList,job);
//                            if(cellList != null)
//                            {
                                //插入上报的EXCEL报表的单元格数据
                                if(insertRepInInfo(con,etlFormList))
                                {
//                                    job.setJobLog("成功执行ETL数据提取");
//                                    job.setJobSts("DONE");
//                                    //向表Job_Log插入一条ETL记录
//                                    if(doneJob(dbm,job))
                                        insert = true;  
                                }
                                else
                                {
                                    
                                        insert = false;
                                }
//                            }
//                            else
//                            {
//                                job.setJobLog("未成功执行ETL数据提取");
//                                job.setJobSts("ERROR");
//                                if(doneJob(dbm,job))
//                                    insert = true;
//                            }
                        }
                        
           
        }catch (Exception e)
		{
    		insert=false;
			log.printStackTrace(e);
			try
			{
				con.close();
			}
			catch (SQLException e1)
			{
				// TODO 自动生成 catch 块
				e1.printStackTrace();
			}
			
		}
		finally
		{
			if (con != null)
				try
				{
					con.close();
				}
				catch (SQLException e)
				{
					// TODO 自动生成 catch 块
					e.printStackTrace();
				}
		}
        return insert;
    
 	}
 	 /**
     * 查找有无通过ETL方式入库的report_in纪录
     * @param   dbm         DBManager   数据库管理对象
     * @param   job         Job         任务对象
     * @return  String
     * @throws SQLException
     */
    public static String findRepInIdIsEtl(Connection con ,ETLReportForm etlForm) throws SQLException
    {
        String _repInId = null;
        PreparedStatement pStmt = null;
        ResultSet rs = null;
        try
        {
            String find_repInId = "select rep_in_id from report_in"
                                + " where child_rep_id = ?"
                                + " and version_id = ?"
                                + " and year = ?"
                                + " and term = ?"
                                + " and org_id = ?"
                                + " and DATA_RANGE_ID = 1"
                                + " and CUR_ID = 1"
                                + " and times = -2";
            
            pStmt = con.prepareStatement(find_repInId.toUpperCase());
            pStmt.setString(1,etlForm.getReportId());
            pStmt.setString(2,etlForm.getVersionId());
            pStmt.setInt(3,Integer.parseInt(etlForm.getYear()));
            pStmt.setInt(4,Integer.parseInt(etlForm.getMonth()));
            pStmt.setString(5, etlForm.getOrgId());
            rs = pStmt.executeQuery();
            if(rs.next())
                _repInId = rs.getString("REP_IN_ID");
            
        }
        catch (SQLException e)
        {
            throw e;
        }
        finally
        {
            if(rs != null) rs.close();
            if (pStmt != null) pStmt.close();
        }
        return _repInId ;
    }
    /**
     * 删除report_in内重复ETL数据
     * @param dbm
     * @param _repInId
     * @return
     * @throws SQLException
     */
    private static boolean removeEtl(Connection con ,String _repInId) throws SQLException
    {
        boolean remove = false;
        if(_repInId == null) return true;
        String remove_rptIn = "delete from report_in where rep_in_id = "+_repInId;
        String remove_rptInfo = "delete from report_in_info where rep_in_id ="+_repInId;
        Statement pStmt = null; 
        try
        {          
            pStmt = con.createStatement();
           
            if(pStmt.executeUpdate(remove_rptIn.toUpperCase())>0)
            {
            	con.commit();
            	//System.out.println("delete report_in");
                
                if(pStmt.executeUpdate(remove_rptInfo.toUpperCase()) >0)
                {
                	con.commit();
                	//System.out.println("delete from report_in_info");                    
                    remove = true;
                }
            }            
        }
        catch (SQLException e)
        {
            throw e;
        }
        finally
        {            
            if (pStmt != null) pStmt.close();
        }
        return remove;       
    }

    /**
     * 根据Job 任务对象向表Report_in 新增一条记录
     * @param dbm       DBManager   数据库管理对象
     * @param job       Job         任务对象
     * @return  新增成功返回true  失败返回false
     */
    private static boolean insertRepIn(Connection con ,ETLReportForm etlForm)
    {
        boolean insert = false;
        PreparedStatement pStmt = null;
        try
        {
            if (con != null && etlForm != null)
            {  
                     String insertSql ="insert into Report_In(CHILD_REP_ID, VERSION_ID, DATA_RANGE_ID,";
                             insertSql +="TIMES,ORG_ID,YEAR,TERM,CHECK_FLAG,REP_NAME,CUR_ID)";
                             insertSql +=" values(?,?,?,?,?,?,?,4,?,?)";
                     pStmt = con.prepareStatement(insertSql.toUpperCase());
                     pStmt.setString(1,etlForm.getReportId());
                     pStmt.setString(2,etlForm.getVersionId());
                     pStmt.setInt(3,1);
                     pStmt.setInt(4,-2);
                     pStmt.setString(5, etlForm.getOrgId());
                     pStmt.setInt(6,Integer.parseInt(etlForm.getYear()));
                     pStmt.setInt(7,Integer.parseInt(etlForm.getMonth()));
                     pStmt.setString(8,etlForm.getReportName());
                     pStmt.setInt(9,1);
                     if(pStmt.executeUpdate() > 0)
                         insert = true;
 
                     con.commit();
//System.out.println("insert ReportIn -->" + insert);                     
  
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {  
              if(pStmt != null)   pStmt.close();
            }
            catch (SQLException e)
            {
                e.printStackTrace();
            }
        }       
        return insert;
    }
    /**
     * 向表Report_in_info插入解析的Excel报表数据
     * @param   dbm      DBManager   数据库管理对象
     * @param   file     File       含excel的 File对象
     * @param   cellList List       含有Excel单元格解析数据的Cell对象的List集合
     * @return  成功返回true    失败返回false
     * @throws SQLException
     */
    private static boolean insertRepInInfo(Connection con  ,List relList)
                throws SQLException
    {
        boolean insert=false;
        Statement stmt = null;
       
        String repInId = "";
        if(relList != null && con != null)
        {
        	try{
	        	String sql = "select MAX(REP_IN_ID) from REPORT_IN";
	        	
	        	ResultSet rs = con.createStatement().executeQuery(sql);
	            if(rs.next()){
	            	repInId=String.valueOf(rs.getInt(1));
	            }

	            stmt = con.createStatement();
	            for (int i = 0; i < relList.size(); i++)
	            {
	            	ETLReportForm eForm = (ETLReportForm)relList.get(i);
	            	Integer cellId = StrutsMCellDelegate.getCellId(eForm.getReportId(), eForm.getVersionId(),eForm.getCellName());
	             if(cellId!=null){
	            	
	            
				 
						String insertSQL = "insert into report_in_info(Rep_In_ID,Cell_ID,Report_Value) values(".toUpperCase()
								+ repInId + "," + cellId.intValue() + ",'" + eForm.getResult() + "')";
			
						stmt.addBatch(insertSQL);
					   System.out.println(insertSQL);
	             }else{
	            	 System.out.println(eForm.getReportId()+ eForm.getVersionId()+eForm.getCellName());
	             }
			  }

	            if(stmt.executeBatch().length >=0){
	            	con.commit();
	                insert = true;
	            }
        	}catch (Exception e)
			{
        		insert=false;
				log.printStackTrace(e);
				try
				{
					con.close();
				}
				catch (SQLException e1)
				{
					// TODO 自动生成 catch 块
					e1.printStackTrace();
				}
				
			}
			finally
			{
				if (con != null)
					try
					{
						con.close();
					}
					catch (SQLException e)
					{
						// TODO 自动生成 catch 块
						e.printStackTrace();
					}
			}
		}
        return insert;
    }   
    /**
     * 查找对应的机构部门
     * @return
     * @throws Exception
     */
	public static List findOrgDept() throws Exception{

		   ETLReportForm form = null;
	       List resuList=null;
	 		com.fitech.net.common.ETLDBManager db=null;
			ResultSet rs = null;
	 		try
	 		{
	 			db=new com.fitech.net.common.ETLDBManager();
	 			String sql = "select distinct convert(varchar,convert(int,brchno)) as deptcd,brchna as deptna from dcms_kub_brch where brchlv in (0,1)";

				rs =db.executeQuery(sql);			
				resuList = new ArrayList();
				while (rs.next())
				{
					form=new ETLReportForm(); 
					form.setDeptId(rs.getString("deptcd"));
					form.setOrgName(rs.getString("deptna"));
					resuList.add(form);
				}
			}catch(Exception e){
				resuList = null;			
				e.printStackTrace();		
			}finally{
				db.close();
			}
	 		return resuList;
		
	}
    /**
     * 查找数据仓库报表信息列表
     * @return
     * @throws Exception
     */
	public static List findReportExcel() throws Exception{

		   ETLReportForm form = null;
	       List resuList=null;
	 		com.fitech.net.common.ETLDBManager db=null;
			ResultSet rs = null;
	 		try
	 		{
	 			db=new com.fitech.net.common.ETLDBManager();
	 			String sql = "Select exceid,  excenm from cbrc_exc_exce";
				rs =db.executeQuery(sql);			
				resuList = new ArrayList();
				while (rs.next())
				{
					form=new ETLReportForm(); 
					form.setExcelId(rs.getString("exceid"));
					form.setReportName(rs.getString("excenm"));
					resuList.add(form);
				}
			}catch(Exception e){
				resuList = null;			
				e.printStackTrace();		
			}finally{
				db.close();
			}
	 		return resuList;
		
	}
	
	/**
	 * 根据报表名称、期数获得报表对象
	 * 
	 * @param title 报表名称
	 * @param subTitle 报表子标题
	 * @param year 报表年份
	 * @param term 报表月份
	 * @return MChildReport 子报表对象
	 */
    public static MChildReport findByTitle(String title,String subTitle,String year,String term){
    	
        MChildReport mcr = null;
        DBConn conn = null;
        Session session = null;
        try {
        	String hql = "";
        	if(Config.DB_SERVER_TYPE.equals("oracle"))
        		hql = "from MChildReport mcr where mcr.reportName='"+ title +"' " +
            			 "and to_date('"+year+"-"+term+"-01','yyyy-MM-dd') between to_date(mcr.startDate,'yyyy-MM-dd') " +
            			 "and to_date(mcr.endDate,'yyyy-MM-dd') order by mcr.comp_id.versionId desc";
        	if(Config.DB_SERVER_TYPE.equals("db2"))
        		hql = "from MChildReport mcr where mcr.reportName='"+ title +"' " +
			   			 "and date('"+year+"-"+term+"-01') between date(mcr.startDate) " +
						 "and date(mcr.endDate) order by mcr.comp_id.versionId desc";
            
            conn = new DBConn();
            session = conn.openSession();
            
            List list = session.createQuery(hql).list();
            if (list != null && list.size()>0) {
                 mcr=(MChildReport)list.get(0);
            }else{
            	if(Config.DB_SERVER_TYPE.equals("oracle"))
	            	hql = "from MChildReport mcr where mcr.reportName='"+ title +"-"+ subTitle +"' " +
	   			 		  "and to_date('"+year+"-"+term+"-01','yyyy-MM-dd') between to_date(mcr.startDate,'yyyy-MM-dd') " +
	   			 		  "and to_date(mcr.endDate,'yyyy-MM-dd') order by mcr.comp_id.versionId desc ";
            	if(Config.DB_SERVER_TYPE.equals("db2"))
            		hql = "from MChildReport mcr where mcr.reportName='"+ title +"-"+ subTitle +"' " +
 			 		  "and date('"+year+"-"+term+"-01') between date(mcr.startDate) " +
 			 		  "and date(mcr.endDate) order by mcr.comp_id.versionId desc ";
            	
                list = session.createQuery(hql).list();
                if (list != null && list.size()>0) {
                    mcr=(MChildReport)list.get(0);
                }else{
                	if(Config.DB_SERVER_TYPE.equals("oracle"))
	                	hql = "from MChildReport mcr where mcr.reportName='"+ subTitle +"' " +
	 			 		  	  "and to_date('"+year+"-"+term+"-01','yyyy-MM-dd') between to_date(mcr.startDate,'yyyy-MM-dd') " +
	 			 		  	  "and to_date(mcr.endDate,'yyyy-MM-dd') order by mcr.comp_id.versionId desc";
                	if(Config.DB_SERVER_TYPE.equals("db2"))
                		hql = "from MChildReport mcr where mcr.reportName='"+ subTitle +"' " +
			 		  	  "and DATE('"+year+"-"+term+"-01') between DATE(mcr.startDate) " +
			 		  	  "and DATE(mcr.endDate) order by mcr.comp_id.versionId desc";
                    
                    list = session.createQuery(hql).list();
                    if (list != null && list.size()>0) {
                        mcr=(MChildReport)list.get(0);
                    }
                }
            }
        } catch (HibernateException he) {
        	mcr = null;
            log.printStackTrace(he);            
        } catch(Exception e){
        	mcr = null;
            log.printStackTrace(e);
        } finally {
            if (conn != null)
                conn.closeSession();
        }
        return mcr;
    }
}
