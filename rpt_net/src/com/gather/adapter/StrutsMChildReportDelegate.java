
package com.gather.adapter;

import java.util.ArrayList;
import java.util.List;

import net.sf.hibernate.Session;

import com.gather.common.Log;
import com.gather.common.StringUtil;
import com.gather.dao.DBConn;
import com.gather.hibernate.MChildReport;
import com.gather.struts.forms.MChildReportForm;
/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MChildReport data (i.e. 
 * com.gather.struts.forms.MChildReportForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMChildReportDelegate {

	   /**
	    * Update (i.e. persist) an existing com.gather.struts.forms.MChildReportForm object.
	    *
	    * @param   mChildReportForm   The com.gather.struts.forms.MChildReportForm object containing the data to be updated
	    * @exception   Exception   If the com.gather.struts.forms.MChildReportForm object cannot be updated/persisted.
	    */
	   public static boolean update (com.gather.struts.forms.MChildReportForm mChildReportForm) throws Exception {
	      com.gather.hibernate.MChildReport mChildReportPersistence = new com.gather.hibernate.MChildReport ();
	      try{
	      TranslatorUtil.copyVoToPersistence(mChildReportPersistence, mChildReportForm);
	      DBConn conn=new DBConn();
	      Session session=conn.beginTransaction();
	      session.update(mChildReportPersistence);
	      conn.endTransaction(true);
	      return true;
	      }catch(Exception e)
		  {
	      	throw e;
	      	}
	   }	
	/**
	 * @author linfeng
	 * @function 获得机构名称
	 * @param childReportId String  子报表id
	 * @param version 版本号
	 * @return childReportName String  子报表名称
	 */	
	public static String getChildReportName(String childReportId,String versionId){
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		List sourceList=new ArrayList();
		try{
			String sql="from com.gather.hibernate.MChildReport as obj1 where obj1.comp_id.childRepId"+
			            "='"+childReportId+"' and obj1.comp_id.versionId='"+versionId+"'";
			
			sourceList.addAll(session.find(sql));
			session.close();
		}catch(Exception e){
			new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: getChildReportName(String childReportId,String versionId) 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				if(session!=null) session.close();	
			}catch(Exception e){}
		}
		if(sourceList!=null && sourceList.size()>0){
			return ((MChildReport)sourceList.get(0)).getReportName();
		}
		return "";
	}
	
	/**
	 * @author linfeng
	 * @function 获得机构名称
	 * @param childReportId String  子报表id
	 * @return childReportName String  子报表名称
	 */
	public static String getChildReportName(String childReportId){
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		List sourceList=new ArrayList();
		try{
			String sql="from com.gather.hibernate.MChildReport as obj1 where obj1.comp_id.childRepId"+
			            "='"+childReportId+"'";
			
			sourceList.addAll(session.find(sql));
			session.close();
		}catch(Exception e){
			new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: getChildReportName(String childReportId) 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				session.close();	
			}catch(Exception e){}
		}
		if(sourceList!=null && sourceList.size()>0){
			return ((MChildReport)sourceList.get(0)).getReportName();
		}
		return "";
	}
	

	/**
	 * author linfeng
	 * function 由子报表id,得到子报表数据.
	 * @param childIds
	 * @return MChildReportForm List
	 */
	public static List getChildRepByChildIds(String[] childIds){
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		List sourceList=new ArrayList();
		try{
			String sql="from com.gather.hibernate.MChildReport as obj1 where obj1.comp_id.childRepId in (" + 
				StringUtil.getStrForSqlIN(childIds) + ")";
			
			sourceList.addAll(session.find(sql));
			session.close();
		}catch(Exception e){
			new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: getChildRepByChildIds 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				session.close();	
			}catch(Exception e){}
		}
		List toList=new ArrayList();
		
		MChildReport myPersistence=null;
		for(int i=0;i<sourceList.size();i++){
			MChildReportForm myForm=new MChildReportForm();
		  myPersistence=(MChildReport)sourceList.get(i);
		  try{
		  TranslatorUtil.copyPersistenceToVo(myPersistence,myForm);
			}catch(Exception e){
				// System.out.println(e.getMessage());
			}
		  toList.add(myForm);
		}
		return toList;
	}
	
	/**
	 * @author linfeng
	 * @function 得到版本信息
	 * @param String childReportId
	 * @return String[] versions
	 */
	public static String[] findVerion(String childReportId) throws Exception{
		String[]  versions=null;
		List versionList = new ArrayList();
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		String hsql="select cr.comp_id.versionId from com.gather.hibernate.MChildReport cr where cr.comp_id.childRepId = '"+childReportId+"'";
		// System.out.println("------------");
		// System.out.println("hsql is : "+hsql);
		// System.out.println("------------");
		versionList.addAll(session.find(hsql));
		if(versionList!=null && versionList.size()>0){
			versions=new String[versionList.size()];
			for(int i=0;i<versionList.size();i++){
				//// System.out.println();
				//// System.out.println("The report persistency class is:"+versionList.get(i).getClass().getName());
				//// System.out.println("versionList.get(i) is: "+(String)versionList.get(i));
				//// System.out.println();
				versions[i]=(String)versionList.get(i);	
				//=tempReport.getComp_id().getVersionId();
			}
		}
		return  versions;
	}

	
	public static MChildReport getTimeByPK(String childReportId,String versionId){
		if(childReportId==null || versionId==null) return null;
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		List sourceList=new ArrayList();
		try{
			String sql="from com.gather.hibernate.MChildReport as obj1 where obj1.comp_id.childRepId"+
			            "='"+childReportId+"' and obj1.comp_id.versionId='"+versionId+"'";
			
			sourceList.addAll(session.find(sql));
			session.close();
		}catch(Exception e){
			new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: getTimeByPK 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				if(session!=null) session.close();	
			}catch(Exception e){}
		}
		if(sourceList!=null && sourceList.size()>0){
			return ((MChildReport)sourceList.get(0));
		}
		return null;
	}

   /**
    * @ 姬怀宝
    */
   public static boolean create (com.gather.struts.forms.MChildReportForm mChildReportForm) throws Exception {
      com.gather.hibernate.MChildReport mChildReportPersistence = new com.gather.hibernate.MChildReport ();
      try{
      TranslatorUtil.copyVoToPersistence(mChildReportPersistence, mChildReportForm);
      DBConn conn=new DBConn();
      Session session=conn.beginTransaction();
      session.save(mChildReportPersistence);
      conn.endTransaction(true);
      return true;
      }catch(Exception e)
      {
    	  new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: create 异常："+e.getMessage());
    	  throw e;
      }
   }
	/**
	 * @author linfeng
	 * @得到所有子报表信息
	 * @return List MChildReportForm
	 */
	public static List getAll(){
		List list=new ArrayList();
		List resultList=new ArrayList();
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		String hsql="from com.gather.hibernate.MChildReport as obj";
		try{
		list.addAll(session.find(hsql));
		if(list!=null && list.size()>0){
			for(int i=0;i<list.size();i++){
				MChildReport report=(MChildReport)list.get(i);
				MChildReportForm myForm=new MChildReportForm();
				TranslatorUtil.copyPersistenceToVo(report,myForm);	
				resultList.add(myForm);
			}
		}
		}catch(Exception e){
			new Log(StrutsMChildReportDelegate.class).info(":::class:StrutsMChildReportDelegate --  method: getAll() 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				if(session!=null) session.close();
			}catch(Exception e){e.printStackTrace();}
		}
		return resultList;
	}

}
