
package com.gather.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Session;

import com.gather.common.Log;
import com.gather.common.StringUtil;
import com.gather.dao.DBConn;
import com.gather.hibernate.MRepRange;
import com.gather.struts.forms.MRepRangeForm;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MRepRange data (i.e. 
 * com.gather.struts.forms.MRepRangeForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMRepRangeDelegate {


	/**
	 * 
	 */
	public static List getAll(){
		List list=new ArrayList();
		List resultList=new ArrayList();
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		String hsql="from com.gather.hibernate.MRepRange as obj";
		try{
		list.addAll(session.find(hsql));
		if(list!=null && list.size()>0){
			for(int i=0;i<list.size();i++){
				MRepRange report=(MRepRange)list.get(i);
				MRepRangeForm myForm=new MRepRangeForm();
				TranslatorUtil.copyPersistenceToVo(report,myForm);	
				resultList.add(myForm);
			}
		}
		}catch(Exception e){
			new Log(StrutsMRepRangeDelegate.class).info(":::class:StrutsMRepRangeDelegate --  method: getAll() 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				if(session!=null) session.close();
			}catch(Exception e){e.printStackTrace();}
		}
	return resultList;
	}
	/**
	 * author linfeng
	 * function 得到相应机构的子报表id的列表
	 * param orgIds String[]
	 * return list  
	 */
    public static List getSubReportIds(String[] orgIds){
	      List retVals = new ArrayList();
	      
	      DBConn conn=new DBConn();
	      Session session=conn.openSession();
	      String sql="from com.gather.hibernate.MRepRange as obj1 where obj1.comp_id.orgId in(" + StringUtil.getStrForSqlIN(orgIds) + ")";
	      try{
	          retVals.addAll(session.find(sql));
	       
	          session.close();
	         }catch(Exception e){
	        	 new Log(StrutsMRepRangeDelegate.class).info(":::class:StrutsMRepRangeDelegate --  method: getSubReportIds 异常："+e.getMessage());
	        	 e.printStackTrace();
	         }finally{
	        	 try{
	        		 session.close();
	        	 }catch(Exception e){
	        		 
	        	 }
	         }
	
	      ArrayList org_vos = new ArrayList();
	      
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	    	  MRepRangeForm mRepRangeFormTemp = new MRepRangeForm();
	    	  MRepRange mRepRangePersistence = (MRepRange)it.next();
	    
	    	  try{
	         TranslatorUtil.copyPersistenceToVo(mRepRangePersistence, mRepRangeFormTemp);
	    	  }catch(Exception e){
	    		  new Log(StrutsMRepRangeDelegate.class).info(":::class:StrutsMRepRangeDelegate --  method: getSubReportIds 异常："+e.getMessage());
	    		  e.printStackTrace();
	    	  }
	         org_vos.add(mRepRangeFormTemp);
	      }
	      return org_vos;
    }
   /**
    *@author 姬怀宝
    */
   public static boolean  create (com.gather.struts.forms.MRepRangeForm mRepRangeForm) throws Exception {
      com.gather.hibernate.MRepRange mRepRangePersistence = new com.gather.hibernate.MRepRange ();
      try{
      TranslatorUtil.copyVoToPersistence(mRepRangePersistence, mRepRangeForm);
      DBConn conn=new DBConn();
      Session session=conn.beginTransaction();
      session.save(mRepRangePersistence);
      conn.endTransaction(true);
      return true;
      }catch(Exception e)
      {
    	  new Log(StrutsMRepRangeDelegate.class).info(":::class:StrutsMRepRangeDelegate --  method: create 异常："+e.getMessage());
    	  throw e;
      }
   }
 }
