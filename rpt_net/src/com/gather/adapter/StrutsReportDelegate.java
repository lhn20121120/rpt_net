
package com.gather.adapter;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.gather.common.Config;
import com.gather.common.DateUtil;
import com.gather.common.Log;
import com.gather.common.StringUtil;
import com.gather.dao.DBConn;
import com.gather.hibernate.Report;
import com.gather.refer.data.OtherUtil;
import com.gather.refer.data.ShowInfoUtil;
import com.gather.refer.data.file.ListingXmlBean;
import com.gather.struts.forms.CopyReportform;
import com.gather.struts.forms.HandleReferFileForm;
import com.gather.struts.forms.ReportForm;
/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for Report data (i.e. 
 * com.gather.struts.forms.ReportForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsReportDelegate {


	 public static boolean create (com.gather.struts.forms.ReportForm reportForm) throws Exception {
	      com.gather.hibernate.Report reportPersistence = new com.gather.hibernate.Report ();
	      try{
	      TranslatorUtil.copyVoToPersistence(reportPersistence, reportForm);
	      DBConn conn=new DBConn();
	      Session session=conn.beginTransaction();
	      session.save(reportPersistence);
	      session.flush();
	      conn.endTransaction(true);
	      return true;
	      }catch(Exception e)
	      {
	    	  new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method: create 异常："+e.getMessage());
	    	  throw e;
	      }
	 }
		/**
		 * 姬怀宝
		 * 
		 * 新增加的获取记录总数的函数
		 * 
		 * @param copyLogform
		 * @return
		 * @throws Exception
		 */
	 public static boolean  update (com.gather.struts.forms.ReportForm reportForm) throws Exception {
	      com.gather.hibernate.Report reportPersistence = new com.gather.hibernate.Report ();
	      try{
	      TranslatorUtil.copyVoToPersistence(reportPersistence, reportForm);
	      DBConn conn=new DBConn();
	      Session session=conn.beginTransaction();
	      session.update(reportPersistence);
	      conn.endTransaction(true);
	      return true;
	      }catch(Exception e)
		  {
	    	  new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method: update 异常："+e.getMessage());
	      	throw e;
		  }
	 }

	 
public static int getRecordCount(CopyReportform reportform, String namehql)
	throws Exception {
List retVals1 = new ArrayList();
DBConn conn = null;
Session session = null;
try {
	conn = new DBConn();
	session = conn.openSession();
	StringBuffer hql = new StringBuffer("select count(*)from Report report where report.fileFlag in(1,2) and report.MOrg.orgId in("+ namehql + ")");
	StringBuffer where = new StringBuffer("");
	if (reportform != null) {
		// 依据传过来的参数条件，增加相应的查询条件
		// 模板内容
		if (reportform.getOrgid() != null
				&& !reportform.getOrgid().equals("")) {
			 hql = new StringBuffer(
					"select count(*)from Report report where report.fileFlag in(1,2) and report.MOrg.orgId='"
							+ reportform.getOrgid() + "'");
		}
		if (reportform.getYear() != null
				&& reportform.getYear().intValue() != 0)
			where.append(" and report.year=" + reportform.getYear());
		if (reportform.getTerm() != null
				&& reportform.getTerm().intValue() != 0)
			where.append(" and report.term=" + reportform.getTerm());
		if (reportform.getFrequency() != null
				&& reportform.getFrequency().intValue() != 0)
			where.append(" and report.frequency="
					+ reportform.getFrequency());
		if (reportform.getFileFlag() != null
				&& reportform.getFileFlag().intValue() != 0) {
			if (reportform.getFileFlag().intValue() != 3) {
				where.append(" and report.fileFlag="
						+ reportform.getFileFlag());
			} else
				where.append(" and report.laterReportDay is not null");
		}
	}
	hql.append(where.toString());
	// 根据条件取相应的记录条数
	Query query = session.createQuery(hql.toString());
	retVals1 = query.list();
	if (retVals1 != null) {
		return Integer.parseInt(retVals1.get(0).toString());
	}
} catch (Exception e) {
	  new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method: getRecordCount 异常："+e.getMessage());
	e.printStackTrace();
} finally {
	if (conn != null)
		conn.closeSession();
}
return 0;
}
	
	/*
	 * @author linfeng
	 * @function 得到已上报报表信息，次序(年、半年、季、月) 
	 * @param year int 年
	 * @param month int  月
	 * @param orgIds String[] 机构id 列表
	 * @return ReportForm List 返回所有频率的列表
	 */
	public static List findReferedReports(int year,int month,String[]orgIds ) throws Exception{
		List resultList=new ArrayList();
		List tempList=fingReferedYearReports(year,month,orgIds);
		        if(tempList.size()>0){
			        for(int i=0;i<tempList.size();i++){
				        resultList.add(tempList.get(i));
			        }	
		        }
		     tempList=fingReferedHalfYearReports(year,month,orgIds);
				if(tempList.size()>0){
					for(int i=0;i<tempList.size();i++){
						resultList.add(tempList.get(i));
					}	
				}
		     tempList=fingReferedSeasonReports(year,month,orgIds);
				if(tempList.size()>0){
					for(int i=0;i<tempList.size();i++){
						resultList.add(tempList.get(i));
					}	
				}
		     tempList=fingReferedMonthReports(year,month,orgIds);
				if(tempList.size()>0){
					for(int i=0;i<tempList.size();i++){
						resultList.add(tempList.get(i));
					}	
				}
		
		return resultList;
	}
	/*
	 * @author linfeng
	 * @function 得到已上报报表信息，次序(年、半年、季、月) 
	 * @param year int 年
	 * @param month int  月
	 * @param orgIds String[] 机构id 列表
	 * @return ReportForm List 频率为年的
	 */
	public static List fingReferedYearReports(int year,int month,String[] orgIds) throws Exception{
		  int[] myYear=ShowInfoUtil.getYearAndTermNumber(Config.FREQUENCY_YEAR,year,month);
		  int paramYear=myYear[0];
		  int paramTermNumber=myYear[1];
		  int paramFreq=Config.FREQUENCY_YEAR;
	      List retVals = new ArrayList();
	      DBConn conn=new DBConn();
	      Session session=conn.openSession();
	      String hSql="from com.gather.hibernate.Report as obj1 where obj1.MOrg.orgId in("+StringUtil.getStrForSqlIN(orgIds)+
	                  ") and obj1.frequency="+paramFreq+" and obj1.year="+paramYear+" and obj1.term="+paramTermNumber;
          retVals.addAll(session.find(hSql));
	      session.close();
	      ArrayList org_vos = new ArrayList();
	      
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	    	  ReportForm reportFormTemp = new ReportForm();
	          Report reportPersistence = (Report)it.next();
	         TranslatorUtil.copyPersistenceToVo(reportPersistence, reportFormTemp);
	         org_vos.add(reportFormTemp);
	      }
	      return org_vos;
	}
	/*
	 * @author linfeng
	 * @function 得到已上报报表信息，次序(年、半年、季、月) 
	 * @param year int 年
	 * @param month int  月
	 * @param orgIds String[] 机构id 列表
	 * @return ReportForm List 频率为半年
	 */
	public static List fingReferedHalfYearReports(int year,int month,String[]orgIds ) throws Exception{
		  int[] myHalfYear=ShowInfoUtil.getYearAndTermNumber(Config.FREQUENCY_HALF_YEAR,year,month);
		  int paramHalfYear=myHalfYear[0];
		  int paramTermNumber=myHalfYear[1];
		  int paramFreq=Config.FREQUENCY_HALF_YEAR;
	      List retVals = new ArrayList();
	      DBConn conn=new DBConn();
	      Session session=conn.openSession();
	      String hSql="from com.gather.hibernate.Report as obj1 where obj1.MOrg.orgId in("+StringUtil.getStrForSqlIN(orgIds)+
	                  ") and obj1.frequency="+paramFreq+" and obj1.year="+paramHalfYear+" and obj1.term="+paramTermNumber;
          retVals.addAll(session.find(hSql));
	      session.close();
	      ArrayList org_vos = new ArrayList();
	      
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	    	  ReportForm reportFormTemp = new ReportForm();
	          Report reportPersistence = (Report)it.next();
	         TranslatorUtil.copyPersistenceToVo(reportPersistence, reportFormTemp);
	         org_vos.add(reportFormTemp);
	      }
	      return org_vos;
	}
	/*
	 * @author linfeng
	 * @function 得到已上报报表信息，次序(年、半年、季、月) 
	 * @param year int 年
	 * @param month int  月
	 * @param orgIds String[] 机构id 列表
	 * @return ReportForm List 频率为季
	 */
	public static List fingReferedSeasonReports(int year,int month,String[]orgIds ) throws Exception{
		// System.out.println("year is :"+year+" month is: "+month);
		int[] mySeason=ShowInfoUtil.getYearAndTermNumber(Config.FREQUENCY_SEASON,year,month);
		// System.out.println("mySeason size is: "+mySeason.length);
		int paramSeason=mySeason[0];
		  int paramTermNumber=mySeason[1];
		  int paramFreq=Config.FREQUENCY_SEASON;
	      List retVals = new ArrayList();
	      DBConn conn=new DBConn();
	      Session session=conn.openSession();
	      String hSql="from com.gather.hibernate.Report as obj1 where obj1.MOrg.orgId in("+StringUtil.getStrForSqlIN(orgIds)+
	                  ") and obj1.frequency="+paramFreq+" and obj1.year="+paramSeason+" and obj1.term="+paramTermNumber;
        retVals.addAll(session.find(hSql));
	      session.close();
	      ArrayList org_vos = new ArrayList();
	      
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	    	  ReportForm reportFormTemp = new ReportForm();
	          Report reportPersistence = (Report)it.next();
	         TranslatorUtil.copyPersistenceToVo(reportPersistence, reportFormTemp);
	         org_vos.add(reportFormTemp);
	      }
	      return org_vos;

	}
	/**
	 * @author linfeng
	 * @function 得到已上报报表信息，次序(年、半年、季、月) 
	 * @param year int 年
	 * @param month int  月
	 * @param orgIds String[] 机构id 列表
	 * @return ReportForm List 频率为月
	 */
	public static List fingReferedMonthReports(int year,int month,String[]orgIds ) throws Exception{
		int[] myMonth=ShowInfoUtil.getYearAndTermNumber(Config.FREQUENCY_MONTH,year,month);
		int paramMonth=myMonth[0];
		  int paramTermNumber=myMonth[1];
		  int paramFreq=Config.FREQUENCY_MONTH;
	      List retVals = new ArrayList();
	      DBConn conn=new DBConn();
	      Session session=conn.openSession();
	      String hSql="from com.gather.hibernate.Report as obj1 where obj1.MOrg.orgId in("+StringUtil.getStrForSqlIN(orgIds)+
	                  ") and obj1.frequency="+paramFreq+" and obj1.year="+paramMonth+" and obj1.term="+paramTermNumber;
      retVals.addAll(session.find(hSql));
	      session.close();
	      ArrayList org_vos = new ArrayList();
	      
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	    	  ReportForm reportFormTemp = new ReportForm();
	          Report reportPersistence = (Report)it.next();
	         TranslatorUtil.copyPersistenceToVo(reportPersistence, reportFormTemp);
	         org_vos.add(reportFormTemp);
	      }
	      return org_vos;
	}
	
	/**
	 * @author linfeng
	 * @function 保存数据到 report 表
	 * @param HandleReferFileForm list 提交的(处理过的)xml数据
	 * @return 返回插入失败的记录的list ,即，如果长度大于1，说明有插入失败的数据
	 */
   public static List saveReferData(List referDataList){
	   boolean result=true;
	   DBConn conn=new DBConn();
	   Session session=conn.beginTransaction();
	   if(referDataList==null || referDataList.size()<1) return null;
	   List resultList=new ArrayList();
	   int repId=0;
	   if(findMaxRepId()!=null){
		   repId=findMaxRepId().intValue();
	   }
	   for(int i=0;i<referDataList.size();i++){
		   Report reportPersistence=new Report();
		   HandleReferFileForm referDataForm=(HandleReferFileForm)referDataList.get(i);
		   TranslatorUtil.copyVoToPersistence(referDataForm,reportPersistence);
		   reportPersistence.setRepId(new Integer(++repId));
		   reportPersistence.setTimes(getTimes(referDataForm));
		   reportPersistence.setReportDate(new Date());
		   reportPersistence.setFileFlag(new Integer(0));  //初始化为0
		   //判断是否超过上报时间，如果超过，写入日期到数据库
		   Date referDate=null;
		   try{
              //得到查询的时间点
		   Date[] dates=OtherUtil.getStartAndEndDate(referDataForm.getReportId(),referDataForm.getVersion(),String.valueOf(referDataForm.getDataRange()),String.valueOf(referDataForm.getFrequency()),String.valueOf(referDataForm.getYear()),String.valueOf(referDataForm.getTerms()));
		   // System.out.println("------------比对的时间 is: "+ dates[1]);
		   referDate=dates[1];
		   // System.out.println("----------得到的提交的时间是："+referDate);
		   //如果当前时间大于提交时间，说明迟报
		    if(DateUtil.compareDate(new Date(),referDate)==1){
			    reportPersistence.setLaterReportDay(DateUtil.toSimpleDateFormat(new Date(),DateUtil.NORMALDATE));
		    }
		   }catch(Exception e){
			   new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:saveReferData 异常："+e.getMessage());
			   e.printStackTrace();
		   }

		   try{
		   session.save(reportPersistence);
		   }catch(Exception e){
			   e.printStackTrace();
			   result=false;   //回滚标志
			   break;          //退出
		   }
		   resultList.add(reportPersistence);
	   }
	   if (result==false) resultList=null;
	   if (conn != null) conn.endTransaction(result);
	   return resultList;
   }
   
   public static Integer getTimes(HandleReferFileForm referForm){
	   if(referForm==null) return new Integer(0);
	   DBConn conn=new DBConn();
	   Session session=conn.openSession();
	   List tempList=new ArrayList();
	   String orgId=referForm.getOrgId();
	   String subRepId=referForm.getReportId();
	   String version=referForm.getVersion();
	   Integer freqId=referForm.getFrequency();
	   int year=referForm.getYear();
	   Integer term=referForm.getTerms();
	   // System.out.println("subRepId is"+subRepId);
	   // System.out.println("version is"+version);
	   // System.out.println("freqId is"+freqId);
	   // System.out.println("year is"+year);
	   // System.out.println("term is"+term);
	   String hsql="from com.gather.hibernate.Report as obj1 where "+
	               "obj1.MOrg.orgId='"+orgId+"' and obj1.MChildReport.comp_id.childRepId=' "+
	               ""+subRepId+"' and obj1.MChildReport.comp_id.versionId='"+version+"' and "+
	               "obj1.year="+year+" and obj1.frequency="+freqId+" and obj1.term="+term;
	   // System.out.println("-----getTimes is: "+hsql);
	   try{
	   tempList.addAll(session.find(hsql));
	   }catch(Exception e){
		   new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:getTimes 异常："+e.getMessage());
		   e.printStackTrace();}
	   finally{
		   try{
			   session.close();
		   }catch(Exception e){e.printStackTrace();}
	   }
	   if(tempList!=null && tempList.size()>0){
		   int resultInt=0;
		   for(int i=0;i<tempList.size();i++){
			   Report report=(Report)tempList.get(i);
			   if(report.getTimes().intValue()>resultInt){
				   resultInt=report.getTimes().intValue();
			   }
		   }
		   return new Integer(resultInt);
	   }
	   return new Integer(0);
   }
	
   /**
    * @author linfeng
    * @function 得到表中的最大值
    * @return 
    */
   public static Integer findMaxRepId(){
	   DBConn conn=new DBConn();
	   Session session=conn.openSession();
	   String hsql="select max(obj.repId) from com.gather.hibernate.Report as obj";
	   // System.out.println("findMaxRepId() hsql is:"+hsql);
	   List resultList=new ArrayList();
	   try{
	   resultList.addAll(session.find(hsql));
	   }catch(Exception e){e.printStackTrace();}
	   finally{
		   try{
			   session.close();
		   }catch(Exception e){
			   new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:findMaxRepId() 异常："+e.getMessage());
			   e.printStackTrace();}
	   }
	   return (Integer)resultList.get(0);
   }
   
   public static Report getReport(ListingXmlBean xmlBean){
	   if(xmlBean==null) return null;
	   DBConn conn=new DBConn();
	   Session session=conn.openSession();
	   List tempList=new ArrayList();
		String reportId=xmlBean.getReportId();
		String versionId=xmlBean.getVersion();
		String orgId=xmlBean.getOrgId();
		String year=xmlBean.getYear();
		String freq=xmlBean.getFrequencyId();
		String term=xmlBean.getTerms();
		String hsql="from com.gather.hibernate.Report as obj where "+
		               "obj.MOrg.orgId='"+orgId+"' and obj.MChildReport.comp_id.childRepId='"+
		               ""+reportId+"' and obj.MChildReport.comp_id.versionId='"+versionId+"' and "+
		               "obj.year="+year+" and obj.frequency="+freq+" and obj.term="+term;
		// System.out.println("-----getReport() is: "+hsql);
		   try{
			   tempList.addAll(session.find(hsql));
			   }catch(Exception e){
				   new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:getReport() 异常："+e.getMessage());
				   e.printStackTrace();}
			   finally{
				   try{
					   session.close();
				   }catch(Exception e){e.printStackTrace();}
			   }
			   if(tempList!=null && tempList.size()>0){
				   for(int i=0;i<tempList.size();i++){
					   Report report=(Report)tempList.get(i);
					   return report;
				   }
			   }
			   // System.out.println("report list size() is: "+tempList.size());
	   return null;
   }
   
  	   /***************************************************************************
		 * 姬怀宝 新增加的模糊查询方法
		 * 
		 * @param copyLogform
		 * @param offset
		 * @param limit
		 * @return
		 */
		 public static List select(
				com.gather.struts.forms.CopyReportform reportForm, int offset,
				int limit, String namehql) {
			List retVals = new ArrayList();
			DBConn conn = null;
			Session session = null;
			try {
				conn = new DBConn();
				session = conn.openSession();
				StringBuffer hql = new StringBuffer(
						"from Report report where report.fileFlag in(1,2) and report.MOrg.orgId in("
								+ namehql + ")");
				StringBuffer where = new StringBuffer("");
				if (reportForm != null) {
					// 依据传过来的参数条件，增加相应的查询条件
					// 模板内容
					if (reportForm.getOrgid() != null
							&& !reportForm.getOrgid().equals("")) {
						 hql = new StringBuffer(
								"from Report report where report.fileFlag in(1,2) and report.MOrg.orgId='"
										+ reportForm.getOrgid() + "'");
					}
					if (reportForm.getYear() != null
							&& reportForm.getYear().intValue() != 0)
						where.append(" and report.year=" + reportForm.getYear());
					if (reportForm.getTerm() != null
							&& reportForm.getTerm().intValue() != 0)
					{
						where.append(" and report.term=" + reportForm.getTerm());
					}
					if (reportForm.getFrequency() != null
							&& reportForm.getFrequency().intValue() != 0)
						where.append(" and report.frequency="
								+ reportForm.getFrequency());
					if (reportForm.getFileFlag() != null
							&& reportForm.getFileFlag().intValue() != 0) {

						if (reportForm.getFileFlag().intValue() != 3) {
							where.append(" and report.fileFlag="
									+ reportForm.getFileFlag());
						} else
							where.append(" and report.laterReportDay is not null");
					}
				}
				hql.append(where.toString());
				// 根据条件取相应的记录条数
				Query query = session.createQuery(hql.toString());

				query.setFirstResult(offset);
				query.setMaxResults(limit);
				retVals = query.list();
				if (retVals != null) {
					ArrayList report_vos = new ArrayList();
					for (Iterator it = retVals.iterator(); it.hasNext();) {
						com.gather.struts.forms.CopyReportform reportFormTemp = new com.gather.struts.forms.CopyReportform();
						com.gather.hibernate.Report reportPersistence = (com.gather.hibernate.Report) it
								.next();
						TranslatorUtil.copyPersistenceToVo(reportPersistence,
								reportFormTemp);
						report_vos.add(reportFormTemp);
					}
					retVals = report_vos;
				}
			} catch (Exception e) {
				new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:select() 异常："+e.getMessage());
				e.printStackTrace();
			} finally {
				if (conn != null)
					conn.closeSession();
			}

			return retVals;
		}
	   
	   
	   
	   
	   
	   
/**
 * 新增的模糊查询方法
 */  public static List select1 (com.gather.struts.forms.ReportForm reportForm) throws Exception {
	      List retVals = new ArrayList();
	      DBConn conn=null;
		  Session session=null;
		  try{
			  StringBuffer hql = new StringBuffer("from  Report report where 1=1");
			  StringBuffer where = new StringBuffer("");
		    	  if(reportForm!=null)
		    	  {
//		    		//依据传过来的参数条件，增加相应的查询条件
					  //模板内容
					  if(reportForm.getRepName()!=null && !reportForm.getRepName().equals(""))
					 	where.append(" and report.repName like '%"+reportForm.getRepName()+"%'");				   
		    		  //时间范围
					  String startDate = reportForm.getStartDate();
					  String endDate = reportForm.getEndDate();
					  if(startDate!=null && !startDate.equals(""))
						  where.append( " and report.reportDate>=to_date('"+startDate+"','yyyy-mm-dd')");
					  if(endDate!=null && !endDate.equals(""))
						  where.append( " and report.reportDate<=to_date('"+endDate+"','yyyy-mm-dd')");
					  if(reportForm.getImage()=="×")
						  where.append(" and report.fileFlag="+1);
					  else
						  where.append(" and report.fileFlag="+0);
		    	  }
		    	  hql.append(where.toString());
				  //根据条件取相应的记录条数
				  Query query = session.createQuery(hql.toString());		  
				  retVals=query.list();
			  ArrayList report_vos = new ArrayList();
		      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
		         com.gather.struts.forms.ReportForm reportFormTemp = new com.gather.struts.forms.ReportForm();
		         com.gather.hibernate.Report reportPersistence = (com.gather.hibernate.Report)it.next();
		         TranslatorUtil.copyPersistenceToVo(reportPersistence, reportFormTemp);
		         report_vos.add(reportFormTemp);
		      }
		      retVals = report_vos;
		  }
		  catch(Exception e)
		  {
			  new Log(StrutsReportDelegate.class).info(":::class:StrutsReportDelegate --  method:select1 () 异常："+e.getMessage());
			  e.printStackTrace();
		  }
		  finally{
				if(conn!=null) conn.closeSession();		  
			  }
	     
	      return retVals;
	   }
}
