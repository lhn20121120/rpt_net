
/** 姬怀宝
	 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
	 * It has a set of methods to handle persistence for MRepRange data (i.e. 
	 * com.gather.struts.forms.MRepRangeForm objects).
	 * 
	 * @author <strong>Generated by Middlegen.</strong>
	 */
package com.gather.db.helper;
public class Pager {
  private int totalRows; //总行数
  private int pageSize = com.gather.common.Config.PER_PAGE_ROWS; //每页显示的行数
  //private int pageSize = 10;
  private int currentPage; //当前页号
  private int totalPages; //总页数
  private int startRow; //当前页在数据库中的起始行

  public Pager() {
  }

  public Pager(int _totalRows) {
	//  // System.out.println("=======in the init page.pagesize is: "+this.pageSize);
    totalRows = _totalRows;
    totalPages=totalRows/pageSize;
    int mod=totalRows%pageSize;
    if(mod>0){
      totalPages++;
    }
    currentPage = 1;
    startRow = 0;
  }

  public int getStartRow() {
    return startRow;
  }

  public int getTotalPages() {
    return totalPages;
  }

  public int getCurrentPage() {
    return currentPage;
  }

  public int getPageSize() {
	//  // System.out.println("=======page.pagesize is: "+this.pageSize);
    return pageSize;
  }

  public void setTotalRows(int totalRows) {
    this.totalRows = totalRows;
  }

  public void setStartRow(int startRow) {
    this.startRow = startRow;
  }

  public void setTotalPages(int totalPages) {
    this.totalPages = totalPages;
  }

  public void setCurrentPage(int currentPage) {
    this.currentPage = currentPage;
  }

  public void setPageSize(int pageSize) {
	 // // System.out.println("if set this pagesize :"+pageSize);
    this.pageSize = pageSize;
  }

  public int getTotalRows() {
    return totalRows;
  }

  public void first() {
    currentPage = 1;
    startRow = 0;
  }

  public void previous() {
    if (currentPage == 1) {
      return;
    }
    currentPage--;
    startRow = (currentPage - 1) * pageSize;
  }

  public void next() {
    if (currentPage < totalPages) {
      currentPage++;
    }
    startRow = (currentPage - 1) * pageSize;
  }

  public void last() {
    currentPage = totalPages;
    startRow = (currentPage - 1) * pageSize;
  }

  public void refresh(int _currentPage) {
    currentPage = _currentPage;
    if (currentPage > totalPages) {
      last();
    }
  }

}