package com.gather.adapter;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.gather.common.StringUtil;
import com.gather.dao.DBConn;
import com.gather.hibernate.Log;
import com.gather.hibernate.LogType;
import com.gather.struts.forms.CopyLogform;
import com.gather.struts.forms.LogForm;
import com.gather.struts.forms.LogTypeForm;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for Log data (i.e. 
 * com.gather.struts.LogForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsLogDelegate {
	
	/**
	 * @author linfeng
	 */
	public static boolean insert(int logType,String orgName,String orgId,String operation,String memo){
		DBConn conn=new DBConn();
		Session session=conn.beginTransaction();
		Log log=new Log();
		log.setLogId(new Integer(getMaxId().intValue()+1));
		LogType myLogType=new LogType();
		myLogType.setLogTypeId(new Integer(logType));
		log.setLogType(myLogType);
		log.setLogTime(new Date());
		log.setUserName(orgName);
		log.setOperation(operation);
		log.setMemo(memo);
		log.setOrgId(orgId);
		try{
		    session.save(log);
		}catch(Exception e){
		    e.printStackTrace();
		    new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: insert 异常："+e.getMessage());
		    conn.endTransaction(false);
			return false;
		}
		conn.endTransaction(true);
		return true;
	}
	/**
	 * @author linfeng
	 * @function 得到最大值
	 */
	
	public static Integer getMaxId(){
		DBConn conn=new DBConn();
		Session session=conn.openSession();
		String hsql="select max(obj.logId) from com.gather.hibernate.Log as obj";
		List list=new ArrayList();
		Integer maxId=new Integer(0);
		try{
		     list.addAll(session.find(hsql));
		     if(list!=null && list.size()>0){
		    	 maxId=(Integer)list.get(0);
		     }
		}catch(Exception e){
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: getMaxId 异常："+e.getMessage());
			e.printStackTrace();
		}finally{
			try{
				if(session!=null) session.close();
			}catch(Exception e){e.printStackTrace();}
		}
		maxId=maxId==null?new Integer(0):maxId;
		return maxId;
	}
	
	/**
	 * 
	 * @param logId
	 * @return
	 * @throws Exception
	 */

	public static LogForm findById(int logId) throws Exception {
		List retVals = new ArrayList();
		DBConn conn = new DBConn();
		Session session = conn.openSession();
		retVals
				.addAll(session
						.find("from com.gather.hibernate.Log as obj1 where obj1.logId='"
								+ logId + "'"));
		session.close();
		ArrayList log_vos = new ArrayList();
		com.gather.struts.forms.LogForm logFormTemp = new com.gather.struts.forms.LogForm();
		for (Iterator it = retVals.iterator(); it.hasNext();) {
			com.gather.hibernate.Log logPersistence = (com.gather.hibernate.Log) it
					.next();
			TranslatorUtil.copyPersistenceToVo(logPersistence, logFormTemp);
		}
		return logFormTemp;
	}


	/*姬怀宝
	 * 新增的删除方法
	 */
	public static boolean remove(Integer[] logids) throws Exception {
		DBConn conn = null;
		Session session = null;
		List findlog = new ArrayList();
		boolean flge = false;
		try {
			conn = new DBConn();
			session = conn.beginTransaction();
			if (logids != null) {
				String hql = "from com.gather.hibernate.Log as log where log.logId in ("
						+ StringUtil.getStrForSqlIN(logids) + ")";
				// System.out.println(StringUtil.getStrForSqlIN(logids));
				// System.out.println(hql);
				findlog.addAll(session.find(hql));//把根据条件的所有的记录保存在FINDLOG LIST 中
				for (Iterator it = findlog.iterator(); it.hasNext();) {
					com.gather.hibernate.Log log = (com.gather.hibernate.Log) it
							.next();
					session.delete(log);//循环删除所有的记录
					session.flush();
				}
				flge = true;
			}
		} catch (Exception e) {
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: remove 异常："+e.getMessage());
			e.printStackTrace();
		} finally {
			if (conn != null)
				conn.endTransaction(flge);
		}
		return flge;
	}

	/**姬怀宝
	 * 新增的日志类型函数
	 * @return
	 * @throws Exception
	 */
	public static List findselectAll() throws Exception {
		List retVals = new ArrayList();
		/*javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		 //    	    TODO: Make adapter get SessionFactory jndi name by ant task argument?
		 net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
		 net.sf.hibernate.Session session = factory.openSession();
		 net.sf.hibernate.Transaction tx = session.beginTransaction();*/
		DBConn conn = new DBConn();
		Session session = conn.openSession();
		try {
			retVals.addAll(session.find("from com.gather.hibernate.LogType"));
			ArrayList log_vos = new ArrayList();
			for (Iterator it = retVals.iterator(); it.hasNext();) {
				LogTypeForm logTypeFormTemp = new com.gather.struts.forms.LogTypeForm();
				com.gather.hibernate.LogType logtypePersistence = (com.gather.hibernate.LogType) it
						.next();
				TranslatorUtil.copyPersistenceToVo(logtypePersistence,
						logTypeFormTemp);
				log_vos.add(logTypeFormTemp);
			}
			retVals = log_vos;
		} catch (Exception e) {
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: findselectAll 异常："+e.getMessage());
			e.printStackTrace();
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return retVals;

	}

	/**
	 * Retrieve all existing com.gather.struts.LogForm objects.
	 *
	 * @exception   Exception   If the com.gather.struts.LogForm objects cannot be retrieved.
	 */
	public static List findAll() throws Exception {
		List retVals = new ArrayList();
		/*javax.naming.InitialContext ctx = new javax.naming.InitialContext();
		 // TODO: Make adapter get SessionFactory jndi name by ant task argument?
		 net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
		 net.sf.hibernate.Session session = factory.openSession();
		 net.sf.hibernate.Transaction tx = session.beginTransaction();*/
		DBConn conn = new DBConn();
		Session session = conn.openSession();
		try {
			retVals.addAll(session.find("from com.gather.hibernate.Log"));
			ArrayList log_vos = new ArrayList();
			for (Iterator it = retVals.iterator(); it.hasNext();) {
				CopyLogform logFormTemp = new com.gather.struts.forms.CopyLogform();
				com.gather.hibernate.Log logPersistence = (com.gather.hibernate.Log) it
						.next();
				TranslatorUtil.copyPersistenceToVo(logPersistence, logFormTemp);
				log_vos.add(logFormTemp);
			}
			retVals = log_vos;
		} catch (Exception e) {
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: findAll 异常："+e.getMessage());
			e.printStackTrace();
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return retVals;

	}



	/**
	 * 新增的选择查询方法
	 * @param copyLogform
	 * @return
	 * @throws Exception
	 */
	public static List select(CopyLogform copyLogform, int offset, int limit, String jigounamehql) {
		List retVals = null;

		DBConn conn = null;
		Session session = null;

		try {
			conn = new DBConn();
			session = conn.openSession();
			StringBuffer hql = new StringBuffer("from Log log where trim(log.orgId) in("+jigounamehql+")");
			StringBuffer where = new StringBuffer("");
			if (copyLogform != null) {
				//日志内容
				if (copyLogform.getOperation() != null
						&& !copyLogform.getOperation().equals(""))
					where.append(" and log.operation like '%"
							+ copyLogform.getOperation() + "%'");
				//日志类型
				if (copyLogform.getLogTypeId() != null
						&& copyLogform.getLogTypeId().intValue() != 0)
					where.append(" and log.logType.logTypeId="
							+ copyLogform.getLogTypeId());
				if(copyLogform.getOrgId()!=null && !copyLogform.getOrgId().equals(""))
				{
					// System.out.println(copyLogform.getOrgId());
					hql=new StringBuffer("from Log log where trim(log.orgId)='"+ copyLogform.getOrgId().trim() +"'");
				}
				//日志时间范围
				String startDate = copyLogform.getStartDate();
				String endDate = copyLogform.getEndDate();
				if (startDate != null && !startDate.equals(""))
					where.append(" and log.logTime>=to_date('" + startDate
							+ "','yyyy-mm-dd')");
				if (endDate != null && !endDate.equals(""))
					where.append(" and log.logTime<=to_date('" + endDate
							+ "','yyyy-mm-dd')");
			}
			hql.append(where.toString());
			//根据条件取相应的记录条数
			Query query = session.createQuery(hql.toString());
			query.setFirstResult(offset);
			query.setMaxResults(limit);

			retVals = query.list();
            // System.out.println("wwwwww"+retVals.size());
			if (retVals != null) {
				ArrayList log_vos = new ArrayList();
				//将查询到的记录存放入List中
				for (Iterator it = retVals.iterator(); it.hasNext();) {
					CopyLogform copyLogform1 = new CopyLogform();
					com.gather.hibernate.Log logPersistence = (com.gather.hibernate.Log) it
							.next();
					TranslatorUtil.copyPersistenceToVo(logPersistence,
							copyLogform1);
					log_vos.add(copyLogform1);
				}
				retVals = log_vos;
			}
		} catch (Exception e) {
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: select 异常："+e.getMessage());
			e.printStackTrace();
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return retVals;
	}

	/**
	 * 新增的选择条件查询方法
	 * @param copyLogform
	 * @return
	 * @throws Exception
	 */
	public static int getRecordCount(CopyLogform copyLogform,String jigounamehql) throws Exception {
		List retVals1 = new ArrayList();
		DBConn conn = null;
		Session session = null;
		//  // System.out.println("hello!");
		try {
			conn = new DBConn();
			session = conn.openSession();
			StringBuffer hql = new StringBuffer("select count(*)from Log log where trim(log.orgId) in("+ jigounamehql + ")");
			StringBuffer where = new StringBuffer("");
			// copyLogform.getLogId()
			if (copyLogform != null) {

				//日志内容
				if (copyLogform.getOperation() != null&& !copyLogform.getOperation().equals(""))
					where.append(" and log.operation like '%"
							+ copyLogform.getOperation() + "%'");
				//日志时间范围
				//依据传过来的参数条件，增加相应的查询条件
				//日志类型
				if (copyLogform.getLogTypeId() != null
						&& copyLogform.getLogTypeId().intValue() != 0)
					where.append(" and log.logType.logTypeId="
							+ copyLogform.getLogTypeId());
				if(copyLogform.getOrgId()!=null && !copyLogform.getOrgId().equals(""))
				{
					hql=new StringBuffer("select count(*)from Log log where trim(log.orgId)='"+copyLogform.getOrgId().trim()+"'");
				}
				String startDate = copyLogform.getStartDate();
				String endDate = copyLogform.getEndDate();
				if (startDate != null && !startDate.equals(""))
					where.append(" and log.logTime>=to_date('" + startDate
							+ "','yyyy-mm-dd')");
				if (endDate != null && !endDate.equals(""))
					where.append(" and log.logTime<=to_date('" + endDate
							+ "','yyyy-mm-dd')");
			}
			hql.append(where.toString());
			//根据条件取相应的记录条数
			Query query = session.createQuery(hql.toString());
			retVals1 = query.list();
			if (retVals1 != null) {
				// System.out.println("duoshao"+Integer.parseInt(retVals1.get(0).toString()));
				return Integer.parseInt(retVals1.get(0).toString());
			}
		} catch (Exception e) {
			new com.gather.common.Log(StrutsLogDelegate.class).info(":::class:StrutsLogDelegate --  method: getRecordCount 异常："+e.getMessage());
			e.printStackTrace();
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return 0;
	}


}
