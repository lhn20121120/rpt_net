
package com.gather.adapter;

import java.util.ArrayList;
import java.util.List;

import net.sf.hibernate.Session;

import com.gather.common.Log;
import com.gather.common.StringUtil;
import com.gather.dao.DBConn;
import com.gather.hibernate.RepRangeDownLog;
import com.gather.hibernate.RepRangeDownLogPK;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for RepRangeDownLog data (i.e. 
 * com.gather.struts.forms.RepRangeDownLogForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */

public class StrutsRepRangeDownLogDelegate {
    
	public static boolean  create (com.gather.struts.forms.RepRangeDownLogForm repRangeDownLogForm) throws Exception {
	    com.gather.hibernate.RepRangeDownLog repRangeDownLogPersistence = new com.gather.hibernate.RepRangeDownLog ();
	    try{
	    TranslatorUtil.copyVoToPersistence(repRangeDownLogPersistence, repRangeDownLogForm);
	    DBConn conn=new DBConn();
	    Session session=conn.beginTransaction();
	    session.save(repRangeDownLogPersistence);
	    conn.endTransaction(true);
	    return true;
	    }catch(Exception e)
	    {
	    	new Log(StrutsRepRangeDownLogDelegate.class).info(":::class:StrutsRepRangeDownLogDelegate --  method: create 异常："+e.getMessage());
	    	throw e;
	    }
	}
		
	/**
	 * @author linfeng
	 * @function 得到机构对应的下载记录的数据
	 * @param orgIds
	 * @return RepRangeDownLog list
	 */
     public static List getInfoByOrgIds(String[] orgIds){
    	 if(orgIds==null) return null;
    	 DBConn conn=new DBConn();
    	 Session session=conn.openSession();
    	 String hsql="from com.gather.hibernate.RepRangeDownLog as obj where obj.comp_id.orgId in("+
    	              StringUtil.getStrForSqlIN(orgIds)+")";
    	 // System.out.println("repDownLoadLog hsql is: "+hsql);
    	 List list=new ArrayList();
    	 try{
    	      list.addAll(session.find(hsql));
    	      return list;
    	 }catch(Exception e){
    		 new Log(StrutsRepRangeDownLogDelegate.class).info(":::class:StrutsRepRangeDownLogDelegate --  method: getInfoByOrgIds 异常："+e.getMessage());
    		 e.printStackTrace();}
    	 finally{
    		 try{
    			if(session!=null) session.close();
    		 }catch(Exception e){e.printStackTrace();}
    	 }
    	 return null;
     }
     
     public static List getInfoByOrgId(String orgId){
    	 if(orgId==null) return null;
    	 DBConn conn=new DBConn();
    	 Session session=conn.openSession();
    	 String hsql="from com.gather.hibernate.RepRangeDownLog as obj where obj.comp_id.orgId='"+orgId+"'";
    	 // System.out.println("getInfoByOrgId hsql is: "+hsql);
    	 List list=new ArrayList();
    	 try{
    	      list.addAll(session.find(hsql));
    	      return list;
    	 }catch(Exception e){
    		 new Log(StrutsRepRangeDownLogDelegate.class).info(":::class:StrutsRepRangeDownLogDelegate --  method: getInfoByOrgId 异常："+e.getMessage());
    		 e.printStackTrace();}
    	 finally{
    		 try{
    			if(session!=null) session.close();
    		 }catch(Exception e){e.printStackTrace();}
    	 }
    	 return null;
     }
     
     /**
      * @author linfeng
      * @function 更新状态为初始化值 0
      * @param repId  报表id
      * @param versionId 版本
      * @param orgId 机构id
      * @return boolean 是否成功
      */
     public static boolean updateState(String repId,String versionId,String orgId){
    	 // System.out.println("-------updateState be executed--------");
    	 if(repId==null || versionId==null || orgId==null) return false;
    	 DBConn conn=new DBConn();
    	 Session session=conn.beginTransaction();
    	 String hsql="from com.gather.hibernate.RepRangeDownLog as obj where obj.comp_id.orgId='"+orgId+"' "+
    	              "and obj.comp_id.childRepId='"+repId+"' "+
    	              "and obj.comp_id.versionId='"+versionId+"'";
    	  List list=new ArrayList();
    	  try{
               list.addAll(session.find(hsql));
    	  if(list!=null && list.size()>0){
    		  RepRangeDownLog repLog=(RepRangeDownLog)list.get(0);
    		  repLog.setState(new Integer(0));
    		  session.update(repLog);
    		  //session.flush();
    	  }
    	  }catch(Exception e){
    		  new Log(StrutsRepRangeDownLogDelegate.class).info(":::class:StrutsRepRangeDownLogDelegate --  method: updateState 异常："+e.getMessage());
    		  e.printStackTrace();
    		  conn.endTransaction(false);
    		  return false;
    		  }
    	 conn.endTransaction(true);
    	 return true;
     }
     
     public static boolean insertOne(String repId,String versionId,String orgId,Integer state){
    	 //// System.out.println("-------insertOne will be executed--------");
    	 //// System.out.println("repId is: "+repId+" versionId is: "+versionId+" orgId is: "+orgId+"state is: "+state);
    	 RepRangeDownLog repLog=new RepRangeDownLog();
    	 RepRangeDownLogPK pk=new RepRangeDownLogPK();
    	 repLog.setComp_id(pk);
    	 repLog.getComp_id().setChildRepId(repId);
    	 repLog.getComp_id().setOrgId(orgId);
    	 repLog.getComp_id().setVersionId(versionId);
    	 repLog.setState(state);
    	 
    	 DBConn conn=new DBConn();
    	 Session session=conn.beginTransaction();
    	 try{
    	     session.save(repLog);
    	     //session.flush();
    	 }catch(Exception e){
    		 new Log(StrutsRepRangeDownLogDelegate.class).info(":::class:StrutsRepRangeDownLogDelegate --  method:insertOne 异常："+e.getMessage());
    		 e.printStackTrace();
    		 conn.endTransaction(false);
    		 return false;
    	 }
    	 conn.endTransaction(true);
    	 return true;
     }
}
