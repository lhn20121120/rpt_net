
package com.gather.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Session;

import com.gather.common.Log;
import com.gather.dao.DBConn;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for DataValidateInfo data (i.e. 
 * com.gather.struts.DataValidateInfoForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsDataValidateInfoDelegate {


   /**
    * Create a new com.gather.struts.DataValidateInfoForm object and persist (i.e. insert) it.
    *
    * @param   dataValidateInfoForm   The object containing the data for the new com.gather.struts.DataValidateInfoForm object
    * @exception   Exception   If the new com.gather.struts.DataValidateInfoForm object cannot be created or persisted.
    */
   public static boolean create (com.gather.struts.forms.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      com.gather.hibernate.DataValidateInfo dataValidateInfoPersistence = new com.gather.hibernate.DataValidateInfo ();
      try{
      TranslatorUtil.copyVoToPersistence(dataValidateInfoPersistence, dataValidateInfoForm);
      DBConn conn=new DBConn();
      Session session=conn.beginTransaction();
      session.save(dataValidateInfoPersistence);
      session.flush();
      conn.endTransaction(true);
      return true;
      }
      catch(Exception e)
      {
    	  new Log(StrutsDataValidateInfoDelegate.class).info(":::class:StrutsDataValidateInfoDelegate --  method: create 异常："+e.getMessage());
    	  throw e;
      }
  }


   /**
    * Retrieve all existing com.gather.struts.DataValidateInfoForm objects.
    *
    * @exception   Exception   If the com.gather.struts.DataValidateInfoForm objects cannot be retrieved.
    */
   public static List findAll () throws Exception {
      List retVals = new ArrayList();
      DBConn conn=new DBConn();
      net.sf.hibernate.Session session = conn.beginTransaction();
      retVals.addAll(session.find("from com.gather.hibernate.DataValidateInfo"));
      conn.endTransaction(true);
      ArrayList dataValidateInfo_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.gather.struts.forms.DataValidateInfoForm dataValidateInfoFormTemp = new com.gather.struts.forms.DataValidateInfoForm();
         com.gather.hibernate.DataValidateInfo dataValidateInfoPersistence = (com.gather.hibernate.DataValidateInfo)it.next();
         TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoFormTemp);
         dataValidateInfo_vos.add(dataValidateInfoFormTemp);
      }
      retVals = dataValidateInfo_vos;
      return retVals;
   }
 /**
  * 姬怀宝
  * 新增的查找
  * 方法
  */
   public static List findAll (Integer repid){
	      List retVals = new ArrayList();
	  	DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();
	      retVals.addAll(session.find("from com.gather.hibernate.DataValidateInfo datavalidateInfo where datavalidateInfo.comp_id.repOutId="+repid ));
	      ArrayList dataValidateInfo_vos = new ArrayList();
	      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
	         com.gather.struts.forms.Report_errorform report_errorform = new com.gather.struts.forms.Report_errorform();
	         com.gather.hibernate.DataValidateInfo dataValidateInfoPersistence = (com.gather.hibernate.DataValidateInfo)it.next();
	         TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, report_errorform);
	         dataValidateInfo_vos.add( report_errorform);
	      }
	      retVals = dataValidateInfo_vos;	      
	   }catch(Exception e)
	   {
		   new Log(StrutsDataValidateInfoDelegate.class).info(":::class:StrutsDataValidateInfoDelegate --  method: findAll 异常："+e.getMessage());
		   e.printStackTrace();
	   }finally{
		   try{
			   if(session!=null) session.close();
		   }catch(Exception e){
			   e.printStackTrace();
		   }
	   }
	   return retVals;
   }
}
