
package com.gather.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Session;

import com.gather.common.Log;
import com.gather.dao.DBConn;
import com.gather.hibernate.MRepFreq;
import com.gather.struts.forms.MRepFreqForm;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MRepFreq data (i.e. 
 * com.gather.struts.forms.MRepFreqForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMRepFreqDelegate {
 /***
  * 姬怀宝
  * 新增的查找频度函数
  * @return
  * @throws Exception
  */
	 public static MRepFreqForm  findById(Integer id)
	    {
	    	List retVals=new ArrayList();
	    	Session session=null;
	    	try{
	    		DBConn conn=new DBConn();
	    		session=conn.openSession();
	    		retVals.addAll(session.find("from com.gather.hibernate.MRepFreq as mrepFreq where mrepFreq.repFreqId="+id));
	    	    conn.closeSession();
	    	 if(retVals==null ||retVals.size()<1)return null;
	    	 MRepFreqForm  mrepFreqForm =new MRepFreqForm ();
	    	 MRepFreq mrepFreq=(MRepFreq)retVals.get(0);
	    	 TranslatorUtil.copyPersistenceToVo(mrepFreq,mrepFreqForm);
	    	 return mrepFreqForm;
	    	}catch(Exception e)
	    	{
	    		new Log(StrutsMRepFreqDelegate.class).info(":::class:StrutsMRepFreqDelegate --  method:findById 异常："+e.getMessage());
	    		e.printStackTrace();
	    	}
	    	return null;
	    } 

	
	 /*
	     * @author linfeng
	     * @function 返回系统所有频率数据
	     * @return List (MRepFreqForm)
	     */
		  public static List findAll (){
		      List retVals = new ArrayList();
		      ArrayList org_vos=null;
		      DBConn conn=new DBConn();
		      Session session=conn.openSession();
		      String hsql="from com.gather.hibernate.MRepFreq as obj";
		      try{
		              retVals.addAll(session.find(hsql));
		              session.close();
		              org_vos = new ArrayList();
		      
		      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
		    	  MRepFreqForm MRepFreqTemp = new MRepFreqForm();
		    	  MRepFreq MRepFreqPersistence = (MRepFreq)it.next();
		         TranslatorUtil.copyPersistenceToVo(MRepFreqPersistence, MRepFreqTemp);
		         org_vos.add(MRepFreqTemp);
		      }
		      }catch(Exception e){
		    	  new Log(StrutsMRepFreqDelegate.class).info(":::class:StrutsMRepFreqDelegate --  method:findAll  异常："+e.getMessage());
		    	  e.printStackTrace();
		      }finally{
		    	  try{
		    		  if(session!=null) session.close();
		    	  }catch(Exception e){e.printStackTrace();}
		      }
		      return org_vos;
		   }
	
   /**
    * Create a new com.gather.struts.forms.MRepFreqForm object and persist (i.e. insert) it.
    *
    * @param   mRepFreqForm   The object containing the data for the new com.gather.struts.forms.MRepFreqForm object
    * @exception   Exception   If the new com.gather.struts.forms.MRepFreqForm object cannot be created or persisted.
    */
   public static boolean create (com.gather.struts.forms.MRepFreqForm mRepFreqForm) throws Exception {
     
      com.gather.hibernate.MRepFreq mRepFreqPersistence = new com.gather.hibernate.MRepFreq ();
      try{
      TranslatorUtil.copyVoToPersistence(mRepFreqPersistence, mRepFreqForm);
      DBConn conn=new DBConn();
      Session session=conn.beginTransaction();
      session.save(mRepFreqPersistence);
      conn.endTransaction(true);
      return true;
      }catch(Exception e)
      {
    	  new Log(StrutsMRepFreqDelegate.class).info(":::class:StrutsMRepFreqDelegate --  method: create  异常："+e.getMessage());
    	  throw e;
      }
   }
}
