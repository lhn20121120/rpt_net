
package com.cbrc.smis.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;

import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.form.MChildReportForm;
import com.cbrc.smis.form.MMainRepForm;
import com.cbrc.smis.hibernate.MChildReport;
import com.cbrc.smis.hibernate.MMainRep;
import com.cbrc.smis.util.FitechException;
/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MMainRep data (i.e. 
 * com.cbrc.smis.form.MMainRepForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMMainRepDelegate {

	private static FitechException log=new FitechException(StrutsMMainRepDelegate.class);
	
	/**
	 * 保存模板信息<br>
	 * 将报表模板信息入库时，需向“主报表”、“子报表”和“单元格项表”向数据
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param mMainRepForm MMainRepForm 主报表Form
	 * @param mChildRepForm MChildRepForm 子报表Form
	 * @param cols List 清单式PDF报表模板中的可输入列的列表
	 * @return boolean 保存成功，返回true;否则，返回false
	 */
	public static boolean saveEspPatch(MMainRepForm mMainRepForm,MChildReportForm mChildRepForm,List cols){
		boolean result=false;
		
		if(mMainRepForm==null || mChildRepForm==null || cols==null) return result;
		
		DBConn conn=null;
		Session session=null;
		
		try{
			MMainRep mMainRep=new MMainRep();
			TranslatorUtil.copyVoToPersistence(mMainRep,mMainRepForm);
			
			conn=new DBConn();
			session=conn.beginTransaction();
			
			if(insert(session,mMainRepForm)==true && mMainRepForm.getRepId()!=null){
				mChildRepForm.setRepId(mMainRepForm.getRepId());
				MChildReport mChildReport=StrutsMChildReportDelegate.insert(session,mChildRepForm);
				if(mChildReport!=null){	
					if(StrutsListingColsDelegate.insertpatch(session,cols,mChildReport)==true){
						result=true;
					}
				}
			}
		}catch(HibernateException he){
			log.printStackTrace(he);
			result=false;
		}catch(Exception e){
			log.printStackTrace(e);
			result=false;
		}finally{
			if(conn!=null) conn.endTransaction(result);
		}
		
		return result;
	}
	
	/**
	 * 保存模板信息<br>
	 * 将报表模板信息入库时，需向“主报表”、“子报表”和“单元格项表”插入数据
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param mMainRepForm MMainRepForm 主报表Form
	 * @param mChildRepForm MChildRepForm 子报表Form
	 * @param cells List 报表中的可输入域列表
	 * @return boolean 保存成功，返回true;否则，返回false
	 */
	public static boolean savePatch(MMainRepForm mMainRepForm,MChildReportForm mChildRepForm,List cells){
		boolean result=false;
		
		if(mMainRepForm==null || mChildRepForm==null || cells==null) return result;
		
		DBConn conn=null;
		Session session=null;
		
		try{
			MMainRep mMainRep=new MMainRep();
			TranslatorUtil.copyVoToPersistence(mMainRep,mMainRepForm);
			
			conn=new DBConn();
			session=conn.beginTransaction();
			
			if(insert(session,mMainRepForm)==true && mMainRepForm.getRepId()!=null){
				mChildRepForm.setRepId(mMainRepForm.getRepId());
				MChildReport mChildReport=StrutsMChildReportDelegate.insert(session,mChildRepForm);
				if(mChildReport!=null){	
					if(StrutsMCellDelegate.insertPatch(session,cells,mChildReport)==true){
						result=true;
					}
				}
			}
		}catch(HibernateException he){
			log.printStackTrace(he);
			result=false;
		}catch(Exception e){
			log.printStackTrace(e);
			result=false;
		}finally{
			if(conn!=null) conn.endTransaction(result);
		}
		
		return result;
	}
	
	/**
	 * 新增主报信息
	 * 
	 * @author rds
	 * @serialData 2005-12-07
	 * 
	 * @param session Session 连接会话
	 * @param mMainRepForm MMainRepForm
	 * @return boolean 新增成功，返回true；否则，返回false
	 */
	private static boolean insert(Session session,MMainRepForm mMainRepForm){
		boolean resInsert=false;
		
		if(session==null || mMainRepForm==null) return resInsert;
		
		try{
			MMainRep mMainRep=new MMainRep();
			
			TranslatorUtil.copyVoToPersistence(mMainRep,mMainRepForm);
			session.save(mMainRep);
			session.flush();
			
			TranslatorUtil.copyPersistenceToVo(mMainRep,mMainRepForm);
			
			resInsert=true;
		}catch(HibernateException he){
			log.printStackTrace(he);
		}catch(Exception e){
			log.printStackTrace(e);
		}
		
		return resInsert;
	}
   /**
    * Create a new com.cbrc.smis.form.MMainRepForm object and persist (i.e. insert) it.
    *
    * @param   mMainRepForm   The object containing the data for the new com.cbrc.smis.form.MMainRepForm object
    * @exception   Exception   If the new com.cbrc.smis.form.MMainRepForm object cannot be created or persisted.
    */
   public static com.cbrc.smis.form.MMainRepForm create (com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = new com.cbrc.smis.hibernate.MMainRep ();
      TranslatorUtil.copyVoToPersistence(mMainRepPersistence, mMainRepForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
// TODO error?: mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)session.save(mMainRepPersistence);
session.save(mMainRepPersistence);
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(mMainRepPersistence, mMainRepForm);
      return mMainRepForm;
   }

   /**
    * Update (i.e. persist) an existing com.cbrc.smis.form.MMainRepForm object.
    *
    * @param   mMainRepForm   The com.cbrc.smis.form.MMainRepForm object containing the data to be updated
    * @exception   Exception   If the com.cbrc.smis.form.MMainRepForm object cannot be updated/persisted.
    */
   public static com.cbrc.smis.form.MMainRepForm update (com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = new com.cbrc.smis.hibernate.MMainRep ();
      TranslatorUtil.copyVoToPersistence(mMainRepPersistence, mMainRepForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
session.update(mMainRepPersistence);
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(mMainRepPersistence, mMainRepForm);
      return mMainRepForm;
   }

   /**
    * Retrieve an existing com.cbrc.smis.form.MMainRepForm object for editing.
    *
    * @param   mMainRepForm   The com.cbrc.smis.form.MMainRepForm object containing the data used to retrieve the object (i.e. the primary key info).
    * @exception   Exception   If the com.cbrc.smis.form.MMainRepForm object cannot be retrieved.
    */
   public static com.cbrc.smis.form.MMainRepForm edit (com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = new com.cbrc.smis.hibernate.MMainRep ();
      TranslatorUtil.copyVoToPersistence(mMainRepPersistence, mMainRepForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)session.load(com.cbrc.smis.hibernate.MMainRep.class, mMainRepPersistence.getRepId());
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(mMainRepPersistence, mMainRepForm);
      return mMainRepForm;
   }

   /**
    * Remove (delete) an existing com.cbrc.smis.form.MMainRepForm object.
    *
    * @param   mMainRepForm   The com.cbrc.smis.form.MMainRepForm object containing the data to be deleted.
    * @exception   Exception   If the com.cbrc.smis.form.MMainRepForm object cannot be removed.
    */  
   public static void remove (com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = new com.cbrc.smis.hibernate.MMainRep ();
      TranslatorUtil.copyVoToPersistence(mMainRepPersistence, mMainRepForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
// TODO: is this really needed?
mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)session.load(com.cbrc.smis.hibernate.MMainRep.class, mMainRepPersistence.getRepId());
session.delete(mMainRepPersistence);
tx.commit();
session.close();
   }

   /**
    * Retrieve all existing com.cbrc.smis.form.MMainRepForm objects.
    *
    * @exception   Exception   If the com.cbrc.smis.form.MMainRepForm objects cannot be retrieved.
    */
   public static List findAll () throws Exception {
      List retVals = new ArrayList();
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
retVals.addAll(session.find("from com.cbrc.smis.hibernate.MMainRep"));
tx.commit();
session.close();
      ArrayList mMainRep_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.MMainRepForm mMainRepFormTemp = new com.cbrc.smis.form.MMainRepForm();
         com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)it.next();
         TranslatorUtil.copyPersistenceToVo(mMainRepPersistence, mMainRepFormTemp);
         mMainRep_vos.add(mMainRepFormTemp);
      }
      retVals = mMainRep_vos;
      return retVals;
   }

   /**
    * Retrieve a set of existing com.cbrc.smis.form.MMainRepForm objects for editing.
    *
    * @param   mMainRepForm   The com.cbrc.smis.form.MMainRepForm object containing the data used to retrieve the objects (i.e. the criteria for the retrieval).
    * @exception   Exception   If the com.cbrc.smis.form.MMainRepForm objects cannot be retrieved.
    */
   public static List select (com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      List retVals = new ArrayList();
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
retVals.addAll(session.find("from com.cbrc.smis.hibernate.MMainRep as obj1 where obj1.repCnName='" + mMainRepForm.getRepCnName() + "'"));
retVals.addAll(session.find("from com.cbrc.smis.hibernate.MMainRep as obj1 where obj1.repEnName='" + mMainRepForm.getRepEnName() + "'"));
tx.commit();
session.close();
      ArrayList mMainRep_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.MMainRepForm mMainRepFormTemp = new com.cbrc.smis.form.MMainRepForm();
         com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)it.next();
         TranslatorUtil.copyPersistenceToVo(mMainRepPersistence, mMainRepFormTemp);
         mMainRep_vos.add(mMainRepFormTemp);
      }
      retVals = mMainRep_vos;
      return retVals;
   }

   /**
    * This method will return all objects referenced by MCurUnit
    */
   public static List getMCurUnit(com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)session.load(com.cbrc.smis.hibernate.MMainRep.class, mMainRepPersistence.getRepId());
tx.commit();
session.close();
retVals.add(mMainRepPersistence.getMCurUnit());
      ArrayList CUR_UNIT_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.MCurUnitForm CUR_UNIT_Temp = new com.cbrc.smis.form.MCurUnitForm();
         com.cbrc.smis.hibernate.MCurUnit CUR_UNIT_PO = (com.cbrc.smis.hibernate.MCurUnit)it.next();
         TranslatorUtil.copyPersistenceToVo(CUR_UNIT_PO, CUR_UNIT_Temp);
         CUR_UNIT_vos.add(CUR_UNIT_Temp);
      }
      retVals = CUR_UNIT_vos;
      return retVals;
    }
   /**
    * This method will return all objects referenced by MRepType
    */
   public static List getMRepType(com.cbrc.smis.form.MMainRepForm mMainRepForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.smis.hibernate.MMainRep mMainRepPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
mMainRepPersistence = (com.cbrc.smis.hibernate.MMainRep)session.load(com.cbrc.smis.hibernate.MMainRep.class, mMainRepPersistence.getRepId());
tx.commit();
session.close();
retVals.add(mMainRepPersistence.getMRepType());
      ArrayList REP_TYPE_ID_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.MRepTypeForm REP_TYPE_ID_Temp = new com.cbrc.smis.form.MRepTypeForm();
         com.cbrc.smis.hibernate.MRepType REP_TYPE_ID_PO = (com.cbrc.smis.hibernate.MRepType)it.next();
         TranslatorUtil.copyPersistenceToVo(REP_TYPE_ID_PO, REP_TYPE_ID_Temp);
         REP_TYPE_ID_vos.add(REP_TYPE_ID_Temp);
      }
      retVals = REP_TYPE_ID_vos;
      return retVals;
    }
}
