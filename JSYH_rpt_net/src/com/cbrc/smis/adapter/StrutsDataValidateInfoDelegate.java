
package com.cbrc.smis.adapter;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.smis.common.Config;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.form.DataValidateInfoForm;
import com.cbrc.smis.form.ReportInParticularForm;
import com.cbrc.smis.hibernate.DataValidateInfo;
import com.cbrc.smis.other.Expression;
import com.cbrc.smis.util.FitechException;
/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for DataValidateInfo data (i.e. 
 * com.cbrc.smis.form.DataValidateInfoForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsDataValidateInfoDelegate {
	private static FitechException log=new FitechException(StrutsDataValidateInfoDelegate.class);
	
	/**
	 * 根据实际数据报表Id和校验类别获得校验信息列表
	 * 
	 * @author rds 
	 * @date 2006-01-02 23:14
	 * 
	 * @param repInId Integer 实际数据表ID
	 * @param validateTypeId 校验类别ID
	 * @return List
	 */
	public static List find(Integer repInId,Integer validateTypeId){
		List resList=null;
		StringBuffer buffer=new StringBuffer();
		if(repInId==null && validateTypeId==null) return resList;
		
		if(validateTypeId.intValue()==1){
			buffer.append(" in ("+Expression.FLAG_BL+","+Expression.FLAG_KP+")");
		}
		else{
			buffer.append(" in ("+Expression.FLAG_BL+")");
		}
		DBConn conn=null;
		
		try{
			conn=new DBConn();
			
			String hql="from DataValidateInfo dvi where dvi.comp_id.repInId=" +
				repInId + " and dvi.comp_id.validateTypeId=" + validateTypeId;
			
			List list=conn.openSession().find(hql);
			
			if(list!=null && list.size()>0){
				resList=new ArrayList();
				DataValidateInfo dataValidateInfo=null;
				for(int i=0;i<list.size();i++){
					dataValidateInfo=(DataValidateInfo)list.get(i);
					DataValidateInfoForm form=new DataValidateInfoForm();
					TranslatorUtil.copyPersistenceToVo(dataValidateInfo,form);
					resList.add(form);
				}
			}
		}catch(HibernateException he){
			resList=null;
			log.printStackTrace(he);
		}catch(Exception e){
			resList=null;
			log.printStackTrace(e);
		}finally{
			if(conn!=null) conn.closeSession();
		}
		
		return resList;
	}
	
	/**
	 * 根据实际数据报表Id和校验类别获得校验信息列表
	 * 
	 * @author rds 
	 * @date 2006-01-02 23:14
	 * 
	 * @param repInId Integer 实际数据表ID
	 * @param validateTypeId 校验类别ID
	 * @return List
	 */
	public static List find(Integer repInId){
		List resList=null;
		StringBuffer buffer=new StringBuffer();
		if(repInId==null) return resList;
		Session session = null;
		DBConn conn=null;
		Connection connection = null;
		Statement state = null;
		ResultSet rset = null;
		
		try{
			conn=new DBConn();

			String hql="from DataValidateInfo dvi where dvi.comp_id.repInId=" +	repInId;
			session = conn.openSession();
			connection = session.connection();
			state = connection.createStatement();
			List list = session.find(hql);
			
			if(list!=null && list.size()>0){
				resList=new ArrayList();
				DataValidateInfo dataValidateInfo=null;
				for(int i=0;i<list.size();i++){
					dataValidateInfo=(DataValidateInfo)list.get(i);
					
					/***
					 * -------20130107为增加BARIII报表校验公式所作增量修改          卞以刚  -----------------开始
					 */
					String sourceValue = "";
					try {
						//将带有if min max的校验公式转换为数值
						sourceValue = formuValue(rset, state, dataValidateInfo.getSourceValue());
					} catch (Exception e) {
						sourceValue = e.getMessage().substring(e.getMessage().indexOf(":")+1);
						e.printStackTrace();
					}
					
					String targetValue = "";
					try {
						//将带有if min max的校验公式转换为数值
						targetValue = formuValue(rset, state, dataValidateInfo.getTargetValue());
					} catch (Exception e) {
						// TODO Auto-generated catch block
						targetValue = e.getMessage().substring(e.getMessage().indexOf(":")+1);
						e.printStackTrace();
					}
					if(sourceValue!=null && !sourceValue.equals(""))//放入对象
						dataValidateInfo.setSourceValue(sourceValue);
					if(targetValue!=null && !targetValue.equals(""))//放入对象
						dataValidateInfo.setTargetValue(targetValue);
					/***
					 * -------20130107为增加BARIII报表校验公式所作增量修改          卞以刚  -----------------结束
					 */
					
					DataValidateInfoForm form=new DataValidateInfoForm();
					TranslatorUtil.copyPersistenceToVo(dataValidateInfo,form);
					resList.add(form);
				}
			}
		}catch(HibernateException he){
			resList=null;
			log.printStackTrace(he);
		}catch(Exception e){
			resList=null;
			log.printStackTrace(e);
		}finally{
			try {
				if(rset!=null){
					rset.close();
					rset = null;
				}
				if(state!=null){
					state.close();
					state = null;
				}
				if(connection!=null && !connection.isClosed()){
					connection.close();
					connection = null;
				}
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
			if(conn!=null) conn.closeSession();
		}
		
		return resList;
	}
	
	/***
	 * 20130107为增加BARIII报表校验公式所作增量修改
	 * 
	 * 将转换后带有case when的校验公式（说明该公式含有if min max表达式）
	 * 经过数据库查询，得出相应值
	 * @param set java.sql.ResultSet
	 * @param state java.sql.Statement
	 * @param sourceValue 传入的校验公式
	 * @return 返回相应的值
	 * @throws Exception
	 * @author 卞以刚
	 */
	public static String formuValue(ResultSet set,Statement state,String sourceValue) throws Exception{
		if(sourceValue!=null && !sourceValue.equals("")){//非空判断
			if(sourceValue.indexOf("case when")>=0){
				String sourceSql = "";
				if(Config.DB_SERVER_TYPE.equals("oracle")){//拼接sql
					sourceSql = "SELECT "+sourceValue+" FROM DUAL";
				}
				if(Config.DB_SERVER_TYPE.equals("sqlserver")){//拼接SQL
					sourceSql = "SELECT "+sourceValue;
				}
				set = state.executeQuery(sourceSql);//查询
				String value = "";
				if(set.next()){
					value = set.getObject(1).toString();//取值
					return value;//返回
				}
			}else
				return sourceValue;
		}
		
		return null;
	}
	
   /**
    * Create a new com.cbrc.smis.form.DataValidateInfoForm object and persist (i.e. insert) it.
    *
    * @param   dataValidateInfoForm   The object containing the data for the new com.cbrc.smis.form.DataValidateInfoForm object
    * @exception   Exception   If the new com.cbrc.smis.form.DataValidateInfoForm object cannot be created or persisted.
    */
   public static com.cbrc.smis.form.DataValidateInfoForm create (com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = new com.cbrc.smis.hibernate.DataValidateInfo ();
      TranslatorUtil.copyVoToPersistence(dataValidateInfoPersistence, dataValidateInfoForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
// TODO error?: dataValidateInfoPersistence = (com.cbrc.smis.hibernate.DataValidateInfo)session.save(dataValidateInfoPersistence);
session.save(dataValidateInfoPersistence);
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoForm);
      return dataValidateInfoForm;
   }

   /**
    * Update (i.e. persist) an existing com.cbrc.smis.form.DataValidateInfoForm object.
    *
    * @param   dataValidateInfoForm   The com.cbrc.smis.form.DataValidateInfoForm object containing the data to be updated
    * @exception   Exception   If the com.cbrc.smis.form.DataValidateInfoForm object cannot be updated/persisted.
    */
   public static com.cbrc.smis.form.DataValidateInfoForm update (com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = new com.cbrc.smis.hibernate.DataValidateInfo ();
      TranslatorUtil.copyVoToPersistence(dataValidateInfoPersistence, dataValidateInfoForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
session.update(dataValidateInfoPersistence);
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoForm);
      return dataValidateInfoForm;
   }

   /**
    * Retrieve an existing com.cbrc.smis.form.DataValidateInfoForm object for editing.
    *
    * @param   dataValidateInfoForm   The com.cbrc.smis.form.DataValidateInfoForm object containing the data used to retrieve the object (i.e. the primary key info).
    * @exception   Exception   If the com.cbrc.smis.form.DataValidateInfoForm object cannot be retrieved.
    */
   public static com.cbrc.smis.form.DataValidateInfoForm edit (com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = new com.cbrc.smis.hibernate.DataValidateInfo ();
      TranslatorUtil.copyVoToPersistence(dataValidateInfoPersistence, dataValidateInfoForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
tx.commit();
session.close();
      TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoForm);
      return dataValidateInfoForm;
   }

   /**
    * Remove (delete) an existing com.cbrc.smis.form.DataValidateInfoForm object.
    *
    * @param   dataValidateInfoForm   The com.cbrc.smis.form.DataValidateInfoForm object containing the data to be deleted.
    * @exception   Exception   If the com.cbrc.smis.form.DataValidateInfoForm object cannot be removed.
    */  
   public static void remove (com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = new com.cbrc.smis.hibernate.DataValidateInfo ();
      TranslatorUtil.copyVoToPersistence(dataValidateInfoPersistence, dataValidateInfoForm);
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
// TODO: is this really needed?
session.delete(dataValidateInfoPersistence);
tx.commit();
session.close();
   }

   /**
    * Retrieve all existing com.cbrc.smis.form.DataValidateInfoForm objects.
    *
    * @exception   Exception   If the com.cbrc.smis.form.DataValidateInfoForm objects cannot be retrieved.
    */
   public static List findAll () throws Exception {
      List retVals = new ArrayList();
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
retVals.addAll(session.find("from com.cbrc.smis.hibernate.DataValidateInfo"));
tx.commit();
session.close();
      ArrayList dataValidateInfo_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoFormTemp = new com.cbrc.smis.form.DataValidateInfoForm();
         com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = (com.cbrc.smis.hibernate.DataValidateInfo)it.next();
         TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoFormTemp);
         dataValidateInfo_vos.add(dataValidateInfoFormTemp);
      }
      retVals = dataValidateInfo_vos;
      return retVals;
   }

   /**
    * Retrieve a set of existing com.cbrc.smis.form.DataValidateInfoForm objects for editing.
    *
    * @param   dataValidateInfoForm   The com.cbrc.smis.form.DataValidateInfoForm object containing the data used to retrieve the objects (i.e. the criteria for the retrieval).
    * @exception   Exception   If the com.cbrc.smis.form.DataValidateInfoForm objects cannot be retrieved.
    */
   public static List select (com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      List retVals = new ArrayList();
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
retVals.addAll(session.find("from com.cbrc.smis.hibernate.DataValidateInfo as obj1 where obj1.result='" + dataValidateInfoForm.getResult() + "'"));
tx.commit();
session.close();
      ArrayList dataValidateInfo_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoFormTemp = new com.cbrc.smis.form.DataValidateInfoForm();
         com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = (com.cbrc.smis.hibernate.DataValidateInfo)it.next();
         TranslatorUtil.copyPersistenceToVo(dataValidateInfoPersistence, dataValidateInfoFormTemp);
         dataValidateInfo_vos.add(dataValidateInfoFormTemp);
      }
      retVals = dataValidateInfo_vos;
      return retVals;
   }

   /**
    * This method will return all objects referenced by ValidateType
    */
   public static List getValidateType(com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
tx.commit();
session.close();
retVals.add(dataValidateInfoPersistence.getValidateType());
      ArrayList VALIDATE_TYPE_ID_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.ValidateTypeForm VALIDATE_TYPE_ID_Temp = new com.cbrc.smis.form.ValidateTypeForm();
         com.cbrc.smis.hibernate.ValidateType VALIDATE_TYPE_ID_PO = (com.cbrc.smis.hibernate.ValidateType)it.next();
         TranslatorUtil.copyPersistenceToVo(VALIDATE_TYPE_ID_PO, VALIDATE_TYPE_ID_Temp);
         VALIDATE_TYPE_ID_vos.add(VALIDATE_TYPE_ID_Temp);
      }
      retVals = VALIDATE_TYPE_ID_vos;
      return retVals;
    }
   /**
    * This method will return all objects referenced by ReportIn
    */
   public static List getReportIn(com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
tx.commit();
session.close();
retVals.add(dataValidateInfoPersistence.getReportIn());
      ArrayList REP_IN_ID_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.ReportInForm REP_IN_ID_Temp = new com.cbrc.smis.form.ReportInForm();
         com.cbrc.smis.hibernate.ReportIn REP_IN_ID_PO = (com.cbrc.smis.hibernate.ReportIn)it.next();
         TranslatorUtil.copyPersistenceToVo(REP_IN_ID_PO, REP_IN_ID_Temp);
         REP_IN_ID_vos.add(REP_IN_ID_Temp);
      }
      retVals = REP_IN_ID_vos;
      return retVals;
    }
   /**
    * This method will return all objects referenced by MCellFormu
    */
   public static List getMCellFormu(com.cbrc.smis.form.DataValidateInfoForm dataValidateInfoForm) throws Exception {
      List retVals = new ArrayList();
      com.cbrc.smis.hibernate.DataValidateInfo dataValidateInfoPersistence = null;
javax.naming.InitialContext ctx = new javax.naming.InitialContext();
// TODO: Make adapter get SessionFactory jndi name by ant task argument?
net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory)ctx.lookup("java:AirlineHibernateFactory");
net.sf.hibernate.Session session = factory.openSession();
net.sf.hibernate.Transaction tx = session.beginTransaction();
tx.commit();
session.close();
retVals.add(dataValidateInfoPersistence.getMCellFormu());
      ArrayList CELL_FORMU_ID_vos = new ArrayList();
      for (Iterator it = retVals.iterator(); it.hasNext(); ) {
         com.cbrc.smis.form.MCellFormuForm CELL_FORMU_ID_Temp = new com.cbrc.smis.form.MCellFormuForm();
         com.cbrc.smis.hibernate.MCellFormu CELL_FORMU_ID_PO = (com.cbrc.smis.hibernate.MCellFormu)it.next();
         TranslatorUtil.copyPersistenceToVo(CELL_FORMU_ID_PO, CELL_FORMU_ID_Temp);
         CELL_FORMU_ID_vos.add(CELL_FORMU_ID_Temp);
      }
      retVals = CELL_FORMU_ID_vos;
      return retVals;
    }
   /**根据ReportInParticularForm中的RepInId查询DataValidateInfo中的ValidateTypeId
    * @author 唐磊
    * @param reportInParticularForm
    * @validateTypeId 返回的为查找的id
    
   
   public static int selectValidateTypeId(ReportInParticularForm reportInParticularForm){
	   int validateTypeId=0;
	   DBConn conn=null;
	   Session session=null;
	   List list=null;
	   
	   try {
			if (reportInParticularForm.getRepInId() != null
					&& reportInParticularForm.getRepInId() != null) {
				conn = new DBConn();
				session = conn.openSession();

				String hql = "from DataValidateInfo dvi where 1=1";
				hql += " and dvi.repInId="
						+ reportInParticularForm.getRepInId()+"";

				Query query = session.createQuery(hql.toString());
				list = query.list();
				if (list != null && list.size() != 0) {
					validateTypeId = ((DataValidateInfo) list.get(0)).getComp_id().getValidateTypeId()
							.intValue();
					// System.out.println("validateTypeId in <<selectValidateTypeId() of StrutsDataValidateInfoDelegate>>========================="+validateTypeId);
				}

			}
   	}catch(HibernateException he){
   		log.printStackTrace(he);
   	}catch(Exception e){
   		log.printStackTrace(e);
   	}finally{
   		if (conn!=null)conn.closeSession();
   	}
   	return validateTypeId;
   }**/
   
   
   /**
	 * 根据实际数据报表Id和校验类别获得表内校验不通过信息列表	 
	 * @param repInId Integer 实际数据表ID
	 * @param dataValidateType 校验类别ID
	 * @return List
	 */
	public static List findNotPass(Integer repInId,Integer dataValidateType){
		List resList=null;		
		if(repInId==null) return resList;
		
		DBConn conn=null;
		
		try{
			conn=new DBConn();
			     
			String hql="from DataValidateInfo dvi where dvi.comp_id.repInId=" +	repInId+
			" and  dvi.result=-1";

			if(dataValidateType!=null) hql+=" and dvi.validateType.validateTypeId=" + dataValidateType;
			
			List list=conn.openSession().find(hql);
			
			if(list!=null && list.size()>0){
				resList=new ArrayList();
				DataValidateInfo dataValidateInfo=null;
				for(int i=0;i<list.size();i++){
					dataValidateInfo=(DataValidateInfo)list.get(i);
					DataValidateInfoForm form=new DataValidateInfoForm();
					TranslatorUtil.copyPersistenceToVo(dataValidateInfo,form);
					resList.add(form);
				}
			}
		}catch(HibernateException he){
			resList=null;
			log.printStackTrace(he);
		}catch(Exception e){
			resList=null;
			log.printStackTrace(e);
		}finally{
			if(conn!=null) conn.closeSession();
		}
		
		return resList;
	}
	
	/**
	 * 根据实际数据报表Id获得校验不通过信息列表	 
	 * @param repInId Integer 实际数据表ID
	 * @return
	 */
	public static Map findNotPass(Integer repInId){
		Map resMap = null;		
		if(repInId == null) return resMap;		
		DBConn conn = null;
		
		try{
			conn = new DBConn();			     
			String hql = "from DataValidateInfo dvi where dvi.comp_id.repInId=" +	repInId + " and dvi.result=-1";
			
			List list = conn.openSession().find(hql);			
			if(list!=null && list.size()>0){
				resMap = new HashMap();
				DataValidateInfo dataValidateInfo = null;
				String colName = null;
				
				for(Iterator iter=list.iterator();iter.hasNext();){
					dataValidateInfo = (DataValidateInfo)iter.next();
										
					DataValidateInfoForm form=new DataValidateInfoForm();
					form.setRepInId(dataValidateInfo.getComp_id().getRepInId());
			        
			        if(dataValidateInfo.getMCellFormu()!=null){
			        	String cellFormu = dataValidateInfo.getMCellFormu().getCellFormu();
			        	if(cellFormu != null && !cellFormu.equals("")){
			        		String[] cols = cellFormu.split("=");
			        		if(cols != null && cols.length != 0){
			        			for(int i=0;i<cols.length;i++){
			        				String[] str = cols[i].split(Config.SPLIT_SYMBOL_RIGHT_MID_HUOHU);
			        				if(str != null && str.length == 2){
			        					
			        				}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		        				
			        	//			cols[i].//只有一个符号
			        				if(cols[i].indexOf("_") > -1){
			        					
			        				}
			        			}
			        		}
			        	}
			        }
			        
			        
			        
					//resList.add(form);
				}
			}
		}catch(HibernateException he){
			resMap = null;
			log.printStackTrace(he);
		}catch(Exception e){
			resMap = null;
			log.printStackTrace(e);
		}finally{
			if(conn!=null) conn.closeSession();
		}
		
		return resMap;
	}	
	
   /**根据ReportInParticular中的RepInId查询DataValidateInfo中的Cell_Formu,validate_Type_Name和Result字段
    * 并且将StrutsValidateTypeDelegate中的validate_Type_Name也查询出来
    * @author 唐磊
    * @点对点式表单表内表间校验关系的查询
    */
   
   public static List select_AllRecords(String repInId){
	   DBConn conn=null;
	   Session session=null;
	   
	   List resList = null;
	   List list=null;
	   try {
		   if(repInId != null) {				
			   conn = new DBConn();				
			   session = conn.openSession();

			   String hql = "from DataValidateInfo dvi where 1=1";				
			   hql += " and dvi.comp_id.repInId="+ repInId;
				
			   Query query = session.createQuery(hql.toString());
			   resList = query.list();

			   if (resList != null && resList.size() > 0) {				
				   list=new ArrayList();
					
				   for (int i = 0; i < resList.size(); i++) {				
					   ReportInParticularForm reportInParticularForm=new ReportInParticularForm();
					   //单元格的查询						
					   DataValidateInfo dataValidateInfo =  (DataValidateInfo)resList.get(i);						
					   if((dataValidateInfo.getMCellFormu()!=null)){						
						   String cellFormu = dataValidateInfo.getMCellFormu().getCellFormu();							
						   if(cellFormu!=null && !cellFormu.equals("")){							
							   reportInParticularForm.setCellFormu(cellFormu);								
						   }							
					   }

					   //单元格校验结果的查询						
					   String result = ((DataValidateInfo) resList.get(i)).getResult().toString();
					   if(result!=null && !result.equals("")){						
						   reportInParticularForm.setResult(result);							
					   }

					   //校验类型的查询						
					   String validateTypeName = ((DataValidateInfo) resList.get(i)).getValidateType().getValidateTypeName();
					   if(validateTypeName!=null && !validateTypeName.equals("")){						
						   reportInParticularForm.setValidateTypeName(validateTypeName);							
					   }						
					   list.add(reportInParticularForm);
				   }
			   }			
		   }		
	   } catch (HibernateException he) {		
		   log.printStackTrace(he);		
	   } catch (Exception e) {			
		   log.printStackTrace(e);
	   } finally {		
		   if (conn != null)			
			   conn.closeSession();		
	   }
	   return list;	     
   }
   
}	
