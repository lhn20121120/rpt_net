package com.cbrc.smis.adapter;

import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.struts.util.LabelValueBean;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.excel.CreateExcel;
import com.cbrc.smis.form.MChildReportForm;
import com.cbrc.smis.form.MCurrForm;
import com.cbrc.smis.form.MRepRangeForm;
import com.cbrc.smis.form.RangeTempForm;
import com.cbrc.smis.form.ReportInForm;
import com.cbrc.smis.hibernate.MActuRep;
import com.cbrc.smis.hibernate.MChildReport;
import com.cbrc.smis.hibernate.MRepFreq;
import com.cbrc.smis.hibernate.MRepRange;
import com.cbrc.smis.hibernate.MRepRangePK;
import com.cbrc.smis.hibernate.ReportAgainSet;
import com.cbrc.smis.hibernate.ReportIn;
import com.cbrc.smis.other.Aditing;
import com.cbrc.smis.security.Operator;
import com.cbrc.smis.util.FitechException;
import com.fitech.gznx.common.DateUtil;
import com.fitech.gznx.po.AfTemplateOrgRelation;
import com.fitech.gznx.po.AfTemplateOrgRelationId;
import com.fitech.gznx.service.AFOrgDelegate;
import com.fitech.net.adapter.StrutsOrgNetDelegate;
import com.fitech.net.common.MCurrUtil;
import com.fitech.net.config.Config;
import com.fitech.net.hibernate.OrgNet;
import com.fitech.net.hibernate.ViewMReport;
/**
 * This is a delegate class to handle interaction with the backend persistence
 * layer of hibernate. It has a set of methods to handle persistence for
 * MSupvOrg data (i.e. com.cbrc.smis.struts.MSupvOrgForm objects).
 * 
 * @author <strong>Generated by Middlegen. </strong>
 */
public class StrutsMRepRangeDelegate {
    private static FitechException log = new FitechException();
    /**
     * 
     * @author jhb
     * @param orgid
     * @return replist
     */
    public static List getchildrepid(String orgid)
    {
    	List reslist=new ArrayList();
    	if(orgid==null)return null;
    	DBConn conn=null;

    	MRepRange mRepRange=null;
    	try{
    		String hql="from MRepRange mrr where mrr.comp_id.orgId='"+ orgid.trim()+"'";
    		conn=new DBConn();
    		List list=conn.beginTransaction().find(hql);
    		for(int i=0;i<list.size();i++)
    		{
    			mRepRange=(MRepRange)list.get(i);
    			MRepRangeForm mRepRangeForm=new MRepRangeForm();	
    			TranslatorUtil.copyPersistenceToVo(mRepRange,mRepRangeForm);
    			reslist.add(mRepRangeForm);
    		}
    	}catch(Exception e)
    	{   reslist=null;
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null)
    		conn.closeSession();
    	}
    	return reslist;
    	
    }
    

    /**
     *<p>描述:获得需要汇总的报表</p>
     *<p>参数:</p>
     *<p>日期：2008-4-16</p>
     *<p>作者：wh</p>
     */
    public List selectCollectReportRecord(ReportInForm reportInForm, Operator operator) {
		List result = new ArrayList();
		DBConn conn = null;
		Session session = null;
		try {

			conn = new DBConn();
			session = conn.openSession();
			
			int term = reportInForm.getTerm().intValue();
			int year = reportInForm.getYear().intValue();

			String rep_freq = "";
			if (term == 12)
				rep_freq = "('月','季','半年','年')";
			else if (term == 6)
				rep_freq = "('月','季','半年')";
			else if (term == 3 || term == 9)
				rep_freq = "('月','季')";
			else
				rep_freq = "('月')";
			String strTerm = String.valueOf(term);
			if(term<10){
				strTerm ="0"+term;
			}
			String hql="from ViewMReport a where a.startDate<='"+year+"-"+strTerm+"-01' and a.endDate>='"+year+"-"+strTerm+"-01'" +
					" and a.repFreqName in"+rep_freq+" and a.comp_id.orgId='"+operator.getOrgId()+"'";
			/**加上报送权限*/
			if(operator.isSuperManager() == false){
				/**添加数据库判断*/
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
					hql += " and '" + operator.getOrgId() + "'||a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
					hql += " and '" + operator.getOrgId() + "'+a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
			}
			hql +=" order by a.comp_id.childRepId";
			Query query = session.createQuery(hql);
			List list=query.list();
			 
    		for(int i=0;i<list.size();i++){
    			ViewMReport viewMReport=(ViewMReport)list.get(i);
    			Aditing aditing = new Aditing();
    			aditing.setDataRgTypeName(viewMReport.getDataRgTypeName());
				aditing.setActuFreqName(viewMReport.getRepFreqName());
				aditing.setActuFreqID(viewMReport.getRepFreqId());
				aditing.setChildRepId(viewMReport.getComp_id().getChildRepId());
				aditing.setVersionId(viewMReport.getComp_id().getVersionId());
				aditing.setRepName(viewMReport.getReportName());
				aditing.setYear(new Integer(year));
				aditing.setTerm(new Integer(term));
				aditing.setCurrName(viewMReport.getCurName());
				aditing.setCurId(viewMReport.getComp_id().getCurId());
				aditing.setDataRgId(viewMReport.getComp_id().getDataRangeId());
				
				//  得到times的值,如果是-1汇总过的  
				String sql = "from ReportIn ri where ri.times=-1 and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + "'  and ri.MCurr.curId="+aditing.getCurId()+
							 " and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
							 " and ri.term=" + term + " and ri.orgId='" + operator.getOrgId()  + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'";
				
				List reportInList = session.find(sql);
				if(reportInList != null && reportInList.size() > 0){
					ReportIn reportIn = (ReportIn)reportInList.get(0);
					if(reportIn.getCheckFlag()!=null && reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())){
						Set reportAgainSets = reportIn.getReportAgainSets();
						String cause = "";				
						if(reportAgainSets != null && reportAgainSets.size() > 0){
							for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
								ReportAgainSet againSet = (ReportAgainSet)iterSet.next();
								cause = cause.equals("") ? againSet.getCause() : "\n" + cause + againSet.getCause();
							}
						}
						aditing.setWhy(cause);
					}
					aditing.setCheckFlag(reportIn.getCheckFlag());
					aditing.setRepInId(reportIn.getRepInId());
					aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());
					aditing.setTblOuterValidateFlag(reportIn.getTblOuterValidateFlag());
					aditing.setIsCollected(new Integer(1));
				}else{
					aditing.setIsCollected(new Integer(0));
				}
		 
				
				result.add(aditing);
    			
    		}
			
		} catch (Exception he) {
			log.printStackTrace(he);

		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}

    /**
     * 根据报表ID和时间,得到版本号
     * @param childRepId
     * @param year
     * @param term
     * @return String
     */
    public static String getVerionId(String childRepId,Integer year,Integer term){
        if(childRepId == null || year == null || term == null)
        	return null;
		
        DBConn conn = null;
        Session session = null;
        String versionId = null;
        try {
            StringBuffer hql = new StringBuffer();
            /**已增加数据库判断 卞以刚 2012-01-18*/
            if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
            {
            	hql = new StringBuffer("from MChildReport mcr where mcr.comp_id.childRepId='"+childRepId+"' " +
        				"and convert(datetime,'"+year+"-"+term+"-01',120) between convert(datetime,mcr.startDate,120) " +
        				"and convert(datetime,mcr.endDate,120)");
            }
            if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("db2")){ 
            	hql = new StringBuffer("from MChildReport mcr where mcr.comp_id.childRepId='"+childRepId+"' " +
            				"and date('"+year+"-"+term+"-01') between date(mcr.startDate) and date(mcr.endDate)");
            	
            }else if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle")){		
            	hql = new StringBuffer("from MChildReport mcr where mcr.comp_id.childRepId='"+childRepId+"' " +
        				"and to_date('"+year+"-"+term+"-01','yyyy-MM-dd') between to_date(mcr.startDate,'yyyy-MM-dd') " +
        				"and to_date(mcr.endDate,'yyyy-MM-dd')");
            	
        	}else if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sybase")){ 
	              hql = new StringBuffer("from MChildReport mcr where mcr.comp_id.childRepId='"+childRepId+"' and convert(char,'");
	                         hql.append(year+"-"+term+"-01");                
	                         hql.append("',112) <= convert(char,mcr.endDate,112) and convert(char,'");
	                         hql.append(year+"-"+term+"-01");
	                         hql.append("',112) >= convert(char,mcr.startDate,112)");
        	}
            
            conn = new DBConn();
            session = conn.openSession();
            Query query = session.createQuery(hql.toString());          
            List list = query.list();

            if (list != null && list.size()>0) {
            	MChildReport  mcreport=(MChildReport)list.get(0);
            	versionId = mcreport.getComp_id().getVersionId();
            }
        } catch (HibernateException he) {
        	versionId = null;
            log.printStackTrace(he);
            he.printStackTrace();
        }catch(Exception e){
        	versionId = null;
            log.printStackTrace(e);
            e.printStackTrace();
        }finally {
        	try {
        		if (conn != null) conn.closeSession();
                if (session != null) session.close();
			} catch (HibernateException e) {
				log.printStackTrace(e);
			}
        }
        return versionId;
    }
    
    /**
     * / 得到一个机构的报表列表
     * @param orgid
     * @return
     */
    public static List getchildrepidList(String orgid)
    {
    	List reslist=new ArrayList();
    	if(orgid==null)return null;
    	DBConn conn=null;

    	MRepRange mRepRange=null;
    	try{
    		String hql="from MRepRange mrr where mrr.comp_id.orgId='"+ orgid.trim()+"'";
    		conn=new DBConn();
    		List list=conn.beginTransaction().find(hql);
    		for(int i=0;i<list.size();i++)
    		{
    			mRepRange=(MRepRange)list.get(i);
    			 MChildReportForm mChildReportForm = new MChildReportForm();	
    			 mChildReportForm.setChildRepId(mRepRange.getComp_id().getChildRepId());
    			 mChildReportForm.setVersionId(mRepRange.getComp_id().getVersionId());
    			
    			reslist.add(mChildReportForm);
    		}
    	}catch(Exception e)
    	{   reslist=null;
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null)
    		conn.closeSession();
    	}
    	return reslist;
    	
    }

    /** 
     * @author wh
     * @param orgid
     * @return int
     */
    public static int getChildRepIdCount(String orgid)
    {
    	int count = 0;
    	if(orgid==null)return count;
    	DBConn conn=null;

    	try{
    		String hql="select count(*) from MRepRange mrr where mrr.comp_id.orgId='"+ orgid.trim()+"'";
    		conn=new DBConn();
    		List list=conn.openSession().find(hql);
    		if(list != null && list.size() > 0){
    			count = ((Integer)list.get(0)).intValue();
    		}
    	}catch(Exception e){   
    		count = 0;
    		e.printStackTrace();
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null) conn.closeSession();
    	}
    	return count;    	
    }
    
    /**
     * 
     * @author jcm
     * @param orgId
     * @return replist
     */
    public static List getMRepRange(String orgId,int offset,int limit){
    	List reslist=new ArrayList();
    	if(orgId == null) return null;
    	DBConn conn=null;
    	Session session = null;

    	MRepRange mRepRange=null;
    	try{
    		String hql="from MRepRange mrr where mrr.comp_id.orgId='"+ orgId.trim()+"'";
    		conn = new DBConn();
    		session = conn.openSession();
    		
    		Query query = session.createQuery(hql);
    		query.setFirstResult(offset);
			query.setMaxResults(limit);			
    		List list = query.list();
    		
    		for(int i=0;i<list.size();i++){
    			mRepRange=(MRepRange)list.get(i);
    			MRepRangeForm mRepRangeForm=new MRepRangeForm();	
    			TranslatorUtil.copyPersistenceToVo2(mRepRange,mRepRangeForm);
    			reslist.add(mRepRangeForm);
    		}
    	}catch(Exception e)
    	{   reslist=null;
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null)
    		conn.closeSession();
    	}
    	return reslist;
    	
    }
    
    /**
     * 已使用Hibernate 卞以刚 2011-12-22
     * 根据子报表ID和版本号获取其报送范围信息列表
     * 
     * @author rds
     * @date 2005-12-25
     * 
     * @param childRepId String 子报表ID
     * @param versionId String 版本号 
     * @return List 无信息列表，返回null
     */
    public static List findAll(String childRepId, String versionId){
    	List resList=null;
    	
    	if(childRepId==null || versionId==null) return null;
    	
    	DBConn conn=null;
    	
    	try{
    		String hql="from MRepRange mrr where mrr.comp_id.childRepId='" + childRepId + 
    			"' and mrr.comp_id.versionId='" + versionId + "'";
    		
    		conn=new DBConn();
    		Session session = conn.openSession();
    		Query query = session.createQuery(hql);
    		List	list = query.list(); 
    	//	List list=conn.openSession().find(hql);
    		if(list!=null && list.size()>0){
    			resList=new ArrayList();
    			MRepRange mRepRange=null;
    			for(int i=0;i<list.size();i++){
    				mRepRange=(MRepRange)list.get(i);
    				MRepRangeForm mRepRangeForm=new MRepRangeForm();
    				TranslatorUtil.copyPersistenceToVo(mRepRange,mRepRangeForm);
    				resList.add(mRepRangeForm);
    			}
    		}
    	}catch(HibernateException he){
    		resList=null;
    		log.printStackTrace(he);
    	}catch(Exception e){
    		resList=null;
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null) conn.closeSession();
    	}
    	
    	return resList;
    }
    /**
     * 根据子报表ID和版本号获得其相对应的填报机构类别ID的字符串值
     * 
     * @author rds
     * @serialData 2005-12-10
     * 
     * @param childRepId String 子报表ID
     * @param versionId String 版本号
     * @return String
     */
    public static String getOrgClsString(String childRepId, String versionId) {
        String orgCls = null;

        if (childRepId == null || versionId == null)
            return orgCls;

        DBConn conn = null;
        try {
            String hql = "select distinct mrr.orgClsId from MRepRange mrr where "
                    + "mrr.comp_id.childRepId='" + childRepId + "' and "
                    + "mrr.comp_id.versionId='" + versionId + "'";
            conn = new DBConn();

            List list = conn.openSession().find(hql);
            if (list != null && list.size() > 0) {
                orgCls = "";
                Iterator it = list.iterator();
                if (it != null) {
                    Object orgClsId="";
                    while (it.hasNext()) {
                    	orgClsId = it.next();
                        if (orgClsId!= null)
                            orgCls += (orgCls.equals("") ? "" : ",") + "'"
                                    + ((String)orgClsId).trim()	
                                    + "'";
                    }
                }
            }
        } catch (HibernateException he) {
            log.printStackTrace(he);
        } finally {
            if (conn != null)
                conn.closeSession();
        }
 
        return orgCls;
    }
    
    /**
     * 根据子报表ID和版本号获得其相对应的填报机构ID的字符串值
     * 
     * @author rds
     * @serialData 2005-12-10
     * 
     * @param childRepId
     *            String 子报表ID
     * @param versionId
     *            String 版本号
     * @return String
     */
    public static String getOrgsString(String childRepId, String versionId) {
        String orgs = null;

        if (childRepId == null || versionId == null)
            return orgs;

        DBConn conn = null;
        try {
        	String hql = "from MRepRange mrr where "
                + "mrr.comp_id.childRepId='" + childRepId + "' and "
                + "mrr.comp_id.versionId='" + versionId + "'";
	        conn = new DBConn();
	
	        List list = conn.openSession().find(hql);
	        if (list != null && list.size() > 0) {
	        	orgs = "";
	            Iterator it = list.iterator();
	            if (it != null) {
	                MRepRange mRepRange = null;
	                while (it.hasNext()) {
	                    mRepRange = (MRepRange) it.next();
	                    if (mRepRange.getOrgClsId()!= null)
	                    	orgs += (orgs.equals("") ? "" : ",") + "'"
	                                + mRepRange.getOrgClsId().trim()
	                                + "'";
	                }
	            }
	        }
        } catch (HibernateException he) {
            log.printStackTrace(he);
        } finally {
            if (conn != null) conn.closeSession();
        }
  
        return orgs;
    }

    /**
     * Create a new com.cbrc.smis.struts.MRepRangeForm object and persist (i.e.
     * insert) it.
     * 
     * @param mRepRangeForm
     *            The object containing the data for the new
     *            com.cbrc.smis.struts.MRepRangeForm object
     * @exception Exception
     *                If the new com.cbrc.smis.struts.MRepRangeForm object
     *                cannot be created or persisted.
     */
    public static boolean create(MRepRangeForm mRepRangeForm) throws Exception {
        boolean resList = false;
        DBConn conn = null;
        Session session = null;

        MRepRange mRepRangePersistence = new MRepRange();

        try {
            //实例化连接对象
            conn = new DBConn();
            //会话对象为连接对象的事务属性
            session = conn.beginTransaction();

            //表示层到持久层的CopyTo方法(mRepRangePersistence持久层对象的实例,mRepRangeForm表示层对象)
            if (mRepRangeForm == null) {
                return resList;
            }
            TranslatorUtil.copyVoToPersistence(mRepRangePersistence,
                    mRepRangeForm);
            //会话对象保存持久层对象
            // System.out.println("OrgClsId:" + mRepRangePersistence.getOrgClsId());
            // System.out.println("ChildRepId:" + mRepRangePersistence.getComp_id().getChildRepId());
            // System.out.println("OrgId:" + mRepRangePersistence.getComp_id().getOrgId());
            // System.out.println("VersionId:" + mRepRangePersistence.getComp_id().getVersionId());
            
            session.save(mRepRangePersistence);
            session.flush();
            //标志为true
            resList = true;

        } 
        catch (Exception jb) 
        {
            resList = false;
            log.printStackTrace(jb);
        }

        finally {
            
            //如果连接状态有,则断开,结束事务,返回
             if (conn != null)
                    conn.endTransaction(resList);
          
        }
        return resList;
    }

    /**
     * Update (i.e. persist) an existing com.cbrc.smis.struts.MRepRangeForm
     * object.
     * 
     * @param mRepRangeForm
     *            The com.cbrc.smis.struts.MRepRangeForm object containing the
     *            data to be updated
     * @exception Exception
     *                If the com.cbrc.smis.struts.MRepRangeForm object cannot be
     *                updated/persisted.
     */
    public static com.cbrc.smis.form.MRepRangeForm update(
            com.cbrc.smis.form.MRepRangeForm mRepRangeForm) throws Exception {
        com.cbrc.smis.hibernate.MRepRange mRepRangePersistence = new com.cbrc.smis.hibernate.MRepRange();
        TranslatorUtil.copyVoToPersistence(mRepRangePersistence, mRepRangeForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        session.update(mRepRangePersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mRepRangePersistence, mRepRangeForm);
        return mRepRangeForm;
    }

    /**
     * Remove (i.e. persist) an existing com.cbrc.smis.struts.MRepRangeForm
     * object.
     * 
     * @param mRepRangeForm
     *            The com.cbrc.smis.struts.MRepRangeForm object containing the
     *            data to be updated
     * @exception Exception
     *                If the com.cbrc.smis.struts.MRepRangeForm object cannot be
     *                updated/persisted.
     */
    public static com.cbrc.smis.form.MRepRangeForm remove(
            com.cbrc.smis.form.MRepRangeForm mRepRangeForm) throws Exception {
        com.cbrc.smis.hibernate.MRepRange mRepRangePersistence = new com.cbrc.smis.hibernate.MRepRange();
        TranslatorUtil.copyVoToPersistence(mRepRangePersistence, mRepRangeForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        session.update(mRepRangePersistence);
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mRepRangePersistence, mRepRangeForm);
        return mRepRangeForm;
    }

    
    
    /**
     * Retrieve an existing com.cbrc.smis.struts.MRepRangeForm object for
     * editing.
     * 
     * @param mRepRangeForm
     *            The com.cbrc.smis.struts.MRepRangeForm object containing the
     *            data used to retrieve the object (i.e. the primary key info).
     * @exception Exception
     *                If the com.cbrc.smis.struts.MRepRangeForm object cannot be
     *                retrieved.
     */
    public static com.cbrc.smis.form.MRepRangeForm edit(
            com.cbrc.smis.form.MRepRangeForm mRepRangeForm) throws Exception {
        com.cbrc.smis.hibernate.MRepRange mRepRangePersistence = new com.cbrc.smis.hibernate.MRepRange();
        TranslatorUtil.copyVoToPersistence(mRepRangePersistence, mRepRangeForm);
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        mRepRangePersistence = (com.cbrc.smis.hibernate.MRepRange) session
                .load(com.cbrc.smis.hibernate.MRepRange.class,
                        mRepRangePersistence.getComp_id());
        tx.commit();
        session.close();
        TranslatorUtil.copyPersistenceToVo(mRepRangePersistence, mRepRangeForm);
        return mRepRangeForm;
    }

    /**
     *唐磊
     *根据摸板维护页面填报范围的复选框删除记录，（表MRepRange的childRepId,orgId,VersionId)
     *@result 删除成功返回true，否则false．
     */
    public static boolean removeOfMRepRange(com.cbrc.smis.form.MRepRangeForm mRepRangeForm)
            throws Exception {
        DBConn conn=null;
        Session session=null;
        boolean result=false;
      
        if (mRepRangeForm==null || mRepRangeForm.equals("")){
        	return result;
        }
        try{
        	conn=new DBConn();
        	session=conn.beginTransaction();
        	
        	String hql=" from MRepRange mrr where";
        	hql+=" mrr.comp_id.childRepId='"+mRepRangeForm.getChildRepId()+"'"
        		+" and mrr.comp_id.versionId='"+mRepRangeForm.getVersionId()+"'"
        		+" and mrr.orgClsId='"+mRepRangeForm.getOrgClsId()+"'";
        		
        	session.delete(hql);
        	session.flush();
        	result=true;
        }catch(Exception e){
        	log.printStackTrace(e);
        }finally{
        	if(conn!=null)conn.endTransaction(result);
        }
        return result;
    }

    /**
     * Retrieve all existing com.cbrc.smis.struts.MRepRangeForm objects.
     * 
     * @exception Exception
     *                If the com.cbrc.smis.struts.MRepRangeForm objects cannot
     *                be retrieved.
     */
    public static List findAll() throws Exception {
        List retVals = new ArrayList();
        javax.naming.InitialContext ctx = new javax.naming.InitialContext();
        // TODO: Make adapter get SessionFactory jndi name by ant task argument?
        net.sf.hibernate.SessionFactory factory = (net.sf.hibernate.SessionFactory) ctx
                .lookup("java:AirlineHibernateFactory");
        net.sf.hibernate.Session session = factory.openSession();
        net.sf.hibernate.Transaction tx = session.beginTransaction();
        retVals.addAll(session.find("from com.cbrc.smis.hibernate.MRepRange"));
        tx.commit();
        session.close();
        ArrayList mRepRange_vos = new ArrayList();
        for (Iterator it = retVals.iterator(); it.hasNext();) {
            com.cbrc.smis.form.MRepRangeForm mRepRangeFormTemp = new com.cbrc.smis.form.MRepRangeForm();
            com.cbrc.smis.hibernate.MRepRange mRepRangePersistence = (com.cbrc.smis.hibernate.MRepRange) it
                    .next();
            TranslatorUtil.copyPersistenceToVo(mRepRangePersistence,
                    mRepRangeFormTemp);
            mRepRange_vos.add(mRepRangeFormTemp);
        }
        retVals = mRepRange_vos;
        return retVals;
    }

    /**
     * Retrieve a set of existing com.cbrc.smis.struts.MRepRangeForm objects for
     * editing.
     * 
     * @param mRepRangeForm
     *            The com.cbrc.smis.struts.MRepRangeForm object containing the
     *            data used to retrieve the objects (i.e. the criteria for the
     *            retrieval).
     * @exception Exception
     *                If the com.cbrc.smis.struts.MRepRangeForm objects cannot
     *                be retrieved.
     */
    public static List select(MRepRangeForm mRepRangeForm, int offset, int limit)
            throws Exception {
        //		 List集合的定义
        List refVals = null;

        //连接对象和会话对象初始化
        DBConn conn = null;
        Session session = null;

        //	 查询条件HQL的生成
        StringBuffer hql = new StringBuffer("from MRepRange mrr ");
        StringBuffer where = new StringBuffer("");

        if (mRepRangeForm == null) {
            // 查找条件的判断,查找名称不可为空
            return refVals;
        }

        try { //List集合的操作
            //初始化
            hql.append(where.toString());
            //conn对象的实例化
            conn = new DBConn();
            //打开连接开始会话
            session = conn.openSession();
            //添加集合至Session
            //List list=session.find(hql.toString());
            Query query = session.createQuery(hql.toString());
            query.setFirstResult(offset).setMaxResults(limit);
            List list = query.list();

            if (list != null) {
                refVals = new ArrayList();
                //循环读取数据库符合条件记录
                for (Iterator it = list.iterator(); it.hasNext();) {
                    MRepRangeForm mRepRangeFormTemp = new MRepRangeForm();
                    MRepRange mRepRangePersistence = (MRepRange) it.next();
                    TranslatorUtil.copyPersistenceToVo(mRepRangePersistence,
                            mRepRangeFormTemp);
                    refVals.add(mRepRangeFormTemp);
                }
            }
        } catch (HibernateException he) {
            refVals = null;
            log.printStackTrace(he);
        } catch (Exception e) {
            refVals = null;
            log.printStackTrace(e);
        } finally {
            //如果连接存在，则断开，结束会话，返回
            if (conn != null)
                conn.closeSession();
        }
        return refVals;
    }

    /**
     * 取得按条件查询到的记录条数
     * 
     * @return int 查询到的记录条数
     * @param mCurrForm
     *            包含查询的条件信息（子机构名称ID，子机构类型名称）
     */

    public static int getRecordCount(MRepRangeForm mRepRangeForm) {
        int count = 0;

        //连接对象和会话对象初始化
        DBConn conn = null;
        Session session = null;

        //	 查询条件HQL的生成
        StringBuffer hql = new StringBuffer(
                "select count(*) from MRepRange mrr");
        StringBuffer where = new StringBuffer("");

        if (mRepRangeForm == null) {
            // 查找条件的判断,查找名称不可为空
            return count;
        }

        try { //List集合的操作
            //初始化
            hql.append(where.toString());
            //conn对象的实例化
            conn = new DBConn();
            //打开连接开始会话
            session = conn.openSession();
            List list = session.find(hql.toString());
            if (list != null && list.size() == 1) {
                count = ((Integer) list.get(0)).intValue();
            }

        } catch (HibernateException he) {
            log.printStackTrace(he);
        } catch (Exception e) {
            log.printStackTrace(e);
        } finally {
            //如果连接存在，则断开，结束会话，返回
            if (conn != null)
                conn.closeSession();
        }
        return count;
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 影响对象：MRepRange
     * @author cb
     * 
     * 通过传入的参数得到一个机构适用范围对象
     * @param orgId
     * @param childRepId
     * @param versionId
     * @return
     */
    public static MRepRange getMRepRanageOncb(String orgId, String childRepId,
            String versionId) {

        DBConn dBConn = null;

        Session session = null;

        MRepRange mrr = null;
        
        Query  query = null;
        
//        String  hsql = "from MRepRange mrr where mrr.comp_id.orgId=:orgId and ";
//        
//        hsql = hsql + "mrr.comp_id.childRepId=:childRepId and ";
//        
//        hsql = hsql + "mrr.comp_id.versionId=:versionId ";
//        
      List l = null;
//
//        MRepRangePK pk = new MRepRangePK();
//
//        pk.setOrgId(orgId);
//
//        pk.setChildRepId(childRepId);
//
//        pk.setVersionId(versionId);

        try {

            dBConn = new DBConn();

            session = dBConn.openSession();
//            
//            query = session.createQuery(hsql);
//            
//            query.setString("orgId",orgId);
//            
//            query.setString("childRepId",childRepId);
//            
//            query.setString("versionId",versionId);
            query=session.createQuery("from MRepRange m where m.comp_id.orgId='" +orgId 
            		+"' and m.comp_id.childRepId='"+ childRepId+ "' and m.comp_id.versionId='" +versionId + "'");
            l = query.list();
            
            int size = l.size();
            
            if(size!=0)
                
                mrr = (MRepRange)l.get(0);

   //         mrr = (MRepRange) session.get(MRepRange.class, pk);

        } catch (Exception e) {
            
            mrr = null;
        	
            /*e.printStackTrace();*/
        }
        finally{
            
            if(session != null)
                
                dBConn.closeSession();
        }
        
        return   mrr;
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 影响对象：MRepRange
     * 根据报表ID判断是否有权限报送
     * @param orgId
     * @param childRepId
     * @param versionId
     * @param operator
     * @return
     */
    public static MRepRange getMRepRanage(String orgId,String childRepId,String versionId,Operator operator) {
        DBConn dBConn = null;
        Session session = null;
        MRepRange mrr = null;
        String hql = "";
        try {
        	/**已增加数据库判断 */
        	if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
        		hql= "from MRepRange mrr where mrr.comp_id.orgId='" + orgId + "' and mrr.comp_id.childRepId='" 
        				+ childRepId + "' and mrr.comp_id.versionId='" + versionId + "' and '" + orgId + "' || '" 
        				+ childRepId + "' in (" + operator.getChildRepReportPopedom()+ ")";
        	if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
        		hql= "from MRepRange mrr where mrr.comp_id.orgId='" + orgId + "' and mrr.comp_id.childRepId='" 
						+ childRepId + "' and mrr.comp_id.versionId='" + versionId + "' and '" + orgId + "' + '" 
						+ childRepId + "' in (" + operator.getChildRepReportPopedom()+ ")";

            dBConn = new DBConn();
            session = dBConn.openSession();            
            Query query = session.createQuery(hql);
            
            List list = query.list();            
            if(list != null && list.size() > 0){
            	mrr = (MRepRange)list.get(0);
            }            
        } catch (Exception e) {
            e.printStackTrace();
            mrr = null;;
        }
        finally{            
            if(session != null)                
                dBConn.closeSession();
        }        
        return   mrr;
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 根据子报表id和版本号id查询对应的机构id(报表维护中的报送范围的修改)
     * 唐磊
     */

    public static String SelectOneOrgId(String childRepId,String versionId){
    	String orgId="";
    	DBConn conn=null;
    	Session session=null;
    	List list=null;
    	
    	if(childRepId!=null&&!childRepId.equals("")&&versionId!=null&&!versionId.equals("")){
    		try{
    			conn=new DBConn();
    			session=conn.openSession();
    			
    			String hql="from MRepRange mrr where 1=1";
    			hql+=" and mrr.comp_id.childRepId='"+childRepId+"'" + " and mrr.comp_id.versionId='" +versionId+ "'";
    			
    			Query query=session.createQuery(hql.toString());
    			list=query.list();
    			
    			if(list!=null&&list.size()>0){
    				MRepRange mRepRange=(MRepRange)list.get(0);
    				orgId=mRepRange.getComp_id().getOrgId();
    			}
    		}catch(HibernateException he){
    			log.printStackTrace(he);
    		}catch(Exception e){
    			log.printStackTrace(e);
    		}finally{
    			if(conn!=null)conn.closeSession();
    		}
    	}
    	return orgId;
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 唐磊
     * 插入摸板维护页面中的填报范围的复选框记录（MRepRange中的childRepId,versionId,orgId)
     */
    public static boolean InsertOfMRepRange(MRepRangeForm mRepRangeForm) throws Exception{
    	boolean result=false;
    	DBConn conn=null;
    	Session session=null;
    	    	
    	try{
    		conn=new DBConn();
    		session=conn.beginTransaction();
    		if(mRepRangeForm!=null &&!mRepRangeForm.equals("")){
    			for(int i=0;i<mRepRangeForm.getSelectOrgIds().length;i++){
    				MRepRangePK mRepRangePK=new MRepRangePK();
        			MRepRange mRepRangePersistence=new MRepRange();
        			if(mRepRangeForm.getChildRepId()!=null && !mRepRangeForm.getChildRepId().equals("")){
        			mRepRangePK.setChildRepId(mRepRangeForm.getChildRepId());
        			}
        			if(mRepRangeForm.getVersionId()!=null && !mRepRangeForm.getVersionId().equals("")){
        			mRepRangePK.setVersionId(mRepRangeForm.getVersionId());
        			}
        			if(mRepRangeForm.getSelectOrgIds()!=null && mRepRangeForm.getSelectOrgIds().length>0){
        			mRepRangePK.setOrgId(mRepRangeForm.getSelectOrgIds()[i]);
        			}
        			
            		mRepRangePersistence.setComp_id(mRepRangePK);
            		if(mRepRangeForm.getOrgClsId()!=null && !mRepRangeForm.getOrgClsId().equals("")){
            		mRepRangePersistence.setOrgClsId(mRepRangeForm.getOrgClsId());
            		}
            		session.save(mRepRangePersistence);
    			}
    			
    			result=true;
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    	}catch(Exception e){
    		log.printStackTrace(e);
    	}finally{
    		if(conn!=null)conn.endTransaction(result);
    	}
    	return result;
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 唐磊
     * 根据UpdateMOrgAction中的条件删除所有符合条件的记录
     * @ versionId updateMOrgAction中传来的版本号参数
     * @ childRepId UpdateMOrgAction中传来的子报表id
     * @result 成功返回true，否则返回false
     * @serialData 2005-12-24
     */
    public static boolean removeOne(String versionId,String childRepId){
    	boolean result=false;
    	DBConn conn=null;
    	Session session=null;
    	
    	try{
    		conn=new DBConn();
    		session=conn.beginTransaction();
    		
    		String hql=" from MRepRange mrr where";
        	if(versionId!=null && !versionId.equals("")){
        		hql+=" mrr.comp_id.versionId='"+versionId+"'";
        	}
        	if(childRepId!=null && !childRepId.equals("")){
        		hql+=" and mrr.comp_id.childRepId='"+childRepId+"'";
        	}
        	
        	session.delete(hql.toString());
        	
        	session.flush();
    		result=true;
    		
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    	}catch(Exception e){
    		log.printStackTrace(e);
    	}finally{
    		if (conn!=null)conn.endTransaction(result);
    	}
    	return result;
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     *移除orgId下级机构
     * @param childRepid
     * @return
     * @author Administrator xsf
     */
    public static boolean removeLowerOrg(String  childRepId,String versionId, String orgId)
    {
    	boolean result=false;
    	DBConn conn=null;
    	Session session=null;
    	
    	try{
    		conn=new DBConn();
    		session=conn.beginTransaction();
    		
    		String hql=" from MRepRange mrr where";
        	if(versionId!=null && !versionId.equals("")){
        		hql+=" mrr.comp_id.versionId='"+versionId+"'";
        	}
        	if(childRepId!=null && !childRepId.equals("")){
        		hql+=" and mrr.comp_id.childRepId='"+childRepId+"'";
        	}
        	hql +="and mrr.comp_id.orgId in ("+StrutsOrgNetDelegate.selectAllLowerOrgIds(orgId)+")";
        	session.delete(hql.toString());
        	
        	session.flush();
    		result=true;
    		
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    	}catch(Exception e){
    		log.printStackTrace(e);
    	}finally{
    		if (conn!=null)conn.endTransaction(result);
    	}
    	return result;
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 通过子报表id，版本号，和机构分类id，取得该报表适用于这个机构分类的所有机构id（分页）
     * @author 姚捷
     * @param childRepId  子报表id 
     * @param versionId   版本号id
     * @param orgClsId  机构分类id
     * @param offset    偏移量
     * @param limit     最大取记录数
     * @return      机构id串
     */
    public static String getOrgIds(String childRepId,String versionId,String orgClsId,int offset,int limit)
    {
        String orgs = null;

        if (childRepId == null || childRepId.equals("") 
                ||versionId == null || versionId.equals("")
                || orgClsId==null || orgClsId.equals(""))
            return orgs;

        DBConn conn = null;
        Session session = null;
        try {
            String hql=" from MRepRange mrr where";
            hql+=" mrr.comp_id.childRepId='"+childRepId+"'"
                +" and mrr.comp_id.versionId='"+versionId+"'"
                +" and mrr.orgClsId='"+orgClsId+"'";
                
            conn = new DBConn();
            session = conn.openSession();
            
            Query query = session.createQuery(hql);
            query.setFirstResult(offset).setMaxResults(limit);
            List list = query.list();
            
            if (list != null && list.size() > 0) {
                orgs = "";
                Iterator it = list.iterator();
                if (it != null) {
                    MRepRange mRepRange = null;
                    while (it.hasNext()) {
                        mRepRange = (MRepRange) it.next();
                        if (mRepRange.getComp_id().getOrgId()!= null)
                            orgs += (orgs.equals("") ? "" : ",") + "'"
                                    + mRepRange.getComp_id().getOrgId().trim()
                                    + "'";
                    }
                }
            }
        } catch (HibernateException he) {
            log.printStackTrace(he);
        } finally {
            if (conn != null) conn.closeSession();
        }
  
        return orgs;
        
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 通过子报表id，版本号，和机构分类id，取得该报表适用于这个机构分类的所有机构id数量
     * @author 姚捷
     * @param childRepId  子报表id 
     * @param versionId   版本号id
     * @param orgClsId  机构分类id
     * @param offset    偏移量
     * @param limit     最大取记录数
     * @return      记录数量
     */
    public static int getOrgIdsCount(String childRepId,String versionId,String orgClsId)
    {
        int count = 0;

        if (childRepId == null || childRepId.equals("") 
                ||versionId == null || versionId.equals("")
                || orgClsId==null || orgClsId.equals(""))
            return count;

        DBConn conn = null;
        Session session = null;
        try {
            String hql="select count(*) from MRepRange mrr where";
            hql+=" mrr.comp_id.childRepId='"+childRepId+"'"
                +" and mrr.comp_id.versionId='"+versionId+"'"
                +" and mrr.orgClsId='"+orgClsId+"'";
                
            conn = new DBConn();
            session = conn.openSession();
            List list = session.createQuery(hql).list();
            
            if (list != null && list.size() > 0) {
                count = ((Integer)list.get(0)).intValue();
            }
        } catch (HibernateException he) {
            count = 0;
            log.printStackTrace(he);
        } finally {
            if (conn != null) conn.closeSession();
        }
  
        return count;
        
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 生成报送范围数据
     */
    public static boolean insertRange(RangeTempForm rangeTempForm){    	
    	boolean bool = false;
    	DBConn conn = null;
    	Session session = null;
    	Session gather_session = null;
    	com.gather.dao.DBConn gather_conn = null;
    	try{
    		/*
    		 * 根据机构分类通过临时表中的数据查询出报表ID和版本号信息
    		 */
    		if(rangeTempForm != null){
    			String hql="select distinct rt.childRepId,rt.versionId from RangeTemp rt where rt.orgClsId='" 
        			+ rangeTempForm.getOrgClsId() + "'";
        		conn = new DBConn();
        		session = conn.beginTransaction();
        		
        		gather_conn = new com.gather.dao.DBConn();
        		gather_session = gather_conn.beginTransaction();
        		
        		/*
        		 * 根据机构分类，去临时表中查询这个机构类别可以填报的哪些报表
        		 */
        		Query query = session.createQuery(hql);
        		List list = query.list();
        		if(list != null && list.size() > 0){
        			for(Iterator iter=list.iterator();iter.hasNext();){
        				Object[] object = (Object[])iter.next();
        				
        				/*
        				 * 用子报表ID和版本号封装报送范围的对象（内网）
        				 */
        				MRepRangePK mrepRangePK = new MRepRangePK();
        				mrepRangePK.setOrgId(rangeTempForm.getOrgId());
        				mrepRangePK.setChildRepId(String.valueOf(object[0]));
        				mrepRangePK.setVersionId(String.valueOf(object[1]));
        				
        				MRepRange mrp = new MRepRange();
        				mrp.setOrgClsId(rangeTempForm.getOrgClsId());
        				mrp.setComp_id(mrepRangePK);
        				
        				session.save(mrp);  
        				
        				/*
        				 * 用子报表ID和版本号封装报送范围的对象（外网）
        				 */
        				
        				com.gather.hibernate.MRepRangePK gather_mrepRangePK = new com.gather.hibernate.MRepRangePK();
        				gather_mrepRangePK.setOrgId(rangeTempForm.getOrgId());
        				gather_mrepRangePK.setChildRepId(String.valueOf(object[0]));
        				gather_mrepRangePK.setVersionId(String.valueOf(object[1]));
        				
        				com.gather.hibernate.MRepRange gather_mrp = new com.gather.hibernate.MRepRange();
        				gather_mrp.setComp_id(gather_mrepRangePK);
        				
        				gather_session.save(gather_mrp);
        			}
        			session.flush();
        			gather_conn.endTransaction(true);
        			bool = true;
        		}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(gather_conn != null)gather_conn.endTransaction(true);
    		bool = false;
    	}finally{
    		if(conn != null) conn.closeSession();
    		if(gather_conn != null) gather_conn.closeSession();
    	}
    	return bool;
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * @param reportInForm
     * @return
     */
    public static int getCount(ReportInForm reportInForm){
    	int count = 0;
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null){
    			String str = reportInForm.getOrgId();
    			String[] param = str.split(",");
    			    			
    			String hql = "select count(*) from MRepRange mrr where mrr.comp_id.orgId='"+ param[0] +"'";
    			
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			List list = session.createQuery(hql).list();
    			
    			if(list != null && list.size() > 0){
    				count = ((Integer)list.get(0)).intValue();
    			}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return count;
    }
    
    /***
     * 已使用hibernate 卞以刚 2011-12-21
     * @param reportInForm
     * @return
     */
    public static List select(ReportInForm reportInForm){
    	if(reportInForm == null || reportInForm.getOrgId() == null) 
    		return null;
    	
    	List rList = null;
    	DBConn conn = null;
    	Session session = null;
    	try{
    		conn = new DBConn();
			session = conn.beginTransaction();
			
			int term = reportInForm.getTerm().intValue();
			String rep_freq="";
			if(term == 12)
				rep_freq = "('月','季','半年','年')";
			else if(term == 6)
				rep_freq = "('月','季','半年')";
			else if(term == 3 || term == 9)
				rep_freq = "('月','季')";
			else rep_freq = "('月')";
			
			/**机构的报送范围（应报报表）
			 * 已增加数据库判断*/
			String hql = "";
			if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
				hql="from MRepRange mrr where mrr.comp_id.orgId='"+ reportInForm.getOrgId() +"' " +
							 "and to_date('" + reportInForm.getYear()+"-"+term+"-01','yyyy-mm-dd') " +
							 "between to_date(mrr.MChildReport.startDate,'yyyy-mm-dd') " +
							 "and to_date(mrr.MChildReport.endDate,'yyyy-mm-dd')";
			if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
				hql="from MRepRange mrr where mrr.comp_id.orgId='"+ reportInForm.getOrgId() +"' " +
				 "and convert(datetime,'" + reportInForm.getYear()+"-"+term+"-01',120) " +
				 "between convert(datetime,mrr.MChildReport.startDate,120) " +
				 "and convert(datetime,mrr.MChildReport.endDate,120)";
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if(list != null && list.size() > 0){
				rList = new ArrayList();
				MRepRange mRepRange = null;
				MChildReport mChildReport = null;
				
				/**考虑多币种的情况*/
				/**已使用hibernate 卞以刚 2011-12-21**/
				Map mutiCurrReportMap = MCurrUtil.newInstance().getMutiMCurrReportInForm();
				if(mutiCurrReportMap != null && mutiCurrReportMap.isEmpty() == false){
					for(Iterator iter=list.iterator();iter.hasNext();){
						mRepRange = (MRepRange)iter.next();
						mChildReport = mRepRange.getMChildReport();
						
						/**根据报表编号判断该报表是否存在多币种情况*/
						if(mutiCurrReportMap.get(mChildReport.getComp_id().getChildRepId()) != null){
							MRepRange repRange = null;
							MChildReport mcReport = null;
							ReportInForm mutiCurrReportInForm = (ReportInForm)mutiCurrReportMap.get(mChildReport.getComp_id().getChildRepId());
							List currList = mutiCurrReportInForm.getMCurr();
							if(currList != null && currList.size() > 0){
								for(Iterator currIter=currList.iterator();currIter.hasNext();){
									MCurrForm mCurrForm = (MCurrForm)currIter.next();
									
									mcReport = new MChildReport();
									repRange = new MRepRange();
									Set mActuRepSet = mChildReport.getMActuReps();
									Set marSet = new HashSet();
									/**根据报表日期过滤应报的报送频度*/
									for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
										MActuRep mActuRep = (MActuRep)iter2.next();	
										if(rep_freq.indexOf(mActuRep.getMRepFreq().getRepFreqName()) > -1)
											marSet.add(mActuRep);
									}
									mcReport.setMActuReps(marSet);
									mcReport.setTemplateType(mCurrForm.getCurName().split("_")[1]); //设置报表币种
									mcReport.setComp_id(mChildReport.getComp_id());
									mcReport.setReportName(mChildReport.getReportName());
									
									/**查看应报报表是否已报送（未审核和审核通过）*/
									Set reportInSet = mRepRange.getReportIns();
									Set riSet = new HashSet();
									for(Iterator iter3=reportInSet.iterator();iter3.hasNext();){
										ReportIn reportIn = (ReportIn)iter3.next();						
										if(reportIn.getTerm().intValue() == term 
												&& reportIn.getYear().intValue() == reportInForm.getYear().intValue() 
												&& (reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_PASS.intValue() 
														|| reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_UNCHECK.intValue()))
											riSet.add(reportIn);
									}
									repRange.setReportIns(riSet);
									repRange.setMChildReport(mcReport);
									rList.add(repRange);
								}
							}
						}else{ //报表为单一币种
							Set mActuRepSet = mChildReport.getMActuReps();
							Set marSet = new HashSet();
							/**根据报表日期过滤应报的报送频度*/
							for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
								MActuRep mActuRep = (MActuRep)iter2.next();	
								if(rep_freq.indexOf(mActuRep.getMRepFreq().getRepFreqName()) > -1)
									marSet.add(mActuRep);
							}
							mChildReport.setMActuReps(marSet);
							mChildReport.setTemplateType("人民币");
							
							/**查看应报报表是否已报送（未审核和审核通过）*/
							Set reportInSet = mRepRange.getReportIns();
							Set riSet = new HashSet();
							for(Iterator iter3=reportInSet.iterator();iter3.hasNext();){
								ReportIn reportIn = (ReportIn)iter3.next();						
								if(reportIn.getTerm().intValue() == term 
										&& reportIn.getYear().intValue() == reportInForm.getYear().intValue() 
										&& (reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_PASS.intValue() 
												|| reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_UNCHECK.intValue()))
									riSet.add(reportIn);
							}
							mRepRange.setReportIns(riSet);
							rList.add(mRepRange);
						}
					}
				}else{ //单一币种，不存在多币种
					for(Iterator iter=list.iterator();iter.hasNext();){
						mRepRange = (MRepRange)iter.next();
						mChildReport = mRepRange.getMChildReport();
						Set mActuRepSet = mChildReport.getMActuReps();
						Set marSet = new HashSet();
						/**根据报表日期过滤应报的报送频度*/
						for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
							MActuRep mActuRep = (MActuRep)iter2.next();	
							if(rep_freq.indexOf(mActuRep.getMRepFreq().getRepFreqName()) > -1)
								marSet.add(mActuRep);
						}
						mChildReport.setMActuReps(marSet);
						mChildReport.setTemplateType("人民币");
						
						/**查看应报报表是否已报送（未审核和审核通过）*/
						Set reportInSet = mRepRange.getReportIns();
						Set riSet = new HashSet();
						for(Iterator iter3=reportInSet.iterator();iter3.hasNext();){
							ReportIn reportIn = (ReportIn)iter3.next();						
							if(reportIn.getTerm().intValue() == term 
									&& reportIn.getYear().intValue() == reportInForm.getYear().intValue() 
									&& (reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_PASS.intValue() 
											|| reportIn.getCheckFlag().intValue() == Config.CHECK_FLAG_UNCHECK.intValue()))
								riSet.add(reportIn);
						}
						mRepRange.setReportIns(riSet);
						rList.add(mRepRange);
					}
				}
			}
			
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return rList;
    }
    
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 影响表：VIEW_M_REPORT REPORT_IN
     * @param reportInForm
     * @return
     */
    public static List selectNew(ReportInForm reportInForm){
    	if(reportInForm == null || reportInForm.getOrgId() == null) 
    		return null;
    	
    	List rList = null;
    	DBConn conn = null;
    	Connection cont = null;
    	Statement stmt = null;
    	ResultSet rs = null;
    	
    	try{
    		conn = new DBConn();
			
			int term = reportInForm.getTerm().intValue();
			String rep_freq="";
			if(term == 12)
				rep_freq = "(1,2,3,4)";
			else if(term == 6)
				rep_freq = "(1,2,3)";
			else if(term == 3 || term == 9)
				rep_freq = "(1,2)";
			else rep_freq = "(1)";
			
			/**机构的报送范围（应报报表）*/
			String sql = "select vm.CHILD_REP_ID,vm.VERSION_ID,vm.REPORT_NAME," +
				"vm.DATA_RANGE_ID,vm.DATA_RG_DESC,vm.REP_FREQ_ID,vm.REP_FREQ_NAME," +
				"vm.CUR_ID,vm.CUR_NAME,ri.CHECK_FLAG,ri.FORSE_REPORT_AGAIN_FLAG," +
				"ri.REPORT_DATE,ri.REP_IN_ID from VIEW_M_REPORT vm " +
				"left join REPORT_IN ri on " +
				"vm.ORG_ID=ri.ORG_ID and vm.CHILD_REP_ID=ri.CHILD_REP_ID " +
				"and vm.VERSION_ID=ri.VERSION_ID and vm.CUR_ID=ri.CUR_ID " +
				"and ri.YEAR=" +reportInForm.getYear()+ " and ri.TERM=" +term+ " and ri.TIMES=1 " +
				"where ('" +reportInForm.getYear()+ "-" +(term<10?"0"+term:term)+ "-01' between vm.START_DATE and vm.END_DATE) " +
				"and vm.REP_FREQ_ID in " +rep_freq+ " and vm.ORG_ID='"+reportInForm.getOrgId()+"'" +
				" order by vm.CHILD_REP_ID,vm.VERSION_ID";
				
			cont = conn.openSession().connection();
			rs = cont.createStatement().executeQuery(sql);
			
			rList = new ArrayList();
			Aditing aditing = null;
			
			while(rs.next()){
				aditing = new Aditing();
				aditing.setChildRepId(rs.getString("CHILD_REP_ID"));
				aditing.setVersionId(rs.getString("VERSION_ID"));
				aditing.setRepName(rs.getString("REPORT_NAME"));
				
				aditing.setActuFreqID(Integer.valueOf(rs.getInt("REP_FREQ_ID")));
				aditing.setActuFreqName(rs.getString("REP_FREQ_NAME"));
				aditing.setDataRgId(Integer.valueOf(rs.getInt("DATA_RANGE_ID")));
				aditing.setDataRgTypeName(rs.getString("DATA_RG_DESC"));
				aditing.setCurId(Integer.valueOf(rs.getInt("CUR_ID")));
				aditing.setCurrName(rs.getString("CUR_NAME"));
				
				aditing.setCheckFlag(Short.valueOf(rs.getShort("CHECK_FLAG")));
				aditing.setForseReportAgainFlag(Long.valueOf(rs.getLong("FORSE_REPORT_AGAIN_FLAG")));
				aditing.setReportDate(rs.getDate("REPORT_DATE"));
				aditing.setRepInId(Integer.valueOf(rs.getInt("REP_IN_ID")));
				aditing.setYear(reportInForm.getYear());
				aditing.setTerm(Integer.valueOf(term));
				
				rList.add(aditing);
				
			}
			
    	}catch(Exception he){
    		
    		rList = null;
    		log.printStackTrace(he);
    		
    	}finally{
    		
    		if(conn != null) 
    			conn.closeSession();
    		
    	}
    	return rList;
    }
    
    /***
     * 已使用hibernate 卞以刚 2011-12-22
     */
    /**对一张模板设置报送范围*/
    public static void updateBSFW(String childRepId,String versionId,ArrayList orgIds)
    {
    	if(childRepId==null) return;
    	if(versionId==null) return;
    	if(orgIds==null) return;
    	if(childRepId.equals("")) return;
    	if(versionId.equals("")) return;
    	if(orgIds.size()==0) return;
    	DBConn conn=new DBConn();
    	Session session=conn.beginTransaction();
    	MRepRangePK comp_id=new MRepRangePK();
    	comp_id.setChildRepId(childRepId);
    	comp_id.setVersionId(versionId);
    	
    	if(orgIds != null && orgIds.size() > 0){
    		for(int i=0;i<orgIds.size();i++)
        	{
            	MRepRange mrr=new MRepRange();
        		comp_id.setOrgId((String)orgIds.get(i));
        		mrr.setComp_id(comp_id);
        		//检查是否有重复记录
        		if(!recordIsExist(comp_id)){
    	    		try {
    	    			// System.out.println("record "+record+" is not exist,can insert!!!!!");
    					session.save(mrr);
    					session.flush();
    				} catch (HibernateException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
        		}else{
        			// System.out.println("record "+record+" is exist,can not insert!!!!!");
        		}
        	}
        	conn.endTransaction(true);
        	if(conn!=null)
        	conn.closeSession();
    	}
    }
    
    /**检查是否有重复记录*/
    public static boolean recordIsExist(MRepRangePK comp_id)
    {
    	boolean flag=true;
    	if(comp_id==null) return flag;
    	DBConn conn=new DBConn();
    	Session session=conn.openSession();
    	StringBuffer hql=new StringBuffer();
    	hql.append("from MRepRange mrr where mrr.comp_id.orgId='");
    	hql.append(comp_id.getOrgId());
    	hql.append("' and mrr.comp_id.childRepId='");
    	hql.append(comp_id.getChildRepId());
    	hql.append("' and mrr.comp_id.versionId='");
    	hql.append(comp_id.getVersionId());
    	hql.append("'");
    	
    	List list=null;
    	try {
			list=session.find(hql.toString());
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(conn!=null) conn.closeSession();
		}
		if(list==null){
			flag=false;
		}
		if(list.size()==0){
			flag=false;
		}
    	return flag;
    }
    
    public  List selectYBSL(ReportInForm reportInForm,Operator operator){
    	List rList = null;
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null && reportInForm.getOrgId() != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			//int term = Integer.parseInt(reportInForm.getSetDate());
    			int term = reportInForm.getTerm().intValue();
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    			    			
    			String hql = "from MRepFreq mrf where mrf.repFreqName in " + rep_freq;
    			 
    			List rep_freqList = session.createQuery(hql).list();
    		 
    			if(rep_freqList == null && rep_freqList.size() ==0)
    				return null;
    			
    			rep_freq = "";
    			for(int i=0;i<rep_freqList.size();i++){
    				MRepFreq mrepFreq = (MRepFreq)rep_freqList.get(i);
    				rep_freq += mrepFreq.getRepFreqId() + ",";
    			}
    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			
    			hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and '" +
						validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
    			
    			/** 加上报表是否已经发布  */
    			
    			hql +=" and  mrr.MChildReport.isPublic = 1" ;
    			
    			/**加上报送权限*/
    			if(operator == null) return resList;
    			if(operator.isSuperManager() == false){
    				if(operator.getChildRepReportPopedom() == null || operator.getChildRepReportPopedom().equals(""))
    					return resList;
    				/**已增加数据库判断*/
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
    					hql += " and '" + orgId + "'||mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
    					hql += " and '" + orgId + "'+mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    			}
    			hql += " order by mrr.MChildReport.comp_id.childRepId";
    	//		System.out.println("aaaaaaaa"+System.currentTimeMillis());
    			
    			Query query = session.createQuery(hql);
    			rList = query.list(); 
    			
    	//		System.out.println("bbbbbbbb"+System.currentTimeMillis());
    			for(Iterator iter=rList.iterator();iter.hasNext();){
    				MRepRange mRepRange = (MRepRange)iter.next();
    				MChildReport mChildReport = mRepRange.getMChildReport();
    				Set mActuRepSet = mChildReport.getMActuReps();
    				Map map = new HashMap();
    				    				
    				List currList = MCurrUtil.newInstance().isExist(mChildReport.getComp_id().getChildRepId());
    				
    				/**考虑多币种的情况**/
    				if(currList != null && currList.size() > 0){
    					for(int i=0;i<currList.size();i++){
    						MCurrForm mCurrForm = (MCurrForm)currList.get(i);
    						String currName = mCurrForm.getCurName().split("_")[1];
    						
    						for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
	        					MActuRep mActuRep = (MActuRep)iter2.next();
	        					Aditing aditing = new Aditing();
	        					Calendar cal = Calendar.getInstance();
	        	    			cal.set(year,term-1,1);
	        	    			
	        					int days = 0;
	        					try{
	        						days = mActuRep.getNormalTime().intValue();
	        						if(mActuRep.getDelayTime() != null)
	        							days += mActuRep.getDelayTime().intValue();
	        					}catch(Exception ex){
	        						days = 0;
	        					}
	        					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
	        							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
	        						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()+currName))
	        							continue;
	        						map.put(mActuRep.getMDataRgType().getDataRangeId()+currName,mActuRep.getMDataRgType().getDataRangeId());
	        						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
	        						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
	        						aditing.setActuFreqID(mActuRep.getMRepFreq().getRepFreqId());
	        						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
	        						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
	        						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
	        										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
	        										 + "-" + mActuRep.getMChildReport().getReportName();
	        						aditing.setRepName(repName);
	        						aditing.setYear(new Integer(year));
	        						aditing.setTerm(new Integer(term));
	        						aditing.setCurrName(currName);
	        						aditing.setCurId(mCurrForm.getCurId());
	        						aditing.setDataRgId(mActuRep.getMDataRgType().getDataRangeId());
	        						
	        						String sql = "from ReportIn ri where ri.times>0 and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + 
	        									 "' and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
	        									 " and ri.term=" + term + " and ri.orgId='" + orgId + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'" +
	        									 " and ri.MCurr.curName='" + currName + "'";
	        						
	        						List reportInList = session.find(sql);
	        						if(reportInList != null && reportInList.size() > 0){
	        							ReportIn reportIn = (ReportIn)reportInList.get(0);
	        							if(reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())){
	        								Set reportAgainSets = reportIn.getReportAgainSets();
	        								String cause = "";
	        								if(reportAgainSets != null && reportAgainSets.size() > 0){
	        									for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
	        										ReportAgainSet againSet = (ReportAgainSet)iterSet.next();
	        										cause = cause.equals("") ? againSet.getCause() : "\n" + cause + againSet.getCause();
	        									}
	        								}
	        								aditing.setWhy(cause);
	        							}
	        							aditing.setCheckFlag(reportIn.getCheckFlag());
	        							aditing.setRepInId(reportIn.getRepInId());
	        							aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());     
	        							aditing.setTblOuterValidateFlag(reportIn.getTblOuterValidateFlag());
	        						}else{
	        							aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
	        						}
	        						resList.add(aditing);
	        					}	
	        				}
    					}
    				}else{
    					for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
        					MActuRep mActuRep = (MActuRep)iter2.next();
        					Aditing aditing = new Aditing();
        					Calendar cal = Calendar.getInstance();
        	    			cal.set(year,term-1,1);
        	    			
        					int days = 0;
        					try{
        						days = mActuRep.getNormalTime().intValue();
        						if(mActuRep.getDelayTime() != null)
        							days += mActuRep.getDelayTime().intValue();
        					}catch(Exception ex){
        						days = 0;
        					}
        					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
        							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
        						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()))
        							continue;
        						map.put(mActuRep.getMDataRgType().getDataRangeId(),mActuRep.getMDataRgType().getDataRangeId());
        						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
        						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
        						aditing.setActuFreqID(mActuRep.getMRepFreq().getRepFreqId());
        						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
        						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
        						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
        										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
        										 + "-" + mActuRep.getMChildReport().getReportName();
        						aditing.setRepName(repName);
        						aditing.setYear(new Integer(year));
        						aditing.setTerm(new Integer(term));
        						aditing.setCurrName("人民币");
        						aditing.setCurId(new Integer("1"));
        						aditing.setDataRgId(mActuRep.getMDataRgType().getDataRangeId());
        						
        						String sql = "from ReportIn ri where ri.times>0 and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + 
        									 "' and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
        									 " and ri.term=" + term + " and ri.orgId='" + orgId + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'";
        						
        						List reportInList = session.find(sql);
        						if(reportInList != null && reportInList.size() > 0){
        							ReportIn reportIn = (ReportIn)reportInList.get(0);
        							if(reportIn.getCheckFlag()!=null && reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())){
        								Set reportAgainSets = reportIn.getReportAgainSets();
        								String cause = "";
        							
        								if(reportAgainSets != null && reportAgainSets.size() > 0){
        									for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
        										ReportAgainSet againSet = (ReportAgainSet)iterSet.next();
        										cause = cause.equals("") ? againSet.getCause() : "\n" + cause + againSet.getCause();
        									}
        								}
        								aditing.setWhy(cause);
        							}
        							aditing.setCheckFlag(reportIn.getCheckFlag());
        							aditing.setRepInId(reportIn.getRepInId());
        							aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());
        							aditing.setTblOuterValidateFlag(reportIn.getTblOuterValidateFlag());
        						}else{
        							aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
        						}
        						resList.add(aditing);
        					}	
        				}
    				}
    			}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
     /**
      * 已使用hibernate 卞以刚 2011-12-21
     *<p>描述:获得需要待报报表的数目</p>
     *<p>参数:</p>
     *<p>日期：2008-1-9</p>
     *<p>作者：曹发根</p>
     */
    public int selectDBReportCount(ReportInForm reportInForm, Operator operator) {
		int count = 0;
		DBConn conn = null;
		try {
			conn = new DBConn();
			
			int term = reportInForm.getTerm().intValue();
			int year = reportInForm.getYear().intValue();

			String rep_freq = "";
			if (term == 12)
				rep_freq = "('月','季','半年','年','日')";
			else if (term == 6)
				rep_freq = "('月','季','半年','日')";
			else if (term == 3 || term == 9)
				rep_freq = "('月','季','日')";
			else
				rep_freq = "('月','日')";
			
			String strTerm =String.valueOf(term);
			if(term<10)
				strTerm = "0"+term;
			
			String hql="select count(*) from ViewMReport a where a.startDate<='"+reportInForm.getDate()+"'" +
					" and a.endDate>='"+reportInForm.getDate()+"'" +
					" and a.repFreqName in" + rep_freq;
			//+" and a.comp_id.orgId='"+operator.getOrgId()+"'";
			/**	加报表名 */
			if(reportInForm.getRepName() != null){
				hql += " and a.reportName like '%" + reportInForm.getRepName() + "%'";
			}
			
			/** 机构id*/
			if(reportInForm.getOrgId() != null && !reportInForm.getOrgId().equals("")
					&& !reportInForm.getOrgId().equals(com.cbrc.smis.common.Config.DEFAULT_VALUE)){
				hql += " and a.comp_id.orgId='" + reportInForm.getOrgId()+"'";
			}
			/**加上报送权限
			 * 已增加数据库判断*/
			if(operator.isSuperManager() == false){
				
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
					hql += " and a.comp_id.orgId||a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
					hql += " and a.comp_id.orgId+a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
			}
			List list=conn.openSession().find(hql);
    		if(list != null && list.size() > 0){
    			count = ((Integer)list.get(0)).intValue();
    		}
			
		} catch (Exception he) {
			log.printStackTrace(he);

		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return count;
	}
    /**
     * 已使用hibernate 卞以刚 2011-12-21
     * 有一处使用jdbc 需测试
     *<p>描述:获得需要待报报表</p>
     *<p>参数:</p>
     *<p>日期：2008-1-9</p>
     *<p>作者：曹发根</p>
     */
    public List selectDBReportRecord(ReportInForm reportInForm, Operator operator,int offset,int limit) {
		List result = new ArrayList();
		DBConn conn = null;
		Session session = null;
		try {

			conn = new DBConn();
			session = conn.openSession();
			
			int term = reportInForm.getTerm().intValue();
			int year = reportInForm.getYear().intValue();

			String rep_freq = "";
			if (term == 12)
				rep_freq = "('月','季','半年','年','日')";
			else if (term == 6)
				rep_freq = "('月','季','半年','日')";
			else if (term == 3 || term == 9)
				rep_freq = "('月','季','日')";
			else
				rep_freq = "('月','日')";
			String strTerm =String.valueOf(term);
			if(term<10)  
			 strTerm ="0"+term;
			String hql="from ViewMReport a where a.startDate<='"+reportInForm.getDate()+"' and a.endDate>='"+reportInForm.getDate()+"'" +
					" and a.repFreqName in" + rep_freq;
			//+" and a.comp_id.orgId='"+operator.getOrgId()+"'";
			/**	加报表名 */
			if(reportInForm.getRepName() != null){
				hql += " and a.reportName like '%" + reportInForm.getRepName() + "%'";
			}
			/** 机构id*/
			if(reportInForm.getOrgId() != null && !reportInForm.getOrgId().equals("")
				&& !reportInForm.getOrgId().equals(com.cbrc.smis.common.Config.DEFAULT_VALUE)){
				hql += " and a.comp_id.orgId='" + reportInForm.getOrgId()+"'";
			}
			
			/**加上报送权限*/
			if(operator.isSuperManager() == false){
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
					hql += " and a.comp_id.orgId||a.comp_id.childRepId in ("+ 
									operator.getChildRepReportPopedom() +")";
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
					hql += " and a.comp_id.orgId+a.comp_id.childRepId in ("+ 
					operator.getChildRepReportPopedom() +")";
			}
			hql +=" order by a.comp_id.orgId,a.comp_id.childRepId";
			Query query = session.createQuery(hql);
			List list=query.list();
			int arraySize = limit + offset;
			if(list.size() < (limit + offset)) arraySize = list.size();
    		for(int i=offset;i<arraySize;i++){
    			ViewMReport viewMReport=(ViewMReport)list.get(i);
    			Aditing aditing = new Aditing();
    			aditing.setDataRgTypeName(viewMReport.getDataRgTypeName());
				aditing.setActuFreqName(viewMReport.getRepFreqName());
				aditing.setActuFreqID(viewMReport.getRepFreqId());
				aditing.setChildRepId(viewMReport.getComp_id().getChildRepId());
				aditing.setVersionId(viewMReport.getComp_id().getVersionId());
				aditing.setRepName(viewMReport.getReportName());
				if (aditing.getActuFreqID() != null) {
					// yyyy-mm-dd 根据日期确定该日期具体的期数日期
					String trueDate = DateUtil
							.getFreqDateLast(reportInForm.getDate(),
									aditing.getActuFreqID());
					aditing.setYear(Integer.valueOf(trueDate.substring(0, 4)));
					aditing.setTerm(Integer.valueOf(trueDate.substring(5, 7)));
					aditing.setDay(Integer.valueOf(trueDate.substring(8, 10)));
				}

				aditing.setCurrName(viewMReport.getCurName());
				aditing.setCurId(viewMReport.getComp_id().getCurId());
				aditing.setDataRgId(viewMReport.getComp_id().getDataRangeId());
				aditing.setOrgId(viewMReport.getComp_id().getOrgId());
				aditing.setOrgName(AFOrgDelegate.getOrgInfo(
						viewMReport.getComp_id().getOrgId()).getOrgName());
				aditing.setReportStyle(viewMReport.getReportStyle());
				String sql = "from ReportIn ri where ri.times=1 and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + "'  and ri.MCurr.curId="+aditing.getCurId()+
							 " and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
							 " and ri.term=" + term + " and ri.orgId='" + aditing.getOrgId() + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'";
				
				List reportInList = session.find(sql);
				if(reportInList != null && reportInList.size() > 0){
					ReportIn reportIn = (ReportIn)reportInList.get(0);
					if(reportIn.getCheckFlag()!=null && 
							( reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())
							//|| reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_RECHECKFAILED.toString())
							)){
						Set reportAgainSets = reportIn.getReportAgainSets();
						String cause = "";
						int rasId = 0;
						if(reportAgainSets != null && reportAgainSets.size() > 0){
							for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
								ReportAgainSet againSet = (ReportAgainSet)iterSet.next();

								if(againSet.getRasId().intValue() > rasId){
									cause=againSet.getCause();
									rasId = againSet.getRasId().intValue();
								}
							}
						}
						aditing.setWhy(cause);
					}
					/**
					 * 如果报表状态为 
					 * 2--已校验/4--未校验/-1--审核不通过
					 * 判断报表是否已经有汇总数据，将汇总报表ID放入页面展示对象中
					 */
					if(reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_AFTERJY.shortValue() 
							|| reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_FAILED.shortValue() 
							|| reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_AFTERSAVE.shortValue()){
						//jdbc技术 需要修改 卞以刚 2011-12-21
						ReportInForm collReportInForm = StrutsReportInInfoDelegate.getReportToCollect(reportIn.getRepInId());
						if(collReportInForm != null) 
							aditing.setCompRepInId(collReportInForm.getRepInId());
						else
							aditing.setCompRepInId(new Integer(0));  //没有汇总报表，置0
					}
					aditing.setCheckFlag(reportIn.getCheckFlag());
					aditing.setRepInId(reportIn.getRepInId());
					aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());
					aditing.setTblOuterValidateFlag(reportIn.getTblOuterValidateFlag());
				}else{
					aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
				}
				result.add(aditing);
    			
    		}
			
		} catch (Exception he) {
			log.printStackTrace(he);

		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}
    
    /**
     * 不带分页
     * 已使用hibernate 卞以刚 2011-12-21
     * 有一处使用jdbc 需测试
     *<p>描述:获得需要待报报表</p>
     *<p>参数:</p>
     *<p>日期：2008-1-9</p>
     *<p>作者：曹发根</p>
     */
    public List selectDBReportRecord(ReportInForm reportInForm, Operator operator) {
		List result = new ArrayList();
		DBConn conn = null;
		Session session = null;
		try {

			conn = new DBConn();
			session = conn.openSession();
			
			int term = reportInForm.getTerm().intValue();
			int year = reportInForm.getYear().intValue();

			String rep_freq = "";
			if (term == 12)
				rep_freq = "('月','季','半年','年','日')";
			else if (term == 6)
				rep_freq = "('月','季','半年','日')";
			else if (term == 3 || term == 9)
				rep_freq = "('月','季','日')";
			else
				rep_freq = "('月','日')";
			String strTerm =String.valueOf(term);
			if(term<10)  
			 strTerm ="0"+term;
			String hql="from ViewMReport a where a.startDate<='"+reportInForm.getDate()+"' and a.endDate>='"+reportInForm.getDate()+"'" +
					" and a.repFreqName in" + rep_freq;
			//+" and a.comp_id.orgId='"+operator.getOrgId()+"'";
			/**	加报表名 */
			if(reportInForm.getRepName() != null){
				hql += " and a.reportName like '%" + reportInForm.getRepName() + "%'";
			}
			/** 机构id*/
			if(reportInForm.getOrgId() != null && !reportInForm.getOrgId().equals("")
				&& !reportInForm.getOrgId().equals(com.cbrc.smis.common.Config.DEFAULT_VALUE)){
				hql += " and a.comp_id.orgId='" + reportInForm.getOrgId()+"'";
			}
			
			/**加上报送权限*/
			if(operator.isSuperManager() == false){
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
					hql += " and a.comp_id.orgId||a.comp_id.childRepId in ("+ 
									operator.getChildRepReportPopedom() +")";
				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
					hql += " and a.comp_id.orgId+a.comp_id.childRepId in ("+ 
					operator.getChildRepReportPopedom() +")";
			}
			hql +=" order by a.comp_id.orgId,a.comp_id.childRepId";
			Query query = session.createQuery(hql);
			List list=query.list();
			
			
    		for(int i=0;i<list.size();i++){
    			ViewMReport viewMReport=(ViewMReport)list.get(i);
    			Aditing aditing = new Aditing();
    			aditing.setDataRgTypeName(viewMReport.getDataRgTypeName());
				aditing.setActuFreqName(viewMReport.getRepFreqName());
				aditing.setActuFreqID(viewMReport.getRepFreqId());
				aditing.setChildRepId(viewMReport.getComp_id().getChildRepId());
				aditing.setVersionId(viewMReport.getComp_id().getVersionId());
				aditing.setRepName(viewMReport.getReportName());
				if (aditing.getActuFreqID() != null) {
					// yyyy-mm-dd 根据日期确定该日期具体的期数日期
					String trueDate = DateUtil
							.getFreqDateLast(reportInForm.getDate(),
									aditing.getActuFreqID());
					aditing.setYear(Integer.valueOf(trueDate.substring(0, 4)));
					aditing.setTerm(Integer.valueOf(trueDate.substring(5, 7)));
					aditing.setDay(Integer.valueOf(trueDate.substring(8, 10)));
				}

				aditing.setCurrName(viewMReport.getCurName());
				aditing.setCurId(viewMReport.getComp_id().getCurId());
				aditing.setDataRgId(viewMReport.getComp_id().getDataRangeId());
				aditing.setOrgId(viewMReport.getComp_id().getOrgId());
				aditing.setOrgName(AFOrgDelegate.getOrgInfo(
						viewMReport.getComp_id().getOrgId()).getOrgName());
				aditing.setReportStyle(viewMReport.getReportStyle());
				String sql = "from ReportIn ri where ri.times=1 and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + "'  and ri.MCurr.curId="+aditing.getCurId()+
							 " and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
							 " and ri.term=" + term + " and ri.orgId='" + aditing.getOrgId() + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'";
				
				List reportInList = session.find(sql);
				if(reportInList != null && reportInList.size() > 0){
					ReportIn reportIn = (ReportIn)reportInList.get(0);
					if(reportIn.getCheckFlag()!=null && 
							( reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())
							//|| reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_RECHECKFAILED.toString())
							)){
						Set reportAgainSets = reportIn.getReportAgainSets();
						String cause = "";
						int rasId = 0;
						if(reportAgainSets != null && reportAgainSets.size() > 0){
							for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
								ReportAgainSet againSet = (ReportAgainSet)iterSet.next();

								if(againSet.getRasId().intValue() > rasId){
									cause=againSet.getCause();
									rasId = againSet.getRasId().intValue();
								}
							}
						}
						aditing.setWhy(cause);
					}
					/**
					 * 如果报表状态为 
					 * 2--已校验/4--未校验/-1--审核不通过
					 * 判断报表是否已经有汇总数据，将汇总报表ID放入页面展示对象中
					 */
					if(reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_AFTERJY.shortValue() 
							|| reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_FAILED.shortValue() 
							|| reportIn.getCheckFlag().shortValue() == Config.CHECK_FLAG_AFTERSAVE.shortValue()){
						//jdbc技术 需要修改 卞以刚 2011-12-21
						ReportInForm collReportInForm = StrutsReportInInfoDelegate.getReportToCollect(reportIn.getRepInId());
						if(collReportInForm != null) 
							aditing.setCompRepInId(collReportInForm.getRepInId());
						else
							aditing.setCompRepInId(new Integer(0));  //没有汇总报表，置0
					}
					aditing.setCheckFlag(reportIn.getCheckFlag());
					aditing.setRepInId(reportIn.getRepInId());
					aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());
					aditing.setTblOuterValidateFlag(reportIn.getTblOuterValidateFlag());
				}else{
					aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
				}
				result.add(aditing);
    			
    		}
			
		} catch (Exception he) {
			log.printStackTrace(he);

		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}
    
    public static boolean isUserGrpYB(ReportInForm reportInForm,String userGrpIds){    	
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			int term = Integer.parseInt(reportInForm.getSetDate());
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);

    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			
    			String hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and mrr.comp_id.childRepId in(select distinct ra.comp_id.childRepId " +
    					"from ReportAllot ra where ra.comp_id.userGrpId in (" + userGrpIds + ")) and '" +	validate_date +
    					"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate order by mrr.MChildReport.comp_id.childRepId";
    			
    			Query query = session.createQuery(hql);
    			List rList = query.list();
    			if(rList != null && rList.size() > 0) return true;
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    		return false;
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return false;
    }
    
    /**
     * 查询用户组应报报表
     * @param reportInForm
     * @param userGrpIds
     * @return
     */
    public static List selectYBSL(ReportInForm reportInForm,String userGrpIds){
    	List rList = null;
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			int term = Integer.parseInt(reportInForm.getSetDate());
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    			    			
    			String hql = "from MRepFreq mrf where mrf.repFreqName in " + rep_freq;
    			List rep_freqList = session.createQuery(hql).list();
    			
    			if(rep_freqList == null && rep_freqList.size() ==0)
    				return null;
    			
    			rep_freq = "";
    			for(int i=0;i<rep_freqList.size();i++){
    				MRepFreq mrepFreq = (MRepFreq)rep_freqList.get(i);
    				rep_freq += mrepFreq.getRepFreqId() + ",";
    			}
    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			
    			hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and mrr.comp_id.childRepId in(select distinct ra.comp_id.childRepId " +
    					"from ReportAllot ra where ra.comp_id.userGrpId in (" + userGrpIds + ")) and '" +	validate_date +
    					"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate order by mrr.MChildReport.comp_id.childRepId";
    			
    			Query query = session.createQuery(hql);
    			rList = query.list();
    			
    			for(Iterator iter=rList.iterator();iter.hasNext();){
    				MRepRange mRepRange = (MRepRange)iter.next();
    				MChildReport mChildReport = mRepRange.getMChildReport();
    				Set mActuRepSet = mChildReport.getMActuReps();
    				Map map = new HashMap();
    				    				
    				List currList = MCurrUtil.newInstance().isExist(mChildReport.getComp_id().getChildRepId());
    				
    				/**考虑多币种的情况**/
    				if(currList != null && currList.size() > 0){
    					for(int i=0;i<currList.size();i++){
    						MCurrForm mCurrForm = (MCurrForm)currList.get(i);
    						String currName = mCurrForm.getCurName().split("_")[1];
    						
    						for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
	        					MActuRep mActuRep = (MActuRep)iter2.next();
	        					Aditing aditing = new Aditing();
	        					Calendar cal = Calendar.getInstance();
	        	    			cal.set(year,term-1,1);
	        	    			
	        					int days = 0;
	        					try{
	        						days = mActuRep.getNormalTime().intValue();
	        						if(mActuRep.getDelayTime() != null)
	        							days += mActuRep.getDelayTime().intValue();
	        					}catch(Exception ex){
	        						days = 0;
	        					}
	        					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
	        							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
	        						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()+currName))
	        							continue;
	        						map.put(mActuRep.getMDataRgType().getDataRangeId()+currName,mActuRep.getMDataRgType().getDataRangeId());
	        						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
	        						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
	        						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
	        						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
	        						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
	        										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
	        										 + "-" + mActuRep.getMChildReport().getReportName();
	        						aditing.setRepName(repName);
	        						aditing.setYear(new Integer(year));
	        						aditing.setTerm(new Integer(term));
	        						aditing.setCurrName(currName);
	        						aditing.setCurId(mCurrForm.getCurId());
	        						
	        						String sql = "from ReportIn ri where ri.times=(select max(r.times) from ReportIn r where r.MChildReport.comp_id.childRepId" +
	        									 "=ri.MChildReport.comp_id.childRepId and r.MChildReport.comp_id.versionId=ri.MChildReport.comp_id.versionId and " +
	        									 "r.MDataRgType.dataRangeId=ri.MDataRgType.dataRangeId and r.orgId=ri.orgId and r.MCurr.curId=ri.MCurr.curId and " +
	        									 "r.year=ri.year and r.term=ri.term) and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + 
	        									 "' and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
	        									 " and ri.term=" + term + " and ri.orgId='" + orgId + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'" +
	        									 " and ri.MCurr.curName='" + currName + "'";
	        						
	        						List reportInList = session.find(sql);
	        						if(reportInList != null && reportInList.size() > 0){
	        							ReportIn reportIn = (ReportIn)reportInList.get(0);
	        							if(reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())){
	        								Set reportAgainSets = reportIn.getReportAgainSets();
	        								String cause = "";
	        								if(reportAgainSets != null && reportAgainSets.size() > 0){
	        									for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
	        										ReportAgainSet againSet = (ReportAgainSet)iterSet.next();
	        										cause = cause.equals("") ? againSet.getCause() : "\n" + cause + againSet.getCause();
	        									}
	        								}
	        								aditing.setWhy(cause);
	        							}
	        							aditing.setCheckFlag(reportIn.getCheckFlag());
	        							aditing.setRepInId(reportIn.getRepInId());
	        							aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());        	        							
	        						}else{
	        							aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
	        						}
	        						resList.add(aditing);
	        					}	
	        				}
    					}
    				}else{
    					for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
        					MActuRep mActuRep = (MActuRep)iter2.next();
        					Aditing aditing = new Aditing();
        					Calendar cal = Calendar.getInstance();
        	    			cal.set(year,term-1,1);
        	    			
        					int days = 0;
        					try{
        						days = mActuRep.getNormalTime().intValue();
        						if(mActuRep.getDelayTime() != null)
        							days += mActuRep.getDelayTime().intValue();
        					}catch(Exception ex){
        						days = 0;
        					}
        					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
        							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
        						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()))
        							continue;
        						map.put(mActuRep.getMDataRgType().getDataRangeId(),mActuRep.getMDataRgType().getDataRangeId());
        						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
        						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
        						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
        						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
        						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
        										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
        										 + "-" + mActuRep.getMChildReport().getReportName();
        						aditing.setRepName(repName);
        						aditing.setYear(new Integer(year));
        						aditing.setTerm(new Integer(term));
        						aditing.setCurrName("人民币");
        						
        						String sql = "from ReportIn ri where ri.times=(select max(r.times) from ReportIn r where r.MChildReport.comp_id.childRepId" +
        									 "=ri.MChildReport.comp_id.childRepId and r.MChildReport.comp_id.versionId=ri.MChildReport.comp_id.versionId and " +
        									 "r.MDataRgType.dataRangeId=ri.MDataRgType.dataRangeId and r.orgId=ri.orgId and r.MCurr.curId=ri.MCurr.curId and " +
        									 "r.year=ri.year and r.term=ri.term) and ri.MChildReport.comp_id.versionId='" + aditing.getVersionId() + 
        									 "' and ri.MChildReport.comp_id.childRepId='" + aditing.getChildRepId() + "' and ri.year=" + year + 
        									 " and ri.term=" + term + " and ri.orgId='" + orgId + "' and ri.MDataRgType.dataRgDesc='" + aditing.getDataRgTypeName()+"'";
        						
        						List reportInList = session.find(sql);
        						if(reportInList != null && reportInList.size() > 0){
        							ReportIn reportIn = (ReportIn)reportInList.get(0);
        							if(reportIn.getCheckFlag().toString().equals(Config.CHECK_FLAG_FAILED.toString())){
        								Set reportAgainSets = reportIn.getReportAgainSets();
        								String cause = "";
        								if(reportAgainSets != null && reportAgainSets.size() > 0){
        									for(Iterator iterSet=reportAgainSets.iterator();iterSet.hasNext();){
        										ReportAgainSet againSet = (ReportAgainSet)iterSet.next();
        										cause = cause.equals("") ? againSet.getCause() : "\n" + cause + againSet.getCause();
        									}
        								}
        								aditing.setWhy(cause);
        							}
        							aditing.setCheckFlag(reportIn.getCheckFlag());
        							aditing.setRepInId(reportIn.getRepInId());
        							aditing.setTblInnerValidateFlag(reportIn.getTblInnerValidateFlag());
        							
        						}else{
        							aditing.setCheckFlag(Config.CHECK_FLAG_UNREPORT);
        						}
        						resList.add(aditing);
        					}	
        				}
    				}
    			}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
    
    /**
     * 数据文件下载的查询
     * @param reportInForm
     * @param operator
     * @return
     */
    public static List selectYBSJWJ(ReportInForm reportInForm,Operator operator){    	 
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null && reportInForm.getOrgId() != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			int term = Integer.parseInt(reportInForm.getSetDate());
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    			    			
    			String hql = "from MRepFreq mrf where mrf.repFreqName in " + rep_freq;
    			List rep_freqList = session.createQuery(hql).list();
    			
    			if(rep_freqList == null && rep_freqList.size() ==0)
    				return null;
    			
    			rep_freq = "";
    			for(int i=0;i<rep_freqList.size();i++){
    				MRepFreq mrepFreq = (MRepFreq)rep_freqList.get(i);
    				rep_freq += mrepFreq.getRepFreqId() + ",";
    			}
    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			
    			hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and '" +
						validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
    			/**加上报送权限
    			 * 已增加数据库判断*/
    			if(operator == null) return resList;
    			if(operator.isSuperManager() == false){
    				if(operator.getChildRepReportPopedom() == null || operator.getChildRepReportPopedom().equals(""))
    					return resList;
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
    					hql += " and '" + orgId + "'||mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
    					hql += " and '" + orgId + "'+mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    			}
    			hql += " order by mrr.MChildReport.comp_id.childRepId";
    			Query query = session.createQuery(hql);
    			List rList = query.list();
    			
    			for(Iterator iter=rList.iterator();iter.hasNext();){
    				MRepRange mRepRange = (MRepRange)iter.next();
    				MChildReport mChildReport = mRepRange.getMChildReport();
    				Set mActuRepSet = mChildReport.getMActuReps();
    				Map map = new HashMap();
    				for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
    					MActuRep mActuRep = (MActuRep)iter2.next();
    					Aditing aditing = new Aditing();
    					Calendar cal = Calendar.getInstance();
    	    			cal.set(year,term-1,1);
    	    			
    					int days = 0;
    					try{
    						days = mActuRep.getNormalTime().intValue();
    						if(mActuRep.getDelayTime() != null)
    							days += mActuRep.getDelayTime().intValue();
    					}catch(Exception ex){
    						days = 0;
    					}
    					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
    							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
    						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()))
    							continue;
    						map.put(mActuRep.getMDataRgType().getDataRangeId(),mActuRep.getMDataRgType().getDataRangeId());
    						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
    						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
    						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
    						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
    						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
    										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
    										 + "-" + mActuRep.getMChildReport().getReportName();
    						aditing.setRepName(repName);
    						aditing.setYear(new Integer(year));
    						aditing.setTerm(new Integer(term));
    						
    						resList.add(aditing);
    						break;
    					}	
    				}
    				
    			}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
    
    /**
     * 数据文件下载的查询  wh修改
     * @param reportInForm
     * @param operator
     * @return
     */
    public static List selectYBSJList(ReportInForm reportInForm,Operator operator){    	 
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null && reportInForm.getOrgId() != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			int term = Integer.parseInt(reportInForm.getSetDate());
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    			    			
    			String hql = "from MRepFreq mrf where mrf.repFreqName in " + rep_freq;
    			List rep_freqList = session.createQuery(hql).list();
    			
    			if(rep_freqList == null && rep_freqList.size() ==0)
    				return null;
    			
    			rep_freq = "";
    			for(int i=0;i<rep_freqList.size();i++){
    				MRepFreq mrepFreq = (MRepFreq)rep_freqList.get(i);
    				rep_freq += mrepFreq.getRepFreqId() + ",";
    			}
    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			//如果是所有下一级分支机构
    			if(orgId.equals("allSubOrg")){
    				hql = "from MRepRange mrr where mrr.comp_id.orgId in("+ operator.getChildOrgIds() +") and '" +
					validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
    			}else{
    				hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and '" +
					validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
    			}
    			String reportName = reportInForm.getRepName();
    			if(reportName != null && !reportName.trim().equals("")){
    				
    				hql +=" and mrr.MChildReport.reportName like '%"+reportName.trim()+"%'";
    			}
    			
    			/**加上报送权限
    			 * 已增加数据库判断*/
    			if(operator == null) return resList;
    			if(operator.isSuperManager() == false){
    				if(operator.getChildRepReportPopedom() == null || operator.getChildRepReportPopedom().equals(""))
    					return resList;
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
    					hql += " and '" + orgId + "'||mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    				if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
    					hql += " and '" + orgId + "'+mrr.MChildReport.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
    			}
    			
    			hql += " order by mrr.MChildReport.comp_id.childRepId";
    			Query query = session.createQuery(hql);
    			List rList = query.list();
    			
    			for(Iterator iter=rList.iterator();iter.hasNext();){
    				MRepRange mRepRange = (MRepRange)iter.next();
    				MChildReport mChildReport = mRepRange.getMChildReport();
    				Set mActuRepSet = mChildReport.getMActuReps();
    				Map map = new HashMap();
    				
    				for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
    					MActuRep mActuRep = (MActuRep)iter2.next();
    					Aditing aditing = new Aditing();
    					Calendar cal = Calendar.getInstance();
    	    			cal.set(year,term-1,1);
    	    			
    					int days = 0;
    					try{
    						days = mActuRep.getNormalTime().intValue();
    						if(mActuRep.getDelayTime() != null)
    							days += mActuRep.getDelayTime().intValue();
    					}catch(Exception ex){
    						days = 0;
    					}
    					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
    							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
    						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()))
    							continue;
    						map.put(mActuRep.getMDataRgType().getDataRangeId(),mActuRep.getMDataRgType().getDataRangeId());
    						
    						aditing.setDataRgId(mActuRep.getMDataRgType().getDataRangeId());
    						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
    						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
    						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
    						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
    						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
    										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
    										 + "-" + mActuRep.getMChildReport().getReportName();
    						aditing.setRepName(repName);
    						OrgNet org=(OrgNet)session.get(OrgNet.class, mRepRange.getComp_id().getOrgId());
    						aditing.setOrgName(org.getOrgName());
    						aditing.setOrgId(mRepRange.getComp_id().getOrgId());
    						aditing.setYear(new Integer(year));
    						aditing.setTerm(new Integer(term));
    						
    						resList.add(aditing);
    						break;
    					}	
    				}
    		}
    		}	
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
    /**
     * 数据文件下载
     * @param reportInForm
     * @param operator
     * @return  WH
     */
    public static List selectYBSJListNew(ReportInForm reportInForm,Operator operator){    	 
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null && reportInForm.getOrgId() != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			int term = 0;
    			if(reportInForm.getSetDate()!=null)
    				term = Integer.parseInt(reportInForm.getSetDate());
    			else term = reportInForm.getTerm();
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    
    	String strTerm = String.valueOf(term);
    	if(term<10) 
    		strTerm="0"+term;
    	    String hql="from ViewMReport a where a.startDate<='"+year+"-"+strTerm+"-01' and a.endDate>='"+year+"-"+strTerm+"-01'" +
				" and a.repFreqName in"+rep_freq+" and a.comp_id.orgId='"+operator.getOrgId()+"'";
		/**加上报送权限
		 * 已增加数据库判断*/
		if(operator.isSuperManager() == false){
			if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("oracle"))
				hql += " and '" + operator.getOrgId() + "'||a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
			if(com.cbrc.smis.common.Config.DB_SERVER_TYPE.equals("sqlserver"))
				hql += " and '" + operator.getOrgId() + "'+a.comp_id.childRepId in ("+ operator.getChildRepReportPopedom() +")";
		}
		String repName = reportInForm.getRepName();
		if(repName!=null && !"".equals(repName.trim())){
			hql += " and a.reportName like '%"+repName+"%' ";
			
		}
		hql +=" order by a.comp_id.childRepId";
		Query query = session.createQuery(hql);
		//query.setFirstResult(offset).setMaxResults(limit);
		List list=query.list();
			for(int i=0;i<list.size();i++){
				//if((i>0&&i<=offset)||i>(offset+limit)) continue;
				ViewMReport viewMReport=(ViewMReport)list.get(i);
				Aditing aditing = new Aditing();
				aditing.setDataRgTypeName(viewMReport.getDataRgTypeName());
				aditing.setActuFreqName(viewMReport.getRepFreqName());
				aditing.setActuFreqID(viewMReport.getRepFreqId());
				aditing.setChildRepId(viewMReport.getComp_id().getChildRepId());
				aditing.setVersionId(viewMReport.getComp_id().getVersionId());
				aditing.setRepName(viewMReport.getReportName());
				aditing.setYear(new Integer(year));
				aditing.setTerm(new Integer(term));
				aditing.setCurrName(viewMReport.getCurName());
				aditing.setCurId(viewMReport.getComp_id().getCurId());
				aditing.setDataRgId(viewMReport.getComp_id().getDataRangeId());
				//加频度
				aditing.setActuFreqID(viewMReport.getRepFreqId());
				OrgNet org=(OrgNet)session.get(OrgNet.class, viewMReport.getComp_id().getOrgId());
				aditing.setOrgName(org.getOrgName());
	    					 	aditing.setOrgName(org.getOrgName());
	    						aditing.setOrgId(org.getOrgId());
	    						aditing.setYear(new Integer(year));
	    						aditing.setTerm(new Integer(term));
	    						
	    						resList.add(aditing);
	    					 
	    			 
    		}
    		}	
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
    /**数据文件下载的查询**/
    public static List selectYBSJWJ(ReportInForm reportInForm,String userGrpIds){
    	List rList = null;
    	List resList = new ArrayList();
    	DBConn conn = null;
    	Session session = null;
    	try{
    		if(reportInForm != null){
    			conn = new DBConn();
    			session = conn.beginTransaction();
    			
    			int term = Integer.parseInt(reportInForm.getSetDate());
    			int year = reportInForm.getYear().intValue();
    			
    			Calendar calendar = Calendar.getInstance();
    			calendar.set(year,term-1,1);
    			
    			String rep_freq="";
    			if(term == 12)
    				rep_freq = "('月','季','半年','年')";
    			else if(term == 6)
    				rep_freq = "('月','季','半年')";
    			else if(term == 3 || term == 9)
    				rep_freq = "('月','季')";
    			else rep_freq = "('月')";
    			    			
    			String hql = "from MRepFreq mrf where mrf.repFreqName in " + rep_freq;
    			List rep_freqList = session.createQuery(hql).list();
    			
    			if(rep_freqList == null && rep_freqList.size() ==0)
    				return null;
    			
    			rep_freq = "";
    			for(int i=0;i<rep_freqList.size();i++){
    				MRepFreq mrepFreq = (MRepFreq)rep_freqList.get(i);
    				rep_freq += mrepFreq.getRepFreqId() + ",";
    			}
    			String orgId = reportInForm.getOrgId();
    			
    			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    			String validate_date = format.format(calendar.getTime());
    			
    			hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and mrr.comp_id.childRepId in(select distinct ra.comp_id.childRepId " +
					  "from ReportAllot ra where ra.comp_id.userGrpId in (" + userGrpIds + ")) and '" + validate_date +
					  "' between mrr.MChildReport.startDate and mrr.MChildReport.endDate order by mrr.MChildReport.comp_id.childRepId";
    			    			
    			Query query = session.createQuery(hql);
    			rList = query.list();
    			
    			for(Iterator iter=rList.iterator();iter.hasNext();){
    				MRepRange mRepRange = (MRepRange)iter.next();
    				MChildReport mChildReport = mRepRange.getMChildReport();
    				Set mActuRepSet = mChildReport.getMActuReps();
    				Map map = new HashMap();
    				for(Iterator iter2=mActuRepSet.iterator();iter2.hasNext();){
    					MActuRep mActuRep = (MActuRep)iter2.next();
    					Aditing aditing = new Aditing();
    					Calendar cal = Calendar.getInstance();
    	    			cal.set(year,term-1,1);
    	    			
    					int days = 0;
    					try{
    						days = mActuRep.getNormalTime().intValue();
    						if(mActuRep.getDelayTime() != null)
    							days += mActuRep.getDelayTime().intValue();
    					}catch(Exception ex){
    						days = 0;
    					}
    					if(StrutsMRepRangeDelegate.contains(mActuRep.getMRepFreq().getRepFreqId().intValue(),rep_freq)
    							&& StrutsMRepRangeDelegate.beforeEnd(cal,days,mChildReport.getEndDate())){
    						if(map.containsKey(mActuRep.getMDataRgType().getDataRangeId()))
    							continue;
    						map.put(mActuRep.getMDataRgType().getDataRangeId(),mActuRep.getMDataRgType().getDataRangeId());
    						aditing.setDataRgTypeName(mActuRep.getMDataRgType().getDataRgDesc());
    						aditing.setActuFreqName(mActuRep.getMRepFreq().getRepFreqName());
    						aditing.setChildRepId(mActuRep.getComp_id().getChildRepId());
    						aditing.setVersionId(mActuRep.getComp_id().getVersionId());
    						String repName = mActuRep.getMChildReport().getMMainRep().getRepCnName().equals(mActuRep.getMChildReport().getReportName()) ?
    										 mActuRep.getMChildReport().getMMainRep().getRepCnName() : mActuRep.getMChildReport().getMMainRep().getRepCnName() 
    										 + "-" + mActuRep.getMChildReport().getReportName();
    						aditing.setRepName(repName);
    						aditing.setYear(new Integer(year));
    						aditing.setTerm(new Integer(term));
    						
    						resList.add(aditing);
    						break;
    					}	
    				}
    				
    			}
    		}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return resList;
    }
    
    public static boolean contains(int rep_freq,String freqs){
    	boolean bool = false;
    	String[] arrFreqs = freqs.split(",");
    	for(int i=0;i<arrFreqs.length;i++){
    		if(arrFreqs[i].equals(String.valueOf(rep_freq))){
    			bool = true;
    			break;
    		}
    	}
    	return bool;
    }
    
    public static boolean beforeEnd(Calendar calendar,int days,String endDate){
    	SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    	Calendar endCalendar = Calendar.getInstance();

    	try {
			endCalendar.setTime(format.parse(endDate));
		} catch (ParseException e) {
			e.printStackTrace();
			return false;
		}
    	days -= 1;
    	calendar.add(Calendar.DATE,days);
    	return calendar.before(endCalendar);
    }
    
    /**
     * 获取模板版本号
     * 
     * @param yearP 模板年份
     * @param termP 模板期数
     * @param orgId 机构ID
     * @return String 版本号
     */
    public static String selectVersionId(String yearP,String termP,String orgId){
    	String versionId = null;
    	DBConn conn = null;
    	Session session = null;
    	try{
    		conn = new DBConn();
			session = conn.beginTransaction();
			
			int term = Integer.parseInt(termP);
			int year = Integer.parseInt(yearP);
			
			Calendar calendar = Calendar.getInstance();
			calendar.set(year,term-1,1);
			
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			String validate_date = format.format(calendar.getTime());
			
			String hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and '" +
					validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
			
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if(list != null && list.size() > 0){
				MRepRange mRepRange = (MRepRange)list.get(0);
				versionId = mRepRange.getComp_id().getVersionId();
			}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		versionId = null;
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return versionId;
    }
    
    /**
     * 获取法人模板版本号
     * 
     * @param yearP 模板年份
     * @param termP 模板期数
     * @param orgId 机构ID
     * @return String 版本号
     */
    public static String getFRVersionId(String yearP,String termP,String orgId){
    	String versionId = null;
    	DBConn conn = null;
    	Session session = null;
    	
    	try{
    		conn = new DBConn();
    		session = conn.beginTransaction();
    		
    		int term = Integer.parseInt(termP);
    		int year = Integer.parseInt(yearP);
    		
    		Calendar calendar = Calendar.getInstance();
    		calendar.set(year,term-1,1);
    		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    		String validate_date = format.format(calendar.getTime());
    		    		
    		String hql = "select distinct mrr.comp_id.versionId from MRepRange mrr where mrr.comp_id.orgId='" + orgId 
    					+ "' and '" + validate_date + "' between mrr.MChildReport.startDate and mrr.MChildReport.endDate and substr(mrr.comp_id.childRepId,1,2) not in ('" 
    					+ com.fitech.net.config.Config.FZ_SF_TAMPLATE +"','" + com.fitech.net.config.Config.FZ_GF_TAMPLATE + "')";
    		
    		//System.out.println(hql);
    		List list = session.createQuery(hql).list();
    		if(list != null && list.size() > 0){
    			versionId = (String)list.get(0);
    		}
    	}catch(HibernateException he){
    		versionId = null;
    		log.printStackTrace(he);
    		he.printStackTrace();
    	}
    	return versionId;
    }
    
    /**
     * 获取分支模板版本号
     * 
     * @param yearP 模板年份
     * @param termP 模板期数
     * @param orgId 机构ID
     * @return String 版本号
     */
    public static String getFZVersionId(String yearP,String termP,String orgId){
    	String versionId = null;
    	DBConn conn = null;
    	Session session = null;
    	
    	try{
    		conn = new DBConn();
    		session = conn.beginTransaction();
    		
    		int term = Integer.parseInt(termP);
    		int year = Integer.parseInt(yearP);
    		
    		Calendar calendar = Calendar.getInstance();
    		calendar.set(year,term-1,1);
    		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    		String validate_date = format.format(calendar.getTime());
    		    		
    		String hql = "select distinct mrr.comp_id.versionId from MRepRange mrr where mrr.comp_id.orgId='" + orgId 
    					+ "' and '" + validate_date + "' between mrr.MChildReport.startDate and mrr.MChildReport.endDate and substr(mrr.comp_id.childRepId,1,2) in ('" 
    					+ com.fitech.net.config.Config.FZ_SF_TAMPLATE +"','" + com.fitech.net.config.Config.FZ_GF_TAMPLATE + "')";
    		
    		List list = session.createQuery(hql).list();
    		if(list != null && list.size() > 0){
    			versionId = (String)list.get(0);
    		}
    	}catch(HibernateException he){
    		versionId = null;
    		log.printStackTrace(he);
    		he.printStackTrace();
    	}
    	return versionId;
    }
    
    /**
	 * 获得当前已发布的该机构报表模板列表
	 * 
	 * @author rds
	 * @date 2005-12-28
	 * 
	 * @param mChildReportForm
	 *            MChildReportForm 包含查询条件
	 * @return List 包含查询到的所有记录
	 */
	public static List getOrgAllReports(Operator operator) {
		List retVals = null;
		DBConn conn = null;
		try {
			StringBuffer hql = new StringBuffer("select distinct mrr.comp_id.childRepId,mrr.comp_id.versionId,mrr.MChildReport.reportName from MRepRange mrr where mrr.comp_id.orgId='"
					+ operator.getOrgId() +"' order by mrr.comp_id.childRepId");
			conn = new DBConn();
			Session session = conn.openSession();
			Query query = session.createQuery(hql.toString());
			List list = query.list();
			if (list != null && list.size() > 0) {
				Iterator it = list.iterator();				
				retVals = new ArrayList();
				while (it.hasNext()) {
					Object[] item = (Object[]) it.next();
					MRepRangeForm form=new MRepRangeForm();
					form.setChildRepId(item[0] != null ? (String) item[0] : "");
					form.setVersionId(item[1] != null ? (String) item[1] : "");
					form.setReportName(item[2] != null ? (String) item[2] : "");
					retVals.add(form);	
				}
			}
		} catch (HibernateException he) {
			retVals = null;
			log.printStackTrace(he);
		} catch (Exception e) {
			retVals = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return retVals;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
     * 查询该机构已经设定的报送范围
     * @author
     * @param 机构ID
     * @return
     */
	public static List getOrgHaveReport(String orgId){	
		if(orgId == null) return null;
	    
		List result = new ArrayList();	   
		DBConn conn = null;	    
		Session session = null;
	    
		try{	    
			conn = new DBConn();	        
			session = conn.openSession();            
	        
			String sql = "select distinct mrr.comp_id.childRepId,mrr.comp_id.versionId,mrr.MChildReport.reportName from MRepRange mrr where mrr.comp_id.orgId='" + orgId + "' order by mrr.comp_id.childRepId";
			Query query = session.createQuery(sql);	        
			List list = query.list();	        
			if (list != null && list.size() > 0){							
	            for(Iterator it = list.iterator();it.hasNext();){	            	
					Object[] object = (Object[]) it.next();
					String childRepId =object[0] != null ? (String) object[0] : "";
					String versionId = object[1] != null ? (String) object[1] : "";					
					String reportName = object[2] != null ? (String) object[2] : "";
					result.add(new LabelValueBean("[" + childRepId + "_" + versionId + "]" + reportName,childRepId + "-" + versionId+"-1"));					
	            }	            
			}
			sql = "select distinct mrr.id.templateId,mrr.id.versionId,t.templateName " +
					"from AfTemplateOrgRelation mrr,AfTemplate t where t.id.templateId=mrr.id.templateId  " +
					"and t.id.versionId=mrr.id.versionId and mrr.id.orgId='" + orgId + "' order by mrr.id.templateId";
			query = session.createQuery(sql);	        
			list = query.list();	        
			if (list != null && list.size() > 0){
	            for(Iterator it = list.iterator();it.hasNext();){	            	
					Object[] object = (Object[]) it.next();
					String childRepId =object[0] != null ? (String) object[0] : "";
					String versionId = object[1] != null ? (String) object[1] : "";					
					String reportName = object[2] != null ? (String) object[2] : "";
					result.add(new LabelValueBean("[" + childRepId + "_" + versionId + "]" + reportName,childRepId + "-" + versionId+"-2"));	            	
				}	            
			}
		}catch(Exception e){	    
			result = null;	        
			log.printStackTrace(e);	        
		}finally{ 
			if(conn!=null)	        
				conn.closeSession();	    
		}	       
		return result;	    
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 查看该机构是否设置过报送范围
	 * @param orgId
	 * @return
	 */
	public static int getMRepRangeByOrg(String orgId){
		int result = 0;	    
		DBConn conn = null;	    
		Session session = null;
	    
		try{	    
			if(orgId != null){	        
				conn = new DBConn();	            
				session = conn.openSession();

				Query query = session.createQuery("select count(*) from MRepRange mrr where mrr.comp_id.orgId='"+orgId+"'");	            
				List list = query.list();
				if(list!=null && list.size()!=0){	            
					result = ((Integer)list.get(0)).intValue();	               
				}	            
			}	        
		}catch(Exception e){	        
			result = 0;	        
			log.printStackTrace(e);	        
		}finally{	       
			if(conn!=null)	        
				conn.closeSession();	    
		}
		return result;
	}  
	 
	/**
	 * jdbc 可能需要修改 卞以刚 2011-12-22
	 * 无特殊oracle 不需要修改 卞以刚 2011-12-28
	 * 删除该机构的报送范围
	 * @param orgId
	 * @return
	 */
	public static boolean deleteMRepRangeByOrg(String orgId){
	
		boolean result = false;	    
		DBConn conn = null;	    
		Session session = null;
		Connection connection=null;
		Statement stmt = null;
		try{	    
			if(orgId != null){
	        
				conn = new DBConn();	            
				session = conn.beginTransaction();
				connection = session.connection();
				stmt = connection.createStatement();
				stmt.execute(" delete from m_rep_range where org_id='"+orgId+"'");				          
				result = true; 	            
			}	        
		}catch(Exception e){	    
			result = false;	        
			log.printStackTrace(e);	        
		}finally{	   
			try {
			if(result == true) {
				connection.commit();
			}else{
				connection.rollback();
			}
			connection.setAutoCommit(result);
			if(stmt != null) 
				stmt.close();

			if(connection != null)
				connection.close();
			if(session != null) 
				session.close();
			if(conn != null) 
				conn.closeSession();
			} catch (SQLException e1) {
				e1.printStackTrace();
			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}	    
		return result;
	}

	/**
	 * 已使用hibernate 卞以刚 2011-12-22
	 * 设置机构报送范围
	 * @param orgId
	 * @param selectVersions
	 * @param selectRepIds
	 * @return
	 */
	public static boolean insertMRepRange(String orgId,String selectRepIds){
	        
		boolean result=false;	    
		DBConn conn = null;	   
		Session session = null;
	    
		try{ 	    
			if(orgId != null && selectRepIds != null && !selectRepIds.equals("")){	        
				conn = new DBConn();	            
				session = conn.beginTransaction();	            
				String[] repIds = selectRepIds.split(com.cbrc.smis.common.Config.SPLIT_SYMBOL_COMMA);				
				
				for(int j=0;j<repIds.length;j++){									              		
					String[] str = repIds[j].split("-");
					if(str != null && str.length == 3){
						if(str[2].equals("1")){
							MRepRange  mRepRange = new MRepRange();	
							MRepRangePK pk = new MRepRangePK();	 
							
							pk.setChildRepId(str[0]);	                
							pk.setVersionId(str[1]);
							pk.setOrgId(orgId);
							mRepRange.setComp_id(pk);	                
							session.save(mRepRange);
						} else {
							AfTemplateOrgRelationId compid = new AfTemplateOrgRelationId();
							compid.setTemplateId(str[0]);
							compid.setVersionId(str[1]);
							compid.setOrgId(orgId);
							AfTemplateOrgRelation orgrelation = new AfTemplateOrgRelation();
							orgrelation.setId(compid);
							session.save(orgrelation);							
						}						
					}
				}
				session.flush(); 
				result = true;
			}	        
		}catch(Exception e){	        
			result = false;	        
			log.printStackTrace(e);	        
		}finally{	        
			if(conn!=null)	        
				conn.endTransaction(result);	       
		}	        
		return result;	    
	}
	
	/**
	 * 获得该机构的上级机构报表模板列表
	 * @param orgId
	 * @return
	 */
	public static List getPreOrgMRepRange(String orgId) {
		List retVals = null;
		DBConn conn = null;
		try {
			String hql = "select distinct mrr.comp_id.childRepId,mrr.comp_id.versionId,mrr.MChildReport.reportName" 
						 + " from MRepRange mrr where mrr.comp_id.orgId=(select on.preOrgId from OrgNet on where on.orgId='" + orgId 
						 + "') order by mrr.comp_id.childRepId,mrr.comp_id.versionId";			
			conn = new DBConn();
			Session session = conn.openSession();
			Query query = session.createQuery(hql);
			List list = query.list();
			if (list != null && list.size() > 0) {							
				retVals = new ArrayList();
				for(Iterator iter = list.iterator();iter.hasNext();){
					Object[] object = (Object[]) iter.next();					
					String childRepId =object[0] != null ? (String) object[0] : "";
					String versionId = object[1] != null ? (String) object[1] : "";					
					String reportName = object[2] != null ? (String) object[2] : "";
					retVals.add(new LabelValueBean("[" + childRepId + "_" + versionId + "]" + reportName,childRepId + "-" + versionId+"-1"));	
				}
			}
		} catch (HibernateException he) {
			retVals = null;
			log.printStackTrace(he);
		} catch (Exception e) {
			retVals = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**
	 *<p>描述:获得未报报表数量</p>
	 *<p>参数:</p>
	 *<p>日期：2007-11-16</p>
	 *<p>作者：曹发根</p>
	 */
	public static int getNotBSCount(ReportInForm reportInForm,Operator operator) {
		int retVals = 0;
		DBConn conn = null;
		try {
			if(reportInForm==null||operator==null) return 0;
			int term = Integer.parseInt(reportInForm.getSetDate());
			int year = reportInForm.getYear().intValue();
			
			Calendar calendar = Calendar.getInstance();
			calendar.set(year,term-1,1);
			
			String rep_freq="";
			if(term == 12)
				rep_freq = "'月','季','半年','年'";
			else if(term == 6)
				rep_freq = "'月','季','半年'";
			else if(term == 3 || term == 9)
				rep_freq = "'月','季'";
			else rep_freq = "'月'";
			conn=new DBConn();
			Connection connection=conn.openSession().connection();
			Statement st=connection.createStatement();
			//应报
			String 	ybsql=" select count(*) from M_REP_RANGE a left join M_CHILD_REPORT b on a.CHILD_REP_ID=b.CHILD_REP_ID and a.VERSION_ID=b.VERSION_ID left join M_ACTU_REP c on  c.CHILD_REP_ID=b.CHILD_REP_ID and c.VERSION_ID=b.VERSION_ID   where c.REP_FREQ_ID in (select REP_FREQ_ID from  M_REP_FREQ " +
					"where REP_FREQ_NAME in("+rep_freq+")) and b.CHILD_REP_ID in("+operator.getChildRepReportPopedom()+")";
			ResultSet rs=st.executeQuery(ybsql);
			rs.next();
			int yb=rs.getInt(1);
			//已报
			String sqlHave=" select count(*) from report_in where YEAR="+year+" and TERM="+term+" and TIMES=1 and ORG_ID='"+operator.getOrgId()+"' " +
					"and CHILD_REP_ID in("+operator.getChildRepReportPopedom()+") and CHECK_FLAG in("+Config.CHECK_FLAG_PASS+","+Config.CHECK_FLAG_UNCHECK+")";
			 rs=st.executeQuery(sqlHave);
			rs.next();
			int have=rs.getInt(1);
			retVals=yb-have;
			
		} catch (Exception e) {
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}

		return retVals;
	}
	/**看有没有ETL数据*/
	public  String getExcelFile(String childRepId,String versionId,String orgId,Integer year,Integer term,Integer dataRangeId,Integer curId,Integer times){
		String excelFilePath = null;
		ReportIn reportId=StrutsReportInDelegate.getReportIn(childRepId,versionId,orgId,year, term,dataRangeId,curId, new Integer(-2));
		if (reportId != null)
		{

			// 将数据库中的数据写进Excel
			CreateExcel createExcel = new CreateExcel(reportId.getRepInId());
			createExcel.createExcel(year.toString(), term.toString());

			String excelPath = com.fitech.net.config.Config.getCollectExcelFolder() + File.separator + year
					+ "_" + term + File.separator + orgId.trim() + File.separator + childRepId + "_"
					+ versionId + "_" + dataRangeId + "_" + curId +"_"+orgId+ ".xls";

			
		/*	String newFileName = String.valueOf(System.currentTimeMillis()) + ".xls";
			try
			{
				FitechUtil.copyFile(excelPath, Config.TEMP_DIR + newFileName);
			}
			catch (Exception e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			*//** 把文件放到临时文件夹中* *//*
			 excelFilePath =  Config.TEMP_DIR + newFileName;*/
			excelFilePath = excelPath;		
		}
		return excelFilePath;
	}
	/**
	 *<p>描述:根据年份期数、机构、字报表ID获得当期对应的版本号</p>
	 *<p>参数:String year,String term,String orgId,String childRepId</p>
	 *<p>日期：2008-3-2</p>
	 *<p>作者：曹发根</p>
	 */
    public static String getVersionId(String year,String term,String orgId,String childRepId){
    	String versionId = null;
    	DBConn conn = null;
    	Session session = null;
    	try{
    		conn = new DBConn();
			session = conn.beginTransaction();
			
			int termp = Integer.parseInt(term);
			int yearp = Integer.parseInt(year);
			
			Calendar calendar = Calendar.getInstance();
			calendar.set(yearp,termp-1,1);
			
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			String validate_date = format.format(calendar.getTime());
			
			String hql = "from MRepRange mrr where mrr.comp_id.orgId='"+ orgId +"' and mrr.MChildReport.childRepId='"+childRepId+"''" +
					validate_date +"' between mrr.MChildReport.startDate and mrr.MChildReport.endDate";
			
			Query query = session.createQuery(hql);
			List list = query.list();
			
			if(list != null && list.size() > 0){
				MRepRange mRepRange = (MRepRange)list.get(0);
				versionId = mRepRange.getComp_id().getVersionId();
			}
    	}catch(HibernateException he){
    		log.printStackTrace(he);
    		versionId = null;
    		if(conn != null) conn.endTransaction(true);
    	}finally{
    		if(conn != null) conn.closeSession();
    	}
    	return versionId;
    }
}