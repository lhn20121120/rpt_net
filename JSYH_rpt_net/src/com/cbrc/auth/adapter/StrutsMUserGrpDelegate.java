
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.MUserGrpForm;
import com.cbrc.auth.hibernate.MUserGrp;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for MUserGrp data (i.e. 
 * com.cbrc.auth.form.MUserGrpForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsMUserGrpDelegate {

    private static FitechException log = new FitechException(StrutsMUserGrpDelegate.class); 

    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：MUserGrp
     *  插入一条用户组记录
     *   
     * @param   mUserGrpForm  包含要插入的用户组名称
     * @return boolean 是否插入成功
     * @exception Exception.
     */
    public static boolean create (MUserGrpForm mUserGrpForm) throws Exception {

    	boolean result = false;       
    	DBConn conn =null;
    	Session session =null;
       
    	if(mUserGrpForm!=null){    
    		try{            
    			conn = new DBConn();               
    			session = conn.beginTransaction(); 
    			MUserGrp userGroup = new MUserGrp();               
    			TranslatorUtil.copyVoToPersistence(userGroup,mUserGrpForm);                       
               
    			session.save(userGroup);               
    			session.flush();               
    			result = true;           
    		}catch(Exception e){            
    			log.printStackTrace(e);               
    			result = false;           
    		}finally{
               if(conn!=null)
                   conn.endTransaction(result);
           }       
    	}       
    	return result;    
    }

    /**
     * 修改用户组信息
     * @author 姚捷
     * @param   mUserGrpForm  MUserGrpForm 包含需要更新的用户组id和更新的用户组名称
     * @return boolean 修改是否成功
     * @exception   Exception   
     */
    public static boolean update (MUserGrpForm mUserGrpForm) throws Exception {
     
        boolean result = false;
        DBConn conn =null;
        Session session =null;
        if(mUserGrpForm!=null)
        {
            try
            {
                conn = new DBConn();
                session = conn.beginTransaction(); 
                
                MUserGrp userGrp = (MUserGrp)session.load(MUserGrp.class,mUserGrpForm.getUserGrpId());
                userGrp.setUserGrpNm(mUserGrpForm.getUserGrpNm().trim());
                              
                session.update(userGrp);
                session.flush();
                result = true;
            }
            catch(Exception e)
            {
                log.printStackTrace(e);
                result = false;
            }
            finally{
                if(conn!=null)
                    conn.endTransaction(result);
            }
        }
       return result;
    }

    /**
     * 已使用Hibernate 卞以刚 2011-12-28
     * 影响对象：MPurBanklevel MPurOrg MUserGrp
     * 删除用户组信息
     * @author 姚捷
     * @param   mUserGrpForm MUserGrpForm 包含要删除的用户组的编号
     * @return  boolean 删除是否成功
     * @exception   Exception
     */  
    public static boolean remove (MUserGrpForm mUserGrpForm) throws Exception {      
    	boolean result = false;
    	DBConn conn =null;      
    	Session session =null;
      
    	if(mUserGrpForm!=null){        
    		try{            
    			conn = new DBConn();              
    			Long userGrpId = mUserGrpForm.getUserGrpId();
                            
    			/**删除用户组行级权限对照表*/ 
    			/**已使用Hibernate 卞以刚 2011-12-28
    			 * 影响对象：MPurBanklevel*/
    			boolean delBankLevel = StrutsMPurBankLevelDelegate.deleteUserGrpPopedom(userGrpId);
    			/**删除用户组实际机构权限对照表*/
    			/**已使用hibernate 卞以刚 2011-12-28
    			 * 影响对象：MPurOrg*/
    			boolean delMPurOrg = StrutsMPurOrgDelegate.deleteUserGrpOrgPopedom(userGrpId);
    			
    			if(delBankLevel == false || delMPurOrg == false) return result;
              
    			/**删除用户组表*/              
    			session = conn.beginTransaction();     
    			/**已使用hibernate 卞以刚 2011-12-28
    			 * 影响对象：MUserGrp*/
    			MUserGrp userGrp = (MUserGrp)session.load(MUserGrp.class,userGrpId);
                           
    			session.delete(userGrp);              
    			session.flush();              
    			result = true;          
    		}catch(Exception e){            
    			log.printStackTrace(e);            
    			result = false;        
    		}finally{            
    			if(conn!=null)               
    				conn.endTransaction(result);          
    		}
    	}                     
    	return result;
    }

    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：MUserGrp
     * 分页显示用户组记录
     * @author 姚捷
     * @param  offset int 偏移量
     * @param  limit int 取最大记录数
     * @return  List 记录集合
     * @exception   Exception  
     */
    public static List select (String orgId,int offset,int limit,boolean isSuperManager) throws Exception {
       List result = null;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
       
           String hql = "";
           if(isSuperManager == true) hql = "from MUserGrp M order by M.userGrpNm";
           else hql = "from MUserGrp M where M.setOrg.orgId='" + orgId + "' order by M.userGrpNm";
           
           Query query = session.createQuery(hql);
           query.setFirstResult(offset);
           query.setMaxResults(limit);
           
           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = new ArrayList();
               for(Iterator it = list.iterator(); it.hasNext();)
               {
                   MUserGrpForm mUserGrpFormTemp = new MUserGrpForm();
                   MUserGrp mUserGrpPersistence = (MUserGrp)it.next();
                   TranslatorUtil.copyPersistenceToVo(mUserGrpPersistence, mUserGrpFormTemp);
                   result.add(mUserGrpFormTemp);         
               }       
           }
       }
       catch(Exception e)
       {
           result = null;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
    }
    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：MUserGrp 
     * 取出数据库中的用户组记录总数
     * @author 姚捷
     * @return int 记录总数 
     */
    
    public static int getRecordCount(String orgId,boolean isSuperManager) throws Exception{
        int result =0;
        DBConn conn =null;
        Session session =null;
        try
        {
            conn = new DBConn();
            session = conn.openSession();
            
            String hql = "";
            if(isSuperManager == true)
            	hql = "select count(*) from MUserGrp";
            else 
            	hql = "select count(*) from MUserGrp M where M.setOrg.orgId='" + orgId + "'";
            
            Query query = session.createQuery(hql);
            List list = query.list();
      
            if(list!=null && list.size()!=0)
                result = ((Integer)list.get(0)).intValue();            
        }
        catch(Exception e)
        {
            log.printStackTrace(e);
            result = 0;
        }
        finally{
            if(conn!=null)
                conn.closeSession();
        }
       
        return result;
    }
    
    /**
     * 已使用Hibernate 卞以刚 2011-12-28
     * 影响对象：MUserGrp
     * 取得所有用户组信息
     * @param orgId 机构id
     * @param userGrpIds 用户组id
     * @param isSuperManager
     * @return List
     */
    public static List findAll(String orgId,String userGrpIds,boolean isSuperManager){
        List result = null;
        DBConn conn = null;
        Session session = null;
        try{
            conn = new DBConn();
            session = conn.openSession();
        
            StringBuffer hql = new StringBuffer();
            if(isSuperManager == true) hql.append("from MUserGrp M");
            else{
            	hql.append("from MUserGrp M where M.setOrg.orgId='" + orgId + "'");
            	if(userGrpIds != null && !userGrpIds.equals(""))
            		hql.append("or M.userGrpId in (" + userGrpIds + ")");
            }
            hql.append(" order by M.userGrpNm");
            
            Query query = session.createQuery(hql.toString());            
            List list = query.list();
            if(list!=null && list.size()!=0){
                result = new ArrayList();
                for(Iterator it = list.iterator(); it.hasNext();){
                    MUserGrpForm mUserGrpFormTemp = new MUserGrpForm();
                    MUserGrp mUserGrpPersistence = (MUserGrp)it.next();
                    TranslatorUtil.copyPersistenceToVo(mUserGrpPersistence, mUserGrpFormTemp);
                    result.add(mUserGrpFormTemp);         
                }       
            }
        }catch(Exception e){
            result = null;
            log.printStackTrace(e);
        }finally{
            if(conn!=null)
               conn.closeSession();
        }
        return result;        
    }
    
    public static Long create (MUserGrp mUserGrp) throws Exception {
		Long mUserGrpId = null;
	    DBConn conn =null;
	    Session session =null;
	    if(mUserGrp!=null){
	    	try{
	    		conn = new DBConn();
	            session = conn.beginTransaction(); 	               	                             
	            session.save(mUserGrp);	               
	            mUserGrpId = mUserGrp.getUserGrpId();	               
	            session.flush();
	         }catch(Exception e){
	            log.printStackTrace(e);
	         }finally{
	            if(conn!=null)
	                conn.endTransaction(true);
	         }
	    }
	    return mUserGrpId;
	}
    
    public static MUserGrp selectOne(Long userGrpId){
    	DBConn conn = null;
        Session session = null;
        MUserGrp mUserGrp = null;
        try
        {
            conn = new DBConn();
            session = conn.openSession();            
            Query query = session.createQuery("from MUserGrp mug where mug.userGrpId=" + userGrpId);
            
            List list = query.list();
            if(list!=null && list.size()!=0){
                mUserGrp = (MUserGrp)list.get(0);
            }
        }
        catch(Exception e){
            log.printStackTrace(e);
        }
        finally{
            if(conn!=null)
               conn.closeSession();
        }
        return mUserGrp;
    }
    
    /**
     * 判断某机构用户组是否存在
     * @return boolean
     * @exception   Exception  
     */
    public static boolean isExist(MUserGrpForm mUserGrpForm) throws Exception {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
       
           String hql = "from MUserGrp M where M.userGrpNm='" + mUserGrpForm.getUserGrpNm().trim() + "'";
           Query query = session.createQuery(hql);
           
           List list = query.list();
           if(list != null && list.size() > 0)
           	  result = true;
           
       }catch(Exception e){
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
    }
}
