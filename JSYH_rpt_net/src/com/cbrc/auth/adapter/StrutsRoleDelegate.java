
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.RoleForm;
import com.cbrc.auth.hibernate.Role;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for Role data (i.e. 
 * com.cbrc.auth.form.RoleForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsRoleDelegate {

    private static FitechException log = new FitechException(StrutsDepartmentDelegate.class); 

    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：Role
     *  插入一条角色记录
     *   
     * @param   roleForm  包含要插入的角色名称
     * @exception   Exception   If the new com.cbrc.auth.form.DepartmentForm object cannot be created or persisted.
     */
    public static boolean create (RoleForm roleForm) throws Exception {       
        
    	boolean result = false;       
    	DBConn conn =null;       
    	Session session =null;
       
    	if(roleForm!=null){           
    		try{            
    			conn = new DBConn();               
    			session = conn.beginTransaction();                
    			Role rolePersistence = new Role();               
    			TranslatorUtil.copyVoToPersistence(rolePersistence,roleForm);
               
    			session.save(rolePersistence);               
    			session.flush();               
    			result = true;           
    		}catch(Exception e){            
    			log.printStackTrace(e);               
    			result = false;           
    		}finally{            
    			if(conn!=null)                
    				conn.endTransaction(result);           
    		}       
    	}       
    	return result;    
    }

    public static boolean create (Role role) throws Exception {
        
        boolean result = false;       
        DBConn conn =null;       
        Session session =null;
       
        if(role!=null){           
        	try{              
        		conn = new DBConn();               
        		session = conn.beginTransaction(); 
        		
        		session.save(role);               
        		session.flush();           		
        		result = true;           
        	}catch(Exception e){               
        		log.printStackTrace(e);               
        		result = false;           
        	}finally{             
        		if(conn!=null)                
        			conn.endTransaction(result);           
        	}       
        }       
        return result;    
    }
    
    /**
     * 修改角色信息
     * @author 姚捷
     * @param   departmentForm  DepartmentForm 包含需要更新的角色id和更新的角色名称
     * @return boolean 修改是否成功
     * @exception   Exception   
     */
    public static boolean update (RoleForm roleForm) throws Exception {
     
        boolean result = false;
        DBConn conn =null;
        Session session =null;
        if(roleForm!=null)
        {
            try
            {
                conn = new DBConn();
                session = conn.beginTransaction(); 
                
                Role role = (Role)session.load(Role.class,roleForm.getRoleId());
                role.setRoleName(roleForm.getRoleName().trim());
                              
                session.update(role);
                session.flush();
                result = true;
            }
            catch(Exception e)
            {
                log.printStackTrace(e);
                result = false;
            }
            finally{
                if(conn!=null)
                    conn.endTransaction(result);
            }
        }
       return result;
    }

    /**
     * 已使用hibernate 卞以刚 2011-12-28
     * 影响对象：RoleTool Role
     * 删除角色信息
     * @author 姚捷
     * @param   roleForm  RoleForm 包含要删除的角色的编号
     * @return  boolean 删除是否成功
     * @exception   Exception   If the com.cbrc.auth.form.DepartmentForm object cannot be removed.
     */  
    public static boolean remove (RoleForm roleForm) throws Exception {
      boolean result = false;
      
      DBConn conn =null;
      Session session =null;
      if(roleForm!=null)
      {
          try
          {
              conn = new DBConn();
              Long roleId = roleForm.getRoleId();
              /**删除角色功能菜单对照表*/
              /**已使用hibernate 卞以刚 2011-12-28
               * 影响对象：RoleTool*/
              StrutsRoleToolDelegate.deleteFromRoleId(roleId);
              /**删除本表信息*/
              session = conn.beginTransaction(); 
              
              Role role = (Role)session.load(Role.class,roleId);
             
              session.delete(role);
              session.flush();
              result = true;
          }
          catch(Exception e)
          {
              log.printStackTrace(e);
              result = false;
          }
          finally{
              if(conn!=null)
                  conn.endTransaction(result);
          }
      }
          
      return result;
    }

   /**
    * 已使用Hibernate 卞以刚 2011-12-28
    * 影响对象：Role
    * 取得所有角色信息
    * @param orgId 机构id
    * @param roleIds 当前用户具有的角色id串
    * @param isSuperManager
    * @return List
    * @throws Exception
    */
   public static List findAll(String orgId,String roleIds,boolean isSuperManager) throws Exception {
       List result = null;
       DBConn conn = null;
       Session session = null;
       try{
           conn = new DBConn();
           session = conn.openSession();
       
           StringBuffer hql = new StringBuffer();
           if(isSuperManager == true) hql.append("from Role R");
           else{
        	   hql.append("from Role R where R.setOrgId='" + orgId + "'");
        	   if(roleIds != null && !roleIds.equals(""))
        		   hql.append(" or R.roleId in (" + roleIds + ")");        	   
           }
           hql.append(" order by R.roleName");
           
           Query query = session.createQuery(hql.toString());
           List list = query.list();
           if(list!=null && list.size()!=0){
               result = new ArrayList();
               for(Iterator it = list.iterator(); it.hasNext();){
                   RoleForm roleFormTemp = new RoleForm();
                   Role rolePersistence = (Role)it.next();
                   TranslatorUtil.copyPersistenceToVo(rolePersistence, roleFormTemp);
                   result.add(roleFormTemp);         
               }       
           }
       }catch(Exception e){
           result = null;
           log.printStackTrace(e);
       }finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }

   /**
    * 取得所有角色信息
    *
    * @exception   Exception   If the com.cbrc.auth.form.RoleForm objects cannot be retrieved.
    */
   public static List findAll (String orgId) throws Exception {
       List result = null;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
       
           Query query = session.createQuery("from Role R where R.orgId='"+orgId+"'");
           
           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = new ArrayList();
               for(Iterator it = list.iterator(); it.hasNext();)
               {
                   RoleForm roleFormTemp = new RoleForm();
                   Role rolePersistence = (Role)it.next();
                   TranslatorUtil.copyPersistenceToVo(rolePersistence, roleFormTemp);
                   result.add(roleFormTemp);         
               }       
           }
       }
       catch(Exception e)
       {
           result = null;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }
   
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Role
    * 分页显示角色记录
    * @author 姚捷
    * @param  offset int 偏移量
    * @param  limit int 取最大记录数
    * @return  List 记录集合
    * @exception   Exception  
    */
   public static List select (String orgId,int offset,int limit,boolean isSuperManager) throws Exception {
      List result = null;
      DBConn conn = null;
      Session session = null;
      try{
          conn = new DBConn();
          session = conn.openSession();
      
          String hql = "";
          if(isSuperManager == true) hql = "from Role R order by R.roleName";
          else hql = "from Role R where R.setOrgId='" + orgId + "' order by R.roleName";
          
          Query query = session.createQuery(hql);
          query.setFirstResult(offset);
          query.setMaxResults(limit);
          
          List list = query.list();
          if(list!=null && list.size()!=0){
              result = new ArrayList();
              for(Iterator it = list.iterator(); it.hasNext();){
                  RoleForm roleFormTemp = new RoleForm();
                  Role rolePersistence = (Role)it.next();
                  TranslatorUtil.copyPersistenceToVo(rolePersistence, roleFormTemp);
                  result.add(roleFormTemp);         
              }       
          }
      }catch(Exception e){
          result = null;
          log.printStackTrace(e);
      }finally{
          if(conn!=null)
             conn.closeSession();
      }
      return result;
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：Role
    * 取出数据库中的角色记录总数
    * @author 姚捷
    * @return int 记录总数 
    */
   
   public static int getRecordCount(String orgId,boolean isSuperManager) throws Exception
   {
       int result =0;
       DBConn conn =null;
       Session session =null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           
           String hql = "";
           if(isSuperManager == true) hql = "select count(*) from Role";
           else hql = "select count(*) from Role R where R.setOrgId='" + orgId + "'";
           
           Query query = session.createQuery(hql);
           List list = query.list();
     
           if(list!=null && list.size()!=0)
               result = ((Integer)list.get(0)).intValue();
           
       }
       catch(Exception e)
       {
           log.printStackTrace(e);
           result = 0;
       }
       finally{
           if(conn!=null)
               conn.closeSession();
       }
      
       return result;
   }
   
   /**
    * 已使用Hibernate 卞以刚 2011-12-28
    * 影响对象：Role
    * 判断角色是否存在
    * 
    * @return  boolean
    */  
   public static boolean isExist(RoleForm roleForm) throws Exception {
     boolean result = false;
     
     DBConn conn =null;
     Session session =null;
     if(roleForm!=null){
         try{
             conn = new DBConn();
             session = conn.openSession();
             
             String hql = "from Role R where R.roleName='" + roleForm.getRoleName().trim() + "'";
             Query query = session.createQuery(hql);
             
             List list = query.list();
             if(list != null && list.size() > 0)
             	result = true;
         }catch(Exception e){
             log.printStackTrace(e);
             result = false;
         }
         finally{
             if(conn!=null)
                 conn.closeSession();
         }
     }
     return result;
   }
   
    /**
	 * 取得所有角色信息 
	 * 
	 * @exception Exception
	 *                If the com.cbrc.auth.form.RoleForm objects cannot be
	 *                retrieved.
	 */
	public static List findAllRole(String userIds) throws Exception {
		List result = null;
		DBConn conn = null;
		Session session = null;
		if(userIds==null)return null;
		try {
			conn = new DBConn();
			session = conn.openSession();
		
			Query query = session.createQuery("from Role r where r.roleId in(select distinct ur.role.roleId  from UserRole ur where ur.operator.userId in("
					+ userIds+"))");

			List list = query.list();
			if (list != null && list.size() != 0) {
				result = new ArrayList();
				for (Iterator it = list.iterator(); it.hasNext();) {
					RoleForm  roleForm = new RoleForm();
					Role role = (Role) it.next();
					com.cbrc.auth.adapter.TranslatorUtil.copyPersistenceToVo(role,
							roleForm);
					result.add(roleForm);
				}
			}
		} catch (Exception e) {
			result = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return result;
	}
}
