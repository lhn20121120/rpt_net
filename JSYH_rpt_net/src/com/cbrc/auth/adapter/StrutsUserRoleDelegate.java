
package com.cbrc.auth.adapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.hibernate.Query;
import net.sf.hibernate.Session;

import com.cbrc.auth.form.OperatorForm;
import com.cbrc.auth.form.UserRoleForm;
import com.cbrc.auth.hibernate.Operator;
import com.cbrc.auth.hibernate.Role;
import com.cbrc.auth.hibernate.UserRole;
import com.cbrc.smis.dao.DBConn;
import com.cbrc.smis.util.FitechException;

/**
 * This is a delegate class to handle interaction with the backend persistence layer of hibernate. 
 * It has a set of methods to handle persistence for UserRole data (i.e. 
 * com.cbrc.auth.form.UserRoleForm objects).
 * 
 * @author <strong>Generated by Middlegen.</strong>
 */
public class StrutsUserRoleDelegate {
    private static FitechException log = new FitechException(StrutsUserRoleDelegate.class);

   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：UserRole
    * 取得有多少用户是属于这个角色
    * @author 姚捷
    * @param roleId Long 角色id
    * @return 属于该角色的用户数量
    */
   public static int getUserNumFromRoleId(Long roleId)
   {
       int result = 0;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           String hql = "select count(*) from UserRole ur where ur.role.roleId="+roleId.toString();
           Query query = session.createQuery(hql);

           List list = query.list();
           if(list!=null && list.size()!=0)
           {
               result = ((Integer)list.get(0)).intValue();
           }
       }
       catch(Exception e)
       {
           result = 0;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-21 
    * 影响对象：UserRole
    * 取出该用户已经设置的角色
    * @param userId Long 用户id
    * @return List 该用户已经设置的角色信息
    */
   public static List getUserSetRole(Long userId){
       List result = null;
       DBConn conn = null;
       Session session = null;
       try{
           if(userId!=null){
               conn = new DBConn();
               session = conn.openSession();
               String hql = "from UserRole ur where ur.operator.userId="+userId;
               Query query = session.createQuery(hql);
    
               List list = query.list();
               if(list!=null && list.size()!=0){
                   result = new ArrayList();
                   for (Iterator it = list.iterator(); it.hasNext();){
                       UserRoleForm userRoleFormTemp = new UserRoleForm();
                       UserRole userRolePersistence = (UserRole)it.next();
                       TranslatorUtil.copyPersistenceToVo(userRolePersistence, userRoleFormTemp);
                       result.add(userRoleFormTemp);
                    }
               }
           }
       }catch(Exception e){
           result = null;
           log.printStackTrace(e);
       }finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;       
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：UserRole
    * 该用户以前是否设置过角色
    * @param userId Long 用户id 
    * @return 设置过返回true 否则返回false
    */
   public static boolean isRoleSetting(Long userId)
   {
       boolean result = true;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.openSession();
           String hql = "from UserRole ur where ur.operator.userId="+userId;
           Query query = session.createQuery(hql);

           List list = query.list();
           if(list!=null && list.size()!=0)
               result = true;
           else
              result =false;
       }
       catch(Exception e)
       {
           result = true;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.closeSession();
       }
       return result;     
       
   }
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：UserRole
    * 删除该用户以前设置过的角色记录
    * @param userId Long 用户id
    * @return 
    */
   public static boolean deleteUserSetRole(Long userId)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.beginTransaction();
           String hql = "from UserRole ur where ur.operator.userId="+userId;
           
           session.delete(hql);
         
           result = true;
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }
       return result;     
       
   }
   
   /**
    * 删除该用户以前设置过的角色记录
    * @param roleId Long 角色id
    * @return 
    */
   public static boolean deleteUserRole(Long roleId)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           conn = new DBConn();
           session = conn.beginTransaction();
           String hql = "from UserRole ur where ur.role.roleId="+roleId;
           
           session.delete(hql);
         
           result = true;
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }
       return result;     
       
   }
   
   /**
    * 已使用hibernate 卞以刚 2011-12-28
    * 影响对象：UserRole Operator Role
    * 插入新的用户设置的角色
    * @param userRoleForm 包含要插入的角色id字串，之间用“，”隔开
    * @return 插入是否成功
    */
   public static boolean insert(UserRoleForm userRoleForm)
   {
       boolean result = false;
       DBConn conn = null;
       Session session = null;
       try
       {
           if(userRoleForm!=null)
           {
               /**用户id*/
               Long userId = userRoleForm.getUserId();
               /**用户组id字串（用","号隔开）*/
               String selectedRoleIds = userRoleForm.getSelectedRoleIds();
                                           
               if(userId!=null && selectedRoleIds!=null && !selectedRoleIds.equals(""))
               {
                   conn = new DBConn();
                   /**取出每个菜单id*/
                   String[] roleIds = selectedRoleIds.split(",");
                               
                   if(roleIds!=null && roleIds.length>0)
                   {
                       session = conn.beginTransaction();
                       /**构造实体类并插入数据库*/
                       for(int i=0;i<roleIds.length;i++)
                       {
                           UserRole userRole = new UserRole();
                           
                           Operator operator = new Operator();
                           operator.setUserId(userId);
                           userRole.setOperator(operator);
                           
                           Role role = new Role();
                           role.setRoleId(Long.valueOf(roleIds[i]));
                           userRole.setRole(role);
                           
                           session.save(userRole);
                           session.flush();           
                       } 
                       result  = true; 
                   }
               }
               
           }
       }
       catch(Exception e)
       {
           result = false;
           log.printStackTrace(e);
       }
       finally{
           if(conn!=null)
              conn.endTransaction(result);
       }     
       return result;            
   }
   
   /**
	 * 取得用户信息
	 * 
	 * @author 吴昊
	 * @param roleId
	 *            Long 角色id
	 * @return 取得用户信息
	 */
	public static OperatorForm getUserId(Long roleId) {
		if (roleId == null)
			return null;
		OperatorForm operatorForm = new OperatorForm();
		DBConn conn = null;
		Session session = null;
		try {
			conn = new DBConn();
			session = conn.openSession();
			String hql = " from UserRole ur where ur.role.roleId="
					+ roleId.toString();
			Query query = session.createQuery(hql);

			List list = query.list();
			if (list != null && list.size() != 0) {
				UserRole userRole=(UserRole)list.get(0);
				
				operatorForm.setPassword(userRole.getOperator().getPassword());
				operatorForm.setUserName(userRole.getOperator().getUserName());		

			}

		} catch (Exception e) {
			operatorForm = null;
			log.printStackTrace(e);
		} finally {
			if (conn != null)
				conn.closeSession();
		}
		return operatorForm;
	}
}

